# shellcheck shell=bash
# This is a direnv .envrc file (see https://direnv.net/):
# using direnv (tldr;)
#   - sudo apt-get update && sudo apt-get install -y direnv
#   - set default values
#   - new shell
#   - cd to the top of your repo (you will see an error)
#   - direnv allow . (gets rid of the error)
set -e

# set some util vars
# CI variables 'CI_*'- this are set for CI jobs, but not for local scripts
# Adjust the defaults as necessary.
export CI_REGISTRY=${CI_REGISTRY:-""}
export CI_PROJECT_DIR=${CI_PROJECT_DIR:-$(pwd)}
export CI_PROJECT_PATH=${CI_PROJECT_PATH:-styx/styx-emulator}
export CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE:-${CI_REGISTRY}/${CI_PROJECT_PATH}}
export CI_REPOSITORY_URL=${CI_REPOSITORY_URL:-https://github.com/styx-emulator/styx-emulator}
export STYX_ROOT="$CI_PROJECT_DIR"

# Prepend RUST built binaries
RUST_RUN_BUILD_CONFIG=${RUST_RUN_BUILD_CONFIG:-debug}
export DEPLOY_BINS_DIR=${DEPLOY_BINS_DIR:-"${CI_PROJECT_DIR}"/target/"${RUST_RUN_BUILD_CONFIG}"}
PATH_add "${DEPLOY_BINS_DIR}"

# trace-webapp environment: required when using tracing web tools
PATH_add "${CI_PROJECT_DIR}"/extensions/trace-webapp/scripts
source_env_if_exists  extensions/trace-webapp/.webapprc

# specify a cargo home, this is will get shared among styx builds
# and containers etc that are spawned
export CARGO_HOME="$(pwd)/.cargo-home"

# Add cargo-home to path, so installed stuff shows up
PATH_add "${CARGO_HOME}/bin"

# source our styx guix env utils
source_env_if_exists dist/guix/envrc-utils.bash

# local overrides and secrets, this *must* always be last in the `.envrc`
source_env_if_exists  .local.env

# make our required directories
mkdir -p "$HOME/.config/direnv"
mkdir -p "$CARGO_HOME"
