// BSD 2-Clause License
//
// Copyright (c) 2024, Styx Emulator Project
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
use crate::StyxMachineError;
use crate::UnknownError;
use styx_cpu_type::{arch::backends::ArchVariant, ArchEndian};

/// Generated by `ProcessorBuilder`.
#[derive(Debug, thiserror::Error)]
pub enum ProcessorBuilderError {
    #[error("Requested backend not supported")]
    BackendNotSupported,
    #[error("Backend not provided")]
    BackendRequired,
    #[error("Requested cpu variant not supported")]
    CpuVariantNotSupported,
    #[error("endianness {0} not supported")]
    EndianNotSupported(ArchEndian),
    #[error("No endian provided")]
    NoEndian,
    #[error("No Executor plugin")]
    NoExecutor,
    #[error("No loader provided")]
    NoLoader,
    #[error("No path to guest code provided")]
    NoTargetProgram,
    #[error("No cpu variant provided")]
    NoVariant,
    #[error(transparent)]
    Unknown(#[from] UnknownError),
}

impl From<ProcessorBuilderError> for StyxMachineError {
    fn from(value: ProcessorBuilderError) -> Self {
        Self::ProcessorBuilder(value)
    }
}

/// Generated by `BuildableProcessor`.
#[derive(Debug, thiserror::Error)]
pub enum ProcessorBuilderImplError {
    #[error("Requested backend not supported")]
    BackendNotSupported,
    #[error("Requested cpu variant not supported")]
    CpuVariantNotSupported,
    #[error("endianness {0} not supported")]
    EndianNotSupported(ArchEndian),
    #[error("Family Conversion Incompatibility: From: `{0:?}`")]
    FamilyIncompatibility(ArchVariant),
    #[error(transparent)]
    Unknown(#[from] UnknownError),
}

impl From<ProcessorBuilderImplError> for ProcessorBuilderError {
    fn from(value: ProcessorBuilderImplError) -> Self {
        match value {
            ProcessorBuilderImplError::BackendNotSupported => {
                ProcessorBuilderError::BackendNotSupported
            }
            ProcessorBuilderImplError::CpuVariantNotSupported => {
                ProcessorBuilderError::CpuVariantNotSupported
            }
            ProcessorBuilderImplError::EndianNotSupported(endian) => {
                ProcessorBuilderError::EndianNotSupported(endian)
            }
            err @ ProcessorBuilderImplError::FamilyIncompatibility(_) => {
                anyhow::anyhow!(err).into()
            }
            err @ ProcessorBuilderImplError::Unknown(_) => anyhow::anyhow!(err).into(),
        }
    }
}

#[derive(thiserror::Error, Debug)]
pub enum StartProcessorError {
    #[error("processor already running")]
    ProcessorRunning,
    #[error(transparent)]
    Unknown(#[from] UnknownError),
}

#[derive(thiserror::Error, Debug)]
pub enum PauseProcessorError {
    #[error("processor already paused")]
    ProcessorPaused,
    #[error(transparent)]
    Unknown(#[from] UnknownError),
}
