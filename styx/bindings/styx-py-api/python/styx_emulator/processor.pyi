# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import arch.arm
import arch.blackfin
import arch.mips64
import arch.ppc32
import arch.superh
import builtins
import cpu
import cpu.hooks
import datetime
import executor
import loader
import plugin
import typing
from enum import Enum

class EmulationReport:
    instructions: builtins.int
    exit_reason: TargetExitReason
    is_fatal: builtins.bool
    is_stop_request: builtins.bool
    wall_time: builtins.float
    r"""
    Total wall clock time spent in emulation, in seconds.
    """

class Processor:
    processor_state: ProcessorState
    r"""
    read the processor's current state
    """
    pc: builtins.int
    r"""
    get the current program counter
    """
    ipc_port: typing.Optional[builtins.int]
    r"""
    get the Inter Process Communication (IPC) port for this processor
    """
    def pause(self) -> None:
        r"""
        temporarily stop the internal executor
        """
    def wait_for_stop(self) -> EmulationReport:
        r"""
        wait for processor to exit
        """
    def start(self, inst:typing.Optional[builtins.int]=None, timeout:typing.Optional[datetime.timedelta]=None) -> None:
        r"""
        start the processor (nonblocking)

        Optionally supply inst or timeout to only execute for a set amount of instructions or time.
        """
    def write_registers(self, reg:ArmRegister | BlackfinRegister | Ppc32Register | SuperHRegister | Mips64Register, value:builtins.int) -> None:
        r"""
        write a value to the register
        """
    def read_register(self, reg:ArmRegister | BlackfinRegister | Ppc32Register | SuperHRegister | Mips64Register) -> builtins.int:
        r"""
        read the value of a register, currently only integer support
        """
    def write_code(self, addr:builtins.int, bytes:bytes) -> None:
        r"""
        write the memory staring att [addr], writing all of the bytes in bytes
        """
    def write_data(self, addr:builtins.int, bytes:bytes) -> None:
        r"""
        write the memory staring att [addr], writing all of the bytes in bytes
        """
    def read_code(self, base:builtins.int, size:builtins.int) -> bytes:
        r"""
        read the memory starting at [base], ending at [base] + [size]
        """
    def read_data(self, base:builtins.int, size:builtins.int) -> bytes:
        r"""
        read the memory starting at [base], ending at [base] + [size]
        """
    def set_pc(self, pc:builtins.int) -> None:
        r"""
        set the value of the program counter for the processor
        """
    def add_hook(self, hook:CodeHook | CodeDataHook | BlockHook | BlockDataHook | MemoryWriteHook | MemoryWriteDataHook | MemoryReadHook | MemoryReadDataHook | InterruptHook | InterruptDataHook | InvalidInstructionHook | InvalidInstructionDataHook | ProtectionFaultHook | ProtectionFaultDataHook | UnmappedFaultHook | UnmappedFaultDataHook) -> HookToken: ...
    def delete_hook(self, token:HookToken) -> None: ...

class ProcessorBuilder:
    r"""
    A builder for constructing a processor emulator
    """
    def __new__(cls) -> ProcessorBuilder:
        r"""
        create a new processor builder
        """
    def set_target_program(self, pgm:str) -> None:
        r"""
        set the path to the loader's input file
        """
    def set_input_bytes(self, bytes:bytes) -> None:
        r"""
        set the loader's input directly in bytes
        """
    def add_plugin(self, plugin:Plugin) -> None:
        r"""
        add a processor plugin to the new processor
        """
    def set_executor(self, executor:StyxExecutor) -> None:
        r"""
        set the new processor's executor plugin.

        The StyxExecutor handles how the processor executes instructions and the lifecycle.
        """
    def set_loader(self, loader:Loader) -> None:
        r"""
        set the new processor's loader

        The loader is invoked by the processor to load the initial state
        """
    def set_ipc_port(self, port:builtins.int) -> None:
        r"""
        set the inter processor communication (IPC) port

        this port is bound by a GRPC server to communicate with other processors and services
        """
    def add_hook(self, hook:CodeHook | CodeDataHook | BlockHook | BlockDataHook | MemoryWriteHook | MemoryWriteDataHook | MemoryReadHook | MemoryReadDataHook | InterruptHook | InterruptDataHook | InvalidInstructionHook | InvalidInstructionDataHook | ProtectionFaultHook | ProtectionFaultDataHook | UnmappedFaultHook | UnmappedFaultDataHook) -> None:
        r"""
        Add a hook to supported events and trigger custom code
        """
    def set_backend(self, backend:Backend) -> None:
        r"""
        Set the emulation backend this processor should use
        """
    def build(self, target:Target) -> Processor:
        r"""
        build the new processor and reset the builder
        """

class ProcessorState(Enum):
    Paused = ...
    Running = ...

class Target(Enum):
    r"""
    A CPU that Styx supports emulation for.
    """
    Bf512 = ...
    CycloneV = ...
    Kinetis21 = ...
    Mpc8xx = ...
    Ppc4xx = ...
    Raw = ...
    Stm32f107 = ...
    Stm32f405 = ...
    SuperH2A = ...

class TargetExitReason(Enum):
    BusError = ...
    r"""
    Generic bus error for the target system, most likely
    going to occur if hardware is attempted to be put into
    an invalid state
    """
    DoubleFault = ...
    r"""
    Generic double fault, the interrupt / exception handed
    faulted, on the target platform a double fault is fatal.
    The string should detail the 2-level faults that occurred
    """
    ExecutionTimeoutComplete = ...
    r"""
    The initial provided execution timeout window was reached
    """
    GeneralFault = ...
    r"""
    Generic fault, the populated string should detail more
    """
    HardwarePowerOff = ...
    r"""
    Target hardware requested power off.
    """
    HardwareReset = ...
    r"""
    Target hardware requested restart
    """
    HostStopRequest = ...
    r"""
    Host has issued a `.cpu_stop()` request
    """
    IllegalInstruction = ...
    r"""
    Target attempted to execute an illegal instruction,
    this is generally going to occur when non privileged code
    attempts to execute a privileged instruction as opposed
    to [`TargetExitReason::InstructionDecodeError`] which occurs
    when the bytes at `pc` cannot be decoded into a valid
    instruction for the target processor
    """
    InstructionCountComplete = ...
    r"""
    The initial provided instruction count was completed
    """
    InstructionDecodeError = ...
    r"""
    Target is unable to decode the bytes at `pc`
    """
    InvalidMemoryMapping = ...
    r"""
    Target encountered an invalid memory mapping
    """
    InvalidStateFromHost = ...
    r"""
    The host has attempted to set an invalid state in the target
    platform. The string should detail what action caused this
    to occur
    """
    InvalidStateFromTarget = ...
    r"""
    The target has attempted to set an invalid state in the
    target platform. The string should detail what action caused
    this to occur
    """
    ProtectedMemoryFetch = ...
    r"""
    Target attempted to fetch memory that does not have any permissions
    """
    ProtectedMemoryRead = ...
    r"""
    Target attempted to read memory that does not have read permissions
    """
    ProtectedMemoryWrite = ...
    r"""
    Target attempted to write memory that does not have write permissions
    """
    SoftwarePowerOff = ...
    r"""
    Target software requested shutdown
    """
    SoftwareReset = ...
    r"""
    Target software requested restart
    """
    TripleFault = ...
    r"""
    Generic triple fault, the interrupt / exception handler
    faulted 3 deep, on the target platform a triple fault is
    fatal. The string should detail the 3-level faults that
    occurred
    """
    UnalignedMemoryFetch = ...
    r"""
    Target performed an unaligned memory fetch
    """
    UnalignedMemoryRead = ...
    r"""
    Target performed an unaligned memory read
    """
    UnalignedMemoryWrite = ...
    r"""
    Target performed an unaligned memory read
    """
    UnmappedMemoryFetch = ...
    r"""
    Target performed an unmapped memory fetch
    """
    UnmappedMemoryRead = ...
    r"""
    Target performed an unmapped memory read
    """
    UnmappedMemoryWrite = ...
    r"""
    Target performed an unmapped memory read
    """
