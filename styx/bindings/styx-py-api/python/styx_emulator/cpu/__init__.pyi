# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import builtins
import cpu.hooks
import typing
from . import hooks
from enum import Enum

class HookToken:
    ...

class MemFaultData:
    ...

class ProcessorCore:
    pc: builtins.int
    def read_code(self, address:builtins.int, nbytes:builtins.int) -> bytes: ...
    def write_code(self, address:builtins.int, value:bytes) -> None: ...
    def read_data(self, address:builtins.int, nbytes:builtins.int) -> bytes: ...
    def write_data(self, address:builtins.int, value:bytes) -> None: ...
    def read_register(self, register:str) -> typing.Optional[builtins.int]: ...
    def write_register(self, register_:str, value:builtins.int) -> None: ...
    def add_hook(self, hook:CodeHook | CodeDataHook | BlockHook | BlockDataHook | MemoryWriteHook | MemoryWriteDataHook | MemoryReadHook | MemoryReadDataHook | InterruptHook | InterruptDataHook | InvalidInstructionHook | InvalidInstructionDataHook | ProtectionFaultHook | ProtectionFaultDataHook | UnmappedFaultHook | UnmappedFaultDataHook) -> HookToken: ...
    def delete_hook(self, token:HookToken) -> None: ...
    def stop(self) -> None: ...

class ArchEndian(Enum):
    r"""
    The order of bytes within a word of data
    """
    BigEndian = ...
    r"""
    The MSB is the rightmost bit
    """
    LittleEndian = ...
    r"""
    The MSB is the leftmost bit
    """

class Backend(Enum):
    r"""
    All of the supported emulator backends
    """
    Pcode = ...
    r"""
    A backend which uses PCode to emulate the system
    """
    Unicorn = ...
    r"""
    A backend that uses Unicorn to emulate the system
    """

class MemFaultDataType(Enum):
    Read = ...
    Write = ...
