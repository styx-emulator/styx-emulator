// BSD 2-Clause License
//
// Copyright (c) 2024, Styx Emulator Project
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//! Provides base system types and headers for the MK21Fxxx12 Family.
//!
//! Generated with bindgen --ignore-functions -- -I<path/to/CMSIS/Include>
#![doc(hidden)]
#![allow(
    dead_code,
    non_upper_case_globals,
    non_camel_case_types,
    non_snake_case,
    unused_imports,
    clippy::useless_transmute,
    clippy::too_many_arguments
)]
/* automatically generated by rust-bindgen 0.66.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const MCU_MEM_MAP_VERSION: u32 = 256;
pub const MCU_MEM_MAP_VERSION_MINOR: u32 = 9;
pub const NUMBER_OF_INT_VECTORS: u32 = 98;
#[doc = "< Not available device specific interrupt"]
pub const IRQn_NotAvail_IRQn: IRQn = -128;
#[doc = "< Non Maskable Interrupt"]
pub const IRQn_NonMaskableInt_IRQn: IRQn = -14;
#[doc = "< Cortex-M4 SV Hard Fault Interrupt"]
pub const IRQn_HardFault_IRQn: IRQn = -13;
#[doc = "< Cortex-M4 Memory Management Interrupt"]
pub const IRQn_MemoryManagement_IRQn: IRQn = -12;
#[doc = "< Cortex-M4 Bus Fault Interrupt"]
pub const IRQn_BusFault_IRQn: IRQn = -11;
#[doc = "< Cortex-M4 Usage Fault Interrupt"]
pub const IRQn_UsageFault_IRQn: IRQn = -10;
#[doc = "< Cortex-M4 SV Call Interrupt"]
pub const IRQn_SVCall_IRQn: IRQn = -5;
#[doc = "< Cortex-M4 Debug Monitor Interrupt"]
pub const IRQn_DebugMonitor_IRQn: IRQn = -4;
#[doc = "< Cortex-M4 Pend SV Interrupt"]
pub const IRQn_PendSV_IRQn: IRQn = -2;
#[doc = "< Cortex-M4 System Tick Interrupt"]
pub const IRQn_SysTick_IRQn: IRQn = -1;
#[doc = "< DMA Channel 0 Transfer Complete"]
pub const IRQn_DMA0_IRQn: IRQn = 0;
#[doc = "< DMA Channel 1 Transfer Complete"]
pub const IRQn_DMA1_IRQn: IRQn = 1;
#[doc = "< DMA Channel 2 Transfer Complete"]
pub const IRQn_DMA2_IRQn: IRQn = 2;
#[doc = "< DMA Channel 3 Transfer Complete"]
pub const IRQn_DMA3_IRQn: IRQn = 3;
#[doc = "< DMA Channel 4 Transfer Complete"]
pub const IRQn_DMA4_IRQn: IRQn = 4;
#[doc = "< DMA Channel 5 Transfer Complete"]
pub const IRQn_DMA5_IRQn: IRQn = 5;
#[doc = "< DMA Channel 6 Transfer Complete"]
pub const IRQn_DMA6_IRQn: IRQn = 6;
#[doc = "< DMA Channel 7 Transfer Complete"]
pub const IRQn_DMA7_IRQn: IRQn = 7;
#[doc = "< DMA Channel 8 Transfer Complete"]
pub const IRQn_DMA8_IRQn: IRQn = 8;
#[doc = "< DMA Channel 9 Transfer Complete"]
pub const IRQn_DMA9_IRQn: IRQn = 9;
#[doc = "< DMA Channel 10 Transfer Complete"]
pub const IRQn_DMA10_IRQn: IRQn = 10;
#[doc = "< DMA Channel 11 Transfer Complete"]
pub const IRQn_DMA11_IRQn: IRQn = 11;
#[doc = "< DMA Channel 12 Transfer Complete"]
pub const IRQn_DMA12_IRQn: IRQn = 12;
#[doc = "< DMA Channel 13 Transfer Complete"]
pub const IRQn_DMA13_IRQn: IRQn = 13;
#[doc = "< DMA Channel 14 Transfer Complete"]
pub const IRQn_DMA14_IRQn: IRQn = 14;
#[doc = "< DMA Channel 15 Transfer Complete"]
pub const IRQn_DMA15_IRQn: IRQn = 15;
#[doc = "< DMA Error Interrupt"]
pub const IRQn_DMA_Error_IRQn: IRQn = 16;
#[doc = "< Normal Interrupt"]
pub const IRQn_MCM_IRQn: IRQn = 17;
#[doc = "< FTFE Command complete interrupt"]
pub const IRQn_FTFE_IRQn: IRQn = 18;
#[doc = "< Read Collision Interrupt"]
pub const IRQn_Read_Collision_IRQn: IRQn = 19;
#[doc = "< Low Voltage Detect, Low Voltage Warning"]
pub const IRQn_LVD_LVW_IRQn: IRQn = 20;
#[doc = "< Low Leakage Wakeup Unit"]
pub const IRQn_LLWU_IRQn: IRQn = 21;
#[doc = "< WDOG Interrupt"]
pub const IRQn_WDOG_EWM_IRQn: IRQn = 22;
#[doc = "< RNG Interrupt"]
pub const IRQn_RNG_IRQn: IRQn = 23;
#[doc = "< I2C0 interrupt"]
pub const IRQn_I2C0_IRQn: IRQn = 24;
#[doc = "< I2C1 interrupt"]
pub const IRQn_I2C1_IRQn: IRQn = 25;
#[doc = "< SPI0 Interrupt"]
pub const IRQn_SPI0_IRQn: IRQn = 26;
#[doc = "< SPI1 Interrupt"]
pub const IRQn_SPI1_IRQn: IRQn = 27;
#[doc = "< I2S0 transmit interrupt"]
pub const IRQn_I2S0_Tx_IRQn: IRQn = 28;
#[doc = "< I2S0 receive interrupt"]
pub const IRQn_I2S0_Rx_IRQn: IRQn = 29;
#[doc = "< Reserved interrupt 46"]
pub const IRQn_Reserved46_IRQn: IRQn = 30;
#[doc = "< UART0 Receive/Transmit interrupt"]
pub const IRQn_UART0_RX_TX_IRQn: IRQn = 31;
#[doc = "< UART0 Error interrupt"]
pub const IRQn_UART0_ERR_IRQn: IRQn = 32;
#[doc = "< UART1 Receive/Transmit interrupt"]
pub const IRQn_UART1_RX_TX_IRQn: IRQn = 33;
#[doc = "< UART1 Error interrupt"]
pub const IRQn_UART1_ERR_IRQn: IRQn = 34;
#[doc = "< UART2 Receive/Transmit interrupt"]
pub const IRQn_UART2_RX_TX_IRQn: IRQn = 35;
#[doc = "< UART2 Error interrupt"]
pub const IRQn_UART2_ERR_IRQn: IRQn = 36;
#[doc = "< UART3 Receive/Transmit interrupt"]
pub const IRQn_UART3_RX_TX_IRQn: IRQn = 37;
#[doc = "< UART3 Error interrupt"]
pub const IRQn_UART3_ERR_IRQn: IRQn = 38;
#[doc = "< ADC0 interrupt"]
pub const IRQn_ADC0_IRQn: IRQn = 39;
#[doc = "< CMP0 interrupt"]
pub const IRQn_CMP0_IRQn: IRQn = 40;
#[doc = "< CMP1 interrupt"]
pub const IRQn_CMP1_IRQn: IRQn = 41;
#[doc = "< FTM0 fault, overflow and channels interrupt"]
pub const IRQn_FTM0_IRQn: IRQn = 42;
#[doc = "< FTM1 fault, overflow and channels interrupt"]
pub const IRQn_FTM1_IRQn: IRQn = 43;
#[doc = "< FTM2 fault, overflow and channels interrupt"]
pub const IRQn_FTM2_IRQn: IRQn = 44;
#[doc = "< CMT interrupt"]
pub const IRQn_CMT_IRQn: IRQn = 45;
#[doc = "< RTC interrupt"]
pub const IRQn_RTC_IRQn: IRQn = 46;
#[doc = "< RTC seconds interrupt"]
pub const IRQn_RTC_Seconds_IRQn: IRQn = 47;
#[doc = "< PIT timer channel 0 interrupt"]
pub const IRQn_PIT0_IRQn: IRQn = 48;
#[doc = "< PIT timer channel 1 interrupt"]
pub const IRQn_PIT1_IRQn: IRQn = 49;
#[doc = "< PIT timer channel 2 interrupt"]
pub const IRQn_PIT2_IRQn: IRQn = 50;
#[doc = "< PIT timer channel 3 interrupt"]
pub const IRQn_PIT3_IRQn: IRQn = 51;
#[doc = "< PDB0 Interrupt"]
pub const IRQn_PDB0_IRQn: IRQn = 52;
#[doc = "< USB0 interrupt"]
pub const IRQn_USB0_IRQn: IRQn = 53;
#[doc = "< USBDCD Interrupt"]
pub const IRQn_USBDCD_IRQn: IRQn = 54;
#[doc = "< Reserved interrupt 71"]
pub const IRQn_Reserved71_IRQn: IRQn = 55;
#[doc = "< DAC0 interrupt"]
pub const IRQn_DAC0_IRQn: IRQn = 56;
#[doc = "< MCG Interrupt"]
pub const IRQn_MCG_IRQn: IRQn = 57;
#[doc = "< LPTimer interrupt"]
pub const IRQn_LPTMR0_IRQn: IRQn = 58;
#[doc = "< Port A interrupt"]
pub const IRQn_PORTA_IRQn: IRQn = 59;
#[doc = "< Port B interrupt"]
pub const IRQn_PORTB_IRQn: IRQn = 60;
#[doc = "< Port C interrupt"]
pub const IRQn_PORTC_IRQn: IRQn = 61;
#[doc = "< Port D interrupt"]
pub const IRQn_PORTD_IRQn: IRQn = 62;
#[doc = "< Port E interrupt"]
pub const IRQn_PORTE_IRQn: IRQn = 63;
#[doc = "< Software interrupt"]
pub const IRQn_SWI_IRQn: IRQn = 64;
#[doc = "< SPI2 Interrupt"]
pub const IRQn_SPI2_IRQn: IRQn = 65;
#[doc = "< UART4 Receive/Transmit interrupt"]
pub const IRQn_UART4_RX_TX_IRQn: IRQn = 66;
#[doc = "< UART4 Error interrupt"]
pub const IRQn_UART4_ERR_IRQn: IRQn = 67;
#[doc = "< UART5 Receive/Transmit interrupt"]
pub const IRQn_UART5_RX_TX_IRQn: IRQn = 68;
#[doc = "< UART5 Error interrupt"]
pub const IRQn_UART5_ERR_IRQn: IRQn = 69;
#[doc = "< CMP2 interrupt"]
pub const IRQn_CMP2_IRQn: IRQn = 70;
#[doc = "< FTM3 fault, overflow and channels interrupt"]
pub const IRQn_FTM3_IRQn: IRQn = 71;
#[doc = "< DAC1 interrupt"]
pub const IRQn_DAC1_IRQn: IRQn = 72;
#[doc = "< ADC1 interrupt"]
pub const IRQn_ADC1_IRQn: IRQn = 73;
#[doc = "< I2C2 interrupt"]
pub const IRQn_I2C2_IRQn: IRQn = 74;
#[doc = "< CAN0 OR'd message buffers interrupt"]
pub const IRQn_CAN0_ORed_Message_buffer_IRQn: IRQn = 75;
#[doc = "< CAN0 bus off interrupt"]
pub const IRQn_CAN0_Bus_Off_IRQn: IRQn = 76;
#[doc = "< CAN0 error interrupt"]
pub const IRQn_CAN0_Error_IRQn: IRQn = 77;
#[doc = "< CAN0 Tx warning interrupt"]
pub const IRQn_CAN0_Tx_Warning_IRQn: IRQn = 78;
#[doc = "< CAN0 Rx warning interrupt"]
pub const IRQn_CAN0_Rx_Warning_IRQn: IRQn = 79;
#[doc = "< CAN0 wake up interrupt"]
pub const IRQn_CAN0_Wake_Up_IRQn: IRQn = 80;
#[doc = "< SDHC interrupt"]
pub const IRQn_SDHC_IRQn: IRQn = 81;
pub type IRQn = ::std::os::raw::c_int;
pub use self::IRQn as IRQn_Type;
pub const __MPU_PRESENT: u32 = 0;
pub const __NVIC_PRIO_BITS: u32 = 4;
pub const __Vendor_SysTickConfig: u32 = 0;
pub const __FPU_PRESENT: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __CM_CMSIS_VERSION_MAIN: u32 = 5;
pub const __CM_CMSIS_VERSION_SUB: u32 = 0;
pub const __CM_CMSIS_VERSION: u32 = 327680;
pub const __CM4_CMSIS_VERSION_MAIN: u32 = 5;
pub const __CM4_CMSIS_VERSION_SUB: u32 = 0;
pub const __CM4_CMSIS_VERSION: u32 = 327680;
pub const __CORTEX_M: u32 = 4;
pub const __FPU_USED: u32 = 0;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32 {
    pub v: u32,
}
#[test]
fn bindgen_test_layout_T_UINT32() {
    const UNINIT: ::std::mem::MaybeUninit<T_UINT32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<T_UINT32>(),
        4usize,
        concat!("Size of: ", stringify!(T_UINT32))
    );
    assert_eq!(
        ::std::mem::align_of::<T_UINT32>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT32),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT16_WRITE {
    pub v: u16,
}
#[test]
fn bindgen_test_layout_T_UINT16_WRITE() {
    const UNINIT: ::std::mem::MaybeUninit<T_UINT16_WRITE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<T_UINT16_WRITE>(),
        2usize,
        concat!("Size of: ", stringify!(T_UINT16_WRITE))
    );
    assert_eq!(
        ::std::mem::align_of::<T_UINT16_WRITE>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT16_WRITE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT16_WRITE),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT16_READ {
    pub v: u16,
}
#[test]
fn bindgen_test_layout_T_UINT16_READ() {
    const UNINIT: ::std::mem::MaybeUninit<T_UINT16_READ> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<T_UINT16_READ>(),
        2usize,
        concat!("Size of: ", stringify!(T_UINT16_READ))
    );
    assert_eq!(
        ::std::mem::align_of::<T_UINT16_READ>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT16_READ))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT16_READ),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32_WRITE {
    pub v: u32,
}
#[test]
fn bindgen_test_layout_T_UINT32_WRITE() {
    const UNINIT: ::std::mem::MaybeUninit<T_UINT32_WRITE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<T_UINT32_WRITE>(),
        4usize,
        concat!("Size of: ", stringify!(T_UINT32_WRITE))
    );
    assert_eq!(
        ::std::mem::align_of::<T_UINT32_WRITE>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT32_WRITE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT32_WRITE),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct T_UINT32_READ {
    pub v: u32,
}
#[test]
fn bindgen_test_layout_T_UINT32_READ() {
    const UNINIT: ::std::mem::MaybeUninit<T_UINT32_READ> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<T_UINT32_READ>(),
        4usize,
        concat!("Size of: ", stringify!(T_UINT32_READ))
    );
    assert_eq!(
        ::std::mem::align_of::<T_UINT32_READ>(),
        1usize,
        concat!("Alignment of ", stringify!(T_UINT32_READ))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(T_UINT32_READ),
            "::",
            stringify!(v)
        )
    );
}
#[doc = "\\brief  Union type to access the Application Program Status Register (APSR)."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union APSR_Type {
    #[doc = "< Structure used for bit  access"]
    pub b: APSR_Type__bindgen_ty_1,
    #[doc = "< Type      used for word access"]
    pub w: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct APSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_APSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<APSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(APSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<APSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(APSR_Type__bindgen_ty_1))
    );
}
impl APSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn GE(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_GE(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _reserved0: u32,
        GE: u32,
        _reserved1: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let _reserved0: u32 = unsafe { ::std::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let GE: u32 = unsafe { ::std::mem::transmute(GE) };
            GE as u64
        });
        __bindgen_bitfield_unit.set(20usize, 7u8, {
            let _reserved1: u32 = unsafe { ::std::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::std::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::std::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::std::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::std::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::std::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_APSR_Type() {
    const UNINIT: ::std::mem::MaybeUninit<APSR_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<APSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(APSR_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<APSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(APSR_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(APSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(APSR_Type),
            "::",
            stringify!(w)
        )
    );
}
pub const APSR_N_Pos: u32 = 31;
pub const APSR_N_Msk: u32 = 2147483648;
pub const APSR_Z_Pos: u32 = 30;
pub const APSR_Z_Msk: u32 = 1073741824;
pub const APSR_C_Pos: u32 = 29;
pub const APSR_C_Msk: u32 = 536870912;
pub const APSR_V_Pos: u32 = 28;
pub const APSR_V_Msk: u32 = 268435456;
pub const APSR_Q_Pos: u32 = 27;
pub const APSR_Q_Msk: u32 = 134217728;
pub const APSR_GE_Pos: u32 = 16;
pub const APSR_GE_Msk: u32 = 983040;
#[doc = "\\brief  Union type to access the Interrupt Program Status Register (IPSR)."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union IPSR_Type {
    #[doc = "< Structure used for bit  access"]
    pub b: IPSR_Type__bindgen_ty_1,
    #[doc = "< Type      used for word access"]
    pub w: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct IPSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_IPSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<IPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(IPSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<IPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(IPSR_Type__bindgen_ty_1))
    );
}
impl IPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(ISR: u32, _reserved0: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::std::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let _reserved0: u32 = unsafe { ::std::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_IPSR_Type() {
    const UNINIT: ::std::mem::MaybeUninit<IPSR_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IPSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(IPSR_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<IPSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(IPSR_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IPSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IPSR_Type),
            "::",
            stringify!(w)
        )
    );
}
pub const IPSR_ISR_Pos: u32 = 0;
pub const IPSR_ISR_Msk: u32 = 511;
#[doc = "\\brief  Union type to access the Special-Purpose Program Status Registers (xPSR)."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union xPSR_Type {
    #[doc = "< Structure used for bit  access"]
    pub b: xPSR_Type__bindgen_ty_1,
    #[doc = "< Type      used for word access"]
    pub w: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct xPSR_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_xPSR_Type__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(xPSR_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xPSR_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(xPSR_Type__bindgen_ty_1))
    );
}
impl xPSR_Type__bindgen_ty_1 {
    #[inline]
    pub fn ISR(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_ISR(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ICI_IT_1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_ICI_IT_1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn GE(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_GE(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set__reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn T(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_T(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ICI_IT_2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ICI_IT_2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn Q(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn V(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_V(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn C(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Z(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Z(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn N(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_N(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ISR: u32,
        _reserved0: u32,
        ICI_IT_1: u32,
        GE: u32,
        _reserved1: u32,
        T: u32,
        ICI_IT_2: u32,
        Q: u32,
        V: u32,
        C: u32,
        Z: u32,
        N: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let ISR: u32 = unsafe { ::std::mem::transmute(ISR) };
            ISR as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let _reserved0: u32 = unsafe { ::std::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let ICI_IT_1: u32 = unsafe { ::std::mem::transmute(ICI_IT_1) };
            ICI_IT_1 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let GE: u32 = unsafe { ::std::mem::transmute(GE) };
            GE as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let _reserved1: u32 = unsafe { ::std::mem::transmute(_reserved1) };
            _reserved1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let T: u32 = unsafe { ::std::mem::transmute(T) };
            T as u64
        });
        __bindgen_bitfield_unit.set(25usize, 2u8, {
            let ICI_IT_2: u32 = unsafe { ::std::mem::transmute(ICI_IT_2) };
            ICI_IT_2 as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let Q: u32 = unsafe { ::std::mem::transmute(Q) };
            Q as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let V: u32 = unsafe { ::std::mem::transmute(V) };
            V as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let C: u32 = unsafe { ::std::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let Z: u32 = unsafe { ::std::mem::transmute(Z) };
            Z as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let N: u32 = unsafe { ::std::mem::transmute(N) };
            N as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_xPSR_Type() {
    const UNINIT: ::std::mem::MaybeUninit<xPSR_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<xPSR_Type>(),
        4usize,
        concat!("Size of: ", stringify!(xPSR_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<xPSR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(xPSR_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPSR_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xPSR_Type),
            "::",
            stringify!(w)
        )
    );
}
pub const xPSR_N_Pos: u32 = 31;
pub const xPSR_N_Msk: u32 = 2147483648;
pub const xPSR_Z_Pos: u32 = 30;
pub const xPSR_Z_Msk: u32 = 1073741824;
pub const xPSR_C_Pos: u32 = 29;
pub const xPSR_C_Msk: u32 = 536870912;
pub const xPSR_V_Pos: u32 = 28;
pub const xPSR_V_Msk: u32 = 268435456;
pub const xPSR_Q_Pos: u32 = 27;
pub const xPSR_Q_Msk: u32 = 134217728;
pub const xPSR_ICI_IT_2_Pos: u32 = 25;
pub const xPSR_ICI_IT_2_Msk: u32 = 100663296;
pub const xPSR_T_Pos: u32 = 24;
pub const xPSR_T_Msk: u32 = 16777216;
pub const xPSR_GE_Pos: u32 = 16;
pub const xPSR_GE_Msk: u32 = 983040;
pub const xPSR_ICI_IT_1_Pos: u32 = 10;
pub const xPSR_ICI_IT_1_Msk: u32 = 64512;
pub const xPSR_ISR_Pos: u32 = 0;
pub const xPSR_ISR_Msk: u32 = 511;
#[doc = "\\brief  Union type to access the Control Registers (CONTROL)."]
#[repr(C)]
#[derive(Copy, Clone)]
pub union CONTROL_Type {
    #[doc = "< Structure used for bit  access"]
    pub b: CONTROL_Type__bindgen_ty_1,
    #[doc = "< Type      used for word access"]
    pub w: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct CONTROL_Type__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_CONTROL_Type__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<CONTROL_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(CONTROL_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CONTROL_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(CONTROL_Type__bindgen_ty_1))
    );
}
impl CONTROL_Type__bindgen_ty_1 {
    #[inline]
    pub fn nPRIV(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nPRIV(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SPSEL(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SPSEL(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn FPCA(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_FPCA(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set__reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nPRIV: u32,
        SPSEL: u32,
        FPCA: u32,
        _reserved0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nPRIV: u32 = unsafe { ::std::mem::transmute(nPRIV) };
            nPRIV as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let SPSEL: u32 = unsafe { ::std::mem::transmute(SPSEL) };
            SPSEL as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let FPCA: u32 = unsafe { ::std::mem::transmute(FPCA) };
            FPCA as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let _reserved0: u32 = unsafe { ::std::mem::transmute(_reserved0) };
            _reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_CONTROL_Type() {
    const UNINIT: ::std::mem::MaybeUninit<CONTROL_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CONTROL_Type>(),
        4usize,
        concat!("Size of: ", stringify!(CONTROL_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<CONTROL_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CONTROL_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL_Type),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CONTROL_Type),
            "::",
            stringify!(w)
        )
    );
}
pub const CONTROL_FPCA_Pos: u32 = 2;
pub const CONTROL_FPCA_Msk: u32 = 4;
pub const CONTROL_SPSEL_Pos: u32 = 1;
pub const CONTROL_SPSEL_Msk: u32 = 2;
pub const CONTROL_nPRIV_Pos: u32 = 0;
pub const CONTROL_nPRIV_Msk: u32 = 1;
#[doc = "\\brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVIC_Type {
    #[doc = "< Offset: 0x000 (R/W)  Interrupt Set Enable Register"]
    pub ISER: [u32; 8usize],
    pub RESERVED0: [u32; 24usize],
    #[doc = "< Offset: 0x080 (R/W)  Interrupt Clear Enable Register"]
    pub ICER: [u32; 8usize],
    pub RSERVED1: [u32; 24usize],
    #[doc = "< Offset: 0x100 (R/W)  Interrupt Set Pending Register"]
    pub ISPR: [u32; 8usize],
    pub RESERVED2: [u32; 24usize],
    #[doc = "< Offset: 0x180 (R/W)  Interrupt Clear Pending Register"]
    pub ICPR: [u32; 8usize],
    pub RESERVED3: [u32; 24usize],
    #[doc = "< Offset: 0x200 (R/W)  Interrupt Active bit Register"]
    pub IABR: [u32; 8usize],
    pub RESERVED4: [u32; 56usize],
    #[doc = "< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bit wide)"]
    pub IP: [u8; 240usize],
    pub RESERVED5: [u32; 644usize],
    #[doc = "< Offset: 0xE00 ( /W)  Software Trigger Interrupt Register"]
    pub STIR: u32,
}
#[test]
fn bindgen_test_layout_NVIC_Type() {
    const UNINIT: ::std::mem::MaybeUninit<NVIC_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NVIC_Type>(),
        3588usize,
        concat!("Size of: ", stringify!(NVIC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<NVIC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(NVIC_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ISER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ISER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ICER) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ICER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RSERVED1) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RSERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ISPR) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ISPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ICPR) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(ICPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IABR) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(IABR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IP) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(IP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STIR) as usize - ptr as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(NVIC_Type),
            "::",
            stringify!(STIR)
        )
    );
}
pub const NVIC_STIR_INTID_Pos: u32 = 0;
pub const NVIC_STIR_INTID_Msk: u32 = 511;
#[doc = "\\brief  Structure type to access the System Control Block (SCB)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCB_Type {
    #[doc = "< Offset: 0x000 (R/ )  CPUID Base Register"]
    pub CPUID: u32,
    #[doc = "< Offset: 0x004 (R/W)  Interrupt Control and State Register"]
    pub ICSR: u32,
    #[doc = "< Offset: 0x008 (R/W)  Vector Table Offset Register"]
    pub VTOR: u32,
    #[doc = "< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register"]
    pub AIRCR: u32,
    #[doc = "< Offset: 0x010 (R/W)  System Control Register"]
    pub SCR: u32,
    #[doc = "< Offset: 0x014 (R/W)  Configuration Control Register"]
    pub CCR: u32,
    #[doc = "< Offset: 0x018 (R/W)  System Handlers Priority Registers (4-7, 8-11, 12-15)"]
    pub SHP: [u8; 12usize],
    #[doc = "< Offset: 0x024 (R/W)  System Handler Control and State Register"]
    pub SHCSR: u32,
    #[doc = "< Offset: 0x028 (R/W)  Configurable Fault Status Register"]
    pub CFSR: u32,
    #[doc = "< Offset: 0x02C (R/W)  HardFault Status Register"]
    pub HFSR: u32,
    #[doc = "< Offset: 0x030 (R/W)  Debug Fault Status Register"]
    pub DFSR: u32,
    #[doc = "< Offset: 0x034 (R/W)  MemManage Fault Address Register"]
    pub MMFAR: u32,
    #[doc = "< Offset: 0x038 (R/W)  BusFault Address Register"]
    pub BFAR: u32,
    #[doc = "< Offset: 0x03C (R/W)  Auxiliary Fault Status Register"]
    pub AFSR: u32,
    #[doc = "< Offset: 0x040 (R/ )  Processor Feature Register"]
    pub PFR: [u32; 2usize],
    #[doc = "< Offset: 0x048 (R/ )  Debug Feature Register"]
    pub DFR: u32,
    #[doc = "< Offset: 0x04C (R/ )  Auxiliary Feature Register"]
    pub ADR: u32,
    #[doc = "< Offset: 0x050 (R/ )  Memory Model Feature Register"]
    pub MMFR: [u32; 4usize],
    #[doc = "< Offset: 0x060 (R/ )  Instruction Set Attributes Register"]
    pub ISAR: [u32; 5usize],
    pub RESERVED0: [u32; 5usize],
    #[doc = "< Offset: 0x088 (R/W)  Coprocessor Access Control Register"]
    pub CPACR: u32,
}
#[test]
fn bindgen_test_layout_SCB_Type() {
    const UNINIT: ::std::mem::MaybeUninit<SCB_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SCB_Type>(),
        140usize,
        concat!("Size of: ", stringify!(SCB_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<SCB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SCB_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CPUID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CPUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ICSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ICSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VTOR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(VTOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AIRCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(AIRCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SCR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SHP) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SHP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SHCSR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(SHCSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CFSR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CFSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HFSR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(HFSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DFSR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(DFSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMFAR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(MMFAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BFAR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(BFAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AFSR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(AFSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PFR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(PFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DFR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(DFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ADR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ADR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMFR) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(MMFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ISAR) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(ISAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CPACR) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SCB_Type),
            "::",
            stringify!(CPACR)
        )
    );
}
pub const SCB_CPUID_IMPLEMENTER_Pos: u32 = 24;
pub const SCB_CPUID_IMPLEMENTER_Msk: u32 = 4278190080;
pub const SCB_CPUID_VARIANT_Pos: u32 = 20;
pub const SCB_CPUID_VARIANT_Msk: u32 = 15728640;
pub const SCB_CPUID_ARCHITECTURE_Pos: u32 = 16;
pub const SCB_CPUID_ARCHITECTURE_Msk: u32 = 983040;
pub const SCB_CPUID_PARTNO_Pos: u32 = 4;
pub const SCB_CPUID_PARTNO_Msk: u32 = 65520;
pub const SCB_CPUID_REVISION_Pos: u32 = 0;
pub const SCB_CPUID_REVISION_Msk: u32 = 15;
pub const SCB_ICSR_NMIPENDSET_Pos: u32 = 31;
pub const SCB_ICSR_NMIPENDSET_Msk: u32 = 2147483648;
pub const SCB_ICSR_PENDSVSET_Pos: u32 = 28;
pub const SCB_ICSR_PENDSVSET_Msk: u32 = 268435456;
pub const SCB_ICSR_PENDSVCLR_Pos: u32 = 27;
pub const SCB_ICSR_PENDSVCLR_Msk: u32 = 134217728;
pub const SCB_ICSR_PENDSTSET_Pos: u32 = 26;
pub const SCB_ICSR_PENDSTSET_Msk: u32 = 67108864;
pub const SCB_ICSR_PENDSTCLR_Pos: u32 = 25;
pub const SCB_ICSR_PENDSTCLR_Msk: u32 = 33554432;
pub const SCB_ICSR_ISRPREEMPT_Pos: u32 = 23;
pub const SCB_ICSR_ISRPREEMPT_Msk: u32 = 8388608;
pub const SCB_ICSR_ISRPENDING_Pos: u32 = 22;
pub const SCB_ICSR_ISRPENDING_Msk: u32 = 4194304;
pub const SCB_ICSR_VECTPENDING_Pos: u32 = 12;
pub const SCB_ICSR_VECTPENDING_Msk: u32 = 2093056;
pub const SCB_ICSR_RETTOBASE_Pos: u32 = 11;
pub const SCB_ICSR_RETTOBASE_Msk: u32 = 2048;
pub const SCB_ICSR_VECTACTIVE_Pos: u32 = 0;
pub const SCB_ICSR_VECTACTIVE_Msk: u32 = 511;
pub const SCB_VTOR_TBLOFF_Pos: u32 = 7;
pub const SCB_VTOR_TBLOFF_Msk: u32 = 4294967168;
pub const SCB_AIRCR_VECTKEY_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEY_Msk: u32 = 4294901760;
pub const SCB_AIRCR_VECTKEYSTAT_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEYSTAT_Msk: u32 = 4294901760;
pub const SCB_AIRCR_ENDIANESS_Pos: u32 = 15;
pub const SCB_AIRCR_ENDIANESS_Msk: u32 = 32768;
pub const SCB_AIRCR_PRIGROUP_Pos: u32 = 8;
pub const SCB_AIRCR_PRIGROUP_Msk: u32 = 1792;
pub const SCB_AIRCR_SYSRESETREQ_Pos: u32 = 2;
pub const SCB_AIRCR_SYSRESETREQ_Msk: u32 = 4;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos: u32 = 1;
pub const SCB_AIRCR_VECTCLRACTIVE_Msk: u32 = 2;
pub const SCB_AIRCR_VECTRESET_Pos: u32 = 0;
pub const SCB_AIRCR_VECTRESET_Msk: u32 = 1;
pub const SCB_SCR_SEVONPEND_Pos: u32 = 4;
pub const SCB_SCR_SEVONPEND_Msk: u32 = 16;
pub const SCB_SCR_SLEEPDEEP_Pos: u32 = 2;
pub const SCB_SCR_SLEEPDEEP_Msk: u32 = 4;
pub const SCB_SCR_SLEEPONEXIT_Pos: u32 = 1;
pub const SCB_SCR_SLEEPONEXIT_Msk: u32 = 2;
pub const SCB_CCR_STKALIGN_Pos: u32 = 9;
pub const SCB_CCR_STKALIGN_Msk: u32 = 512;
pub const SCB_CCR_BFHFNMIGN_Pos: u32 = 8;
pub const SCB_CCR_BFHFNMIGN_Msk: u32 = 256;
pub const SCB_CCR_DIV_0_TRP_Pos: u32 = 4;
pub const SCB_CCR_DIV_0_TRP_Msk: u32 = 16;
pub const SCB_CCR_UNALIGN_TRP_Pos: u32 = 3;
pub const SCB_CCR_UNALIGN_TRP_Msk: u32 = 8;
pub const SCB_CCR_USERSETMPEND_Pos: u32 = 1;
pub const SCB_CCR_USERSETMPEND_Msk: u32 = 2;
pub const SCB_CCR_NONBASETHRDENA_Pos: u32 = 0;
pub const SCB_CCR_NONBASETHRDENA_Msk: u32 = 1;
pub const SCB_SHCSR_USGFAULTENA_Pos: u32 = 18;
pub const SCB_SHCSR_USGFAULTENA_Msk: u32 = 262144;
pub const SCB_SHCSR_BUSFAULTENA_Pos: u32 = 17;
pub const SCB_SHCSR_BUSFAULTENA_Msk: u32 = 131072;
pub const SCB_SHCSR_MEMFAULTENA_Pos: u32 = 16;
pub const SCB_SHCSR_MEMFAULTENA_Msk: u32 = 65536;
pub const SCB_SHCSR_SVCALLPENDED_Pos: u32 = 15;
pub const SCB_SHCSR_SVCALLPENDED_Msk: u32 = 32768;
pub const SCB_SHCSR_BUSFAULTPENDED_Pos: u32 = 14;
pub const SCB_SHCSR_BUSFAULTPENDED_Msk: u32 = 16384;
pub const SCB_SHCSR_MEMFAULTPENDED_Pos: u32 = 13;
pub const SCB_SHCSR_MEMFAULTPENDED_Msk: u32 = 8192;
pub const SCB_SHCSR_USGFAULTPENDED_Pos: u32 = 12;
pub const SCB_SHCSR_USGFAULTPENDED_Msk: u32 = 4096;
pub const SCB_SHCSR_SYSTICKACT_Pos: u32 = 11;
pub const SCB_SHCSR_SYSTICKACT_Msk: u32 = 2048;
pub const SCB_SHCSR_PENDSVACT_Pos: u32 = 10;
pub const SCB_SHCSR_PENDSVACT_Msk: u32 = 1024;
pub const SCB_SHCSR_MONITORACT_Pos: u32 = 8;
pub const SCB_SHCSR_MONITORACT_Msk: u32 = 256;
pub const SCB_SHCSR_SVCALLACT_Pos: u32 = 7;
pub const SCB_SHCSR_SVCALLACT_Msk: u32 = 128;
pub const SCB_SHCSR_USGFAULTACT_Pos: u32 = 3;
pub const SCB_SHCSR_USGFAULTACT_Msk: u32 = 8;
pub const SCB_SHCSR_BUSFAULTACT_Pos: u32 = 1;
pub const SCB_SHCSR_BUSFAULTACT_Msk: u32 = 2;
pub const SCB_SHCSR_MEMFAULTACT_Pos: u32 = 0;
pub const SCB_SHCSR_MEMFAULTACT_Msk: u32 = 1;
pub const SCB_CFSR_USGFAULTSR_Pos: u32 = 16;
pub const SCB_CFSR_USGFAULTSR_Msk: u32 = 4294901760;
pub const SCB_CFSR_BUSFAULTSR_Pos: u32 = 8;
pub const SCB_CFSR_BUSFAULTSR_Msk: u32 = 65280;
pub const SCB_CFSR_MEMFAULTSR_Pos: u32 = 0;
pub const SCB_CFSR_MEMFAULTSR_Msk: u32 = 255;
pub const SCB_CFSR_MMARVALID_Pos: u32 = 7;
pub const SCB_CFSR_MMARVALID_Msk: u32 = 128;
pub const SCB_CFSR_MLSPERR_Pos: u32 = 5;
pub const SCB_CFSR_MLSPERR_Msk: u32 = 32;
pub const SCB_CFSR_MSTKERR_Pos: u32 = 4;
pub const SCB_CFSR_MSTKERR_Msk: u32 = 16;
pub const SCB_CFSR_MUNSTKERR_Pos: u32 = 3;
pub const SCB_CFSR_MUNSTKERR_Msk: u32 = 8;
pub const SCB_CFSR_DACCVIOL_Pos: u32 = 1;
pub const SCB_CFSR_DACCVIOL_Msk: u32 = 2;
pub const SCB_CFSR_IACCVIOL_Pos: u32 = 0;
pub const SCB_CFSR_IACCVIOL_Msk: u32 = 1;
pub const SCB_CFSR_BFARVALID_Pos: u32 = 15;
pub const SCB_CFSR_BFARVALID_Msk: u32 = 32768;
pub const SCB_CFSR_LSPERR_Pos: u32 = 13;
pub const SCB_CFSR_LSPERR_Msk: u32 = 8192;
pub const SCB_CFSR_STKERR_Pos: u32 = 12;
pub const SCB_CFSR_STKERR_Msk: u32 = 4096;
pub const SCB_CFSR_UNSTKERR_Pos: u32 = 11;
pub const SCB_CFSR_UNSTKERR_Msk: u32 = 2048;
pub const SCB_CFSR_IMPRECISERR_Pos: u32 = 10;
pub const SCB_CFSR_IMPRECISERR_Msk: u32 = 1024;
pub const SCB_CFSR_PRECISERR_Pos: u32 = 9;
pub const SCB_CFSR_PRECISERR_Msk: u32 = 512;
pub const SCB_CFSR_IBUSERR_Pos: u32 = 8;
pub const SCB_CFSR_IBUSERR_Msk: u32 = 256;
pub const SCB_CFSR_DIVBYZERO_Pos: u32 = 25;
pub const SCB_CFSR_DIVBYZERO_Msk: u32 = 33554432;
pub const SCB_CFSR_UNALIGNED_Pos: u32 = 24;
pub const SCB_CFSR_UNALIGNED_Msk: u32 = 16777216;
pub const SCB_CFSR_NOCP_Pos: u32 = 19;
pub const SCB_CFSR_NOCP_Msk: u32 = 524288;
pub const SCB_CFSR_INVPC_Pos: u32 = 18;
pub const SCB_CFSR_INVPC_Msk: u32 = 262144;
pub const SCB_CFSR_INVSTATE_Pos: u32 = 17;
pub const SCB_CFSR_INVSTATE_Msk: u32 = 131072;
pub const SCB_CFSR_UNDEFINSTR_Pos: u32 = 16;
pub const SCB_CFSR_UNDEFINSTR_Msk: u32 = 65536;
pub const SCB_HFSR_DEBUGEVT_Pos: u32 = 31;
pub const SCB_HFSR_DEBUGEVT_Msk: u32 = 2147483648;
pub const SCB_HFSR_FORCED_Pos: u32 = 30;
pub const SCB_HFSR_FORCED_Msk: u32 = 1073741824;
pub const SCB_HFSR_VECTTBL_Pos: u32 = 1;
pub const SCB_HFSR_VECTTBL_Msk: u32 = 2;
pub const SCB_DFSR_EXTERNAL_Pos: u32 = 4;
pub const SCB_DFSR_EXTERNAL_Msk: u32 = 16;
pub const SCB_DFSR_VCATCH_Pos: u32 = 3;
pub const SCB_DFSR_VCATCH_Msk: u32 = 8;
pub const SCB_DFSR_DWTTRAP_Pos: u32 = 2;
pub const SCB_DFSR_DWTTRAP_Msk: u32 = 4;
pub const SCB_DFSR_BKPT_Pos: u32 = 1;
pub const SCB_DFSR_BKPT_Msk: u32 = 2;
pub const SCB_DFSR_HALTED_Pos: u32 = 0;
pub const SCB_DFSR_HALTED_Msk: u32 = 1;
#[doc = "\\brief  Structure type to access the System Control and ID Register not in the SCB."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCnSCB_Type {
    pub RESERVED0: [u32; 1usize],
    #[doc = "< Offset: 0x004 (R/ )  Interrupt Controller Type Register"]
    pub ICTR: u32,
    #[doc = "< Offset: 0x008 (R/W)  Auxiliary Control Register"]
    pub ACTLR: u32,
}
#[test]
fn bindgen_test_layout_SCnSCB_Type() {
    const UNINIT: ::std::mem::MaybeUninit<SCnSCB_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SCnSCB_Type>(),
        12usize,
        concat!("Size of: ", stringify!(SCnSCB_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<SCnSCB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SCnSCB_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ICTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(ICTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACTLR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SCnSCB_Type),
            "::",
            stringify!(ACTLR)
        )
    );
}
pub const SCnSCB_ICTR_INTLINESNUM_Pos: u32 = 0;
pub const SCnSCB_ICTR_INTLINESNUM_Msk: u32 = 15;
pub const SCnSCB_ACTLR_DISOOFP_Pos: u32 = 9;
pub const SCnSCB_ACTLR_DISOOFP_Msk: u32 = 512;
pub const SCnSCB_ACTLR_DISFPCA_Pos: u32 = 8;
pub const SCnSCB_ACTLR_DISFPCA_Msk: u32 = 256;
pub const SCnSCB_ACTLR_DISFOLD_Pos: u32 = 2;
pub const SCnSCB_ACTLR_DISFOLD_Msk: u32 = 4;
pub const SCnSCB_ACTLR_DISDEFWBUF_Pos: u32 = 1;
pub const SCnSCB_ACTLR_DISDEFWBUF_Msk: u32 = 2;
pub const SCnSCB_ACTLR_DISMCYCINT_Pos: u32 = 0;
pub const SCnSCB_ACTLR_DISMCYCINT_Msk: u32 = 1;
#[doc = "\\brief  Structure type to access the System Timer (SysTick)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SysTick_Type {
    #[doc = "< Offset: 0x000 (R/W)  SysTick Control and Status Register"]
    pub CTRL: u32,
    #[doc = "< Offset: 0x004 (R/W)  SysTick Reload Value Register"]
    pub LOAD: u32,
    #[doc = "< Offset: 0x008 (R/W)  SysTick Current Value Register"]
    pub VAL: u32,
    #[doc = "< Offset: 0x00C (R/ )  SysTick Calibration Register"]
    pub CALIB: u32,
}
#[test]
fn bindgen_test_layout_SysTick_Type() {
    const UNINIT: ::std::mem::MaybeUninit<SysTick_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SysTick_Type>(),
        16usize,
        concat!("Size of: ", stringify!(SysTick_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<SysTick_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SysTick_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTRL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LOAD) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(LOAD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VAL) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(VAL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CALIB) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SysTick_Type),
            "::",
            stringify!(CALIB)
        )
    );
}
pub const SysTick_CTRL_COUNTFLAG_Pos: u32 = 16;
pub const SysTick_CTRL_COUNTFLAG_Msk: u32 = 65536;
pub const SysTick_CTRL_CLKSOURCE_Pos: u32 = 2;
pub const SysTick_CTRL_CLKSOURCE_Msk: u32 = 4;
pub const SysTick_CTRL_TICKINT_Pos: u32 = 1;
pub const SysTick_CTRL_TICKINT_Msk: u32 = 2;
pub const SysTick_CTRL_ENABLE_Pos: u32 = 0;
pub const SysTick_CTRL_ENABLE_Msk: u32 = 1;
pub const SysTick_LOAD_RELOAD_Pos: u32 = 0;
pub const SysTick_LOAD_RELOAD_Msk: u32 = 16777215;
pub const SysTick_VAL_CURRENT_Pos: u32 = 0;
pub const SysTick_VAL_CURRENT_Msk: u32 = 16777215;
pub const SysTick_CALIB_NOREF_Pos: u32 = 31;
pub const SysTick_CALIB_NOREF_Msk: u32 = 2147483648;
pub const SysTick_CALIB_SKEW_Pos: u32 = 30;
pub const SysTick_CALIB_SKEW_Msk: u32 = 1073741824;
pub const SysTick_CALIB_TENMS_Pos: u32 = 0;
pub const SysTick_CALIB_TENMS_Msk: u32 = 16777215;
#[doc = "\\brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM)."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ITM_Type {
    #[doc = "< Offset: 0x000 ( /W)  ITM Stimulus Port Registers"]
    pub PORT: [ITM_Type__bindgen_ty_1; 32usize],
    pub RESERVED0: [u32; 864usize],
    #[doc = "< Offset: 0xE00 (R/W)  ITM Trace Enable Register"]
    pub TER: u32,
    pub RESERVED1: [u32; 15usize],
    #[doc = "< Offset: 0xE40 (R/W)  ITM Trace Privilege Register"]
    pub TPR: u32,
    pub RESERVED2: [u32; 15usize],
    #[doc = "< Offset: 0xE80 (R/W)  ITM Trace Control Register"]
    pub TCR: u32,
    pub RESERVED3: [u32; 29usize],
    #[doc = "< Offset: 0xEF8 ( /W)  ITM Integration Write Register"]
    pub IWR: u32,
    #[doc = "< Offset: 0xEFC (R/ )  ITM Integration Read Register"]
    pub IRR: u32,
    #[doc = "< Offset: 0xF00 (R/W)  ITM Integration Mode Control Register"]
    pub IMCR: u32,
    pub RESERVED4: [u32; 43usize],
    #[doc = "< Offset: 0xFB0 ( /W)  ITM Lock Access Register"]
    pub LAR: u32,
    #[doc = "< Offset: 0xFB4 (R/ )  ITM Lock Status Register"]
    pub LSR: u32,
    pub RESERVED5: [u32; 6usize],
    #[doc = "< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Register #4"]
    pub PID4: u32,
    #[doc = "< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Register #5"]
    pub PID5: u32,
    #[doc = "< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Register #6"]
    pub PID6: u32,
    #[doc = "< Offset: 0xFDC (R/ )  ITM Peripheral Identification Register #7"]
    pub PID7: u32,
    #[doc = "< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Register #0"]
    pub PID0: u32,
    #[doc = "< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Register #1"]
    pub PID1: u32,
    #[doc = "< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Register #2"]
    pub PID2: u32,
    #[doc = "< Offset: 0xFEC (R/ )  ITM Peripheral Identification Register #3"]
    pub PID3: u32,
    #[doc = "< Offset: 0xFF0 (R/ )  ITM Component  Identification Register #0"]
    pub CID0: u32,
    #[doc = "< Offset: 0xFF4 (R/ )  ITM Component  Identification Register #1"]
    pub CID1: u32,
    #[doc = "< Offset: 0xFF8 (R/ )  ITM Component  Identification Register #2"]
    pub CID2: u32,
    #[doc = "< Offset: 0xFFC (R/ )  ITM Component  Identification Register #3"]
    pub CID3: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ITM_Type__bindgen_ty_1 {
    #[doc = "< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit"]
    pub u8_: u8,
    #[doc = "< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit"]
    pub u16_: u16,
    #[doc = "< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit"]
    pub u32_: u32,
}
#[test]
fn bindgen_test_layout_ITM_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ITM_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u8_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u16_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u32_)
        )
    );
}
#[test]
fn bindgen_test_layout_ITM_Type() {
    const UNINIT: ::std::mem::MaybeUninit<ITM_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ITM_Type>(),
        4096usize,
        concat!("Size of: ", stringify!(ITM_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<ITM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(ITM_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PORT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PORT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TER) as usize - ptr as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        3588usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TPR) as usize - ptr as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        3652usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCR) as usize - ptr as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(TCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        3716usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IWR) as usize - ptr as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IWR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IRR) as usize - ptr as usize },
        3836usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IRR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IMCR) as usize - ptr as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(IMCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        3844usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LAR) as usize - ptr as usize },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(LAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LSR) as usize - ptr as usize },
        4020usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(LSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID4) as usize - ptr as usize },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID5) as usize - ptr as usize },
        4052usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID6) as usize - ptr as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID7) as usize - ptr as usize },
        4060usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID0) as usize - ptr as usize },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID1) as usize - ptr as usize },
        4068usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID2) as usize - ptr as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID3) as usize - ptr as usize },
        4076usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(PID3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CID0) as usize - ptr as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CID1) as usize - ptr as usize },
        4084usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CID2) as usize - ptr as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CID3) as usize - ptr as usize },
        4092usize,
        concat!(
            "Offset of field: ",
            stringify!(ITM_Type),
            "::",
            stringify!(CID3)
        )
    );
}
pub const ITM_TPR_PRIVMASK_Pos: u32 = 0;
pub const ITM_TPR_PRIVMASK_Msk: u32 = 15;
pub const ITM_TCR_BUSY_Pos: u32 = 23;
pub const ITM_TCR_BUSY_Msk: u32 = 8388608;
pub const ITM_TCR_TraceBusID_Pos: u32 = 16;
pub const ITM_TCR_TraceBusID_Msk: u32 = 8323072;
pub const ITM_TCR_GTSFREQ_Pos: u32 = 10;
pub const ITM_TCR_GTSFREQ_Msk: u32 = 3072;
pub const ITM_TCR_TSPrescale_Pos: u32 = 8;
pub const ITM_TCR_TSPrescale_Msk: u32 = 768;
pub const ITM_TCR_SWOENA_Pos: u32 = 4;
pub const ITM_TCR_SWOENA_Msk: u32 = 16;
pub const ITM_TCR_DWTENA_Pos: u32 = 3;
pub const ITM_TCR_DWTENA_Msk: u32 = 8;
pub const ITM_TCR_SYNCENA_Pos: u32 = 2;
pub const ITM_TCR_SYNCENA_Msk: u32 = 4;
pub const ITM_TCR_TSENA_Pos: u32 = 1;
pub const ITM_TCR_TSENA_Msk: u32 = 2;
pub const ITM_TCR_ITMENA_Pos: u32 = 0;
pub const ITM_TCR_ITMENA_Msk: u32 = 1;
pub const ITM_IWR_ATVALIDM_Pos: u32 = 0;
pub const ITM_IWR_ATVALIDM_Msk: u32 = 1;
pub const ITM_IRR_ATREADYM_Pos: u32 = 0;
pub const ITM_IRR_ATREADYM_Msk: u32 = 1;
pub const ITM_IMCR_INTEGRATION_Pos: u32 = 0;
pub const ITM_IMCR_INTEGRATION_Msk: u32 = 1;
pub const ITM_LSR_ByteAcc_Pos: u32 = 2;
pub const ITM_LSR_ByteAcc_Msk: u32 = 4;
pub const ITM_LSR_Access_Pos: u32 = 1;
pub const ITM_LSR_Access_Msk: u32 = 2;
pub const ITM_LSR_Present_Pos: u32 = 0;
pub const ITM_LSR_Present_Msk: u32 = 1;
#[doc = "\\brief  Structure type to access the Data Watchpoint and Trace Register (DWT)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DWT_Type {
    #[doc = "< Offset: 0x000 (R/W)  Control Register"]
    pub CTRL: u32,
    #[doc = "< Offset: 0x004 (R/W)  Cycle Count Register"]
    pub CYCCNT: u32,
    #[doc = "< Offset: 0x008 (R/W)  CPI Count Register"]
    pub CPICNT: u32,
    #[doc = "< Offset: 0x00C (R/W)  Exception Overhead Count Register"]
    pub EXCCNT: u32,
    #[doc = "< Offset: 0x010 (R/W)  Sleep Count Register"]
    pub SLEEPCNT: u32,
    #[doc = "< Offset: 0x014 (R/W)  LSU Count Register"]
    pub LSUCNT: u32,
    #[doc = "< Offset: 0x018 (R/W)  Folded-instruction Count Register"]
    pub FOLDCNT: u32,
    #[doc = "< Offset: 0x01C (R/ )  Program Counter Sample Register"]
    pub PCSR: u32,
    #[doc = "< Offset: 0x020 (R/W)  Comparator Register 0"]
    pub COMP0: u32,
    #[doc = "< Offset: 0x024 (R/W)  Mask Register 0"]
    pub MASK0: u32,
    #[doc = "< Offset: 0x028 (R/W)  Function Register 0"]
    pub FUNCTION0: u32,
    pub RESERVED0: [u32; 1usize],
    #[doc = "< Offset: 0x030 (R/W)  Comparator Register 1"]
    pub COMP1: u32,
    #[doc = "< Offset: 0x034 (R/W)  Mask Register 1"]
    pub MASK1: u32,
    #[doc = "< Offset: 0x038 (R/W)  Function Register 1"]
    pub FUNCTION1: u32,
    pub RESERVED1: [u32; 1usize],
    #[doc = "< Offset: 0x040 (R/W)  Comparator Register 2"]
    pub COMP2: u32,
    #[doc = "< Offset: 0x044 (R/W)  Mask Register 2"]
    pub MASK2: u32,
    #[doc = "< Offset: 0x048 (R/W)  Function Register 2"]
    pub FUNCTION2: u32,
    pub RESERVED2: [u32; 1usize],
    #[doc = "< Offset: 0x050 (R/W)  Comparator Register 3"]
    pub COMP3: u32,
    #[doc = "< Offset: 0x054 (R/W)  Mask Register 3"]
    pub MASK3: u32,
    #[doc = "< Offset: 0x058 (R/W)  Function Register 3"]
    pub FUNCTION3: u32,
}
#[test]
fn bindgen_test_layout_DWT_Type() {
    const UNINIT: ::std::mem::MaybeUninit<DWT_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DWT_Type>(),
        92usize,
        concat!("Size of: ", stringify!(DWT_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<DWT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(DWT_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTRL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CYCCNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CYCCNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CPICNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(CPICNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EXCCNT) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(EXCCNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SLEEPCNT) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(SLEEPCNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LSUCNT) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(LSUCNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FOLDCNT) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FOLDCNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PCSR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(PCSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).COMP0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MASK0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FUNCTION0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).COMP1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MASK1) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FUNCTION1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).COMP2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MASK2) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FUNCTION2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).COMP3) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(COMP3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MASK3) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(MASK3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FUNCTION3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DWT_Type),
            "::",
            stringify!(FUNCTION3)
        )
    );
}
pub const DWT_CTRL_NUMCOMP_Pos: u32 = 28;
pub const DWT_CTRL_NUMCOMP_Msk: u32 = 4026531840;
pub const DWT_CTRL_NOTRCPKT_Pos: u32 = 27;
pub const DWT_CTRL_NOTRCPKT_Msk: u32 = 134217728;
pub const DWT_CTRL_NOEXTTRIG_Pos: u32 = 26;
pub const DWT_CTRL_NOEXTTRIG_Msk: u32 = 67108864;
pub const DWT_CTRL_NOCYCCNT_Pos: u32 = 25;
pub const DWT_CTRL_NOCYCCNT_Msk: u32 = 33554432;
pub const DWT_CTRL_NOPRFCNT_Pos: u32 = 24;
pub const DWT_CTRL_NOPRFCNT_Msk: u32 = 16777216;
pub const DWT_CTRL_CYCEVTENA_Pos: u32 = 22;
pub const DWT_CTRL_CYCEVTENA_Msk: u32 = 4194304;
pub const DWT_CTRL_FOLDEVTENA_Pos: u32 = 21;
pub const DWT_CTRL_FOLDEVTENA_Msk: u32 = 2097152;
pub const DWT_CTRL_LSUEVTENA_Pos: u32 = 20;
pub const DWT_CTRL_LSUEVTENA_Msk: u32 = 1048576;
pub const DWT_CTRL_SLEEPEVTENA_Pos: u32 = 19;
pub const DWT_CTRL_SLEEPEVTENA_Msk: u32 = 524288;
pub const DWT_CTRL_EXCEVTENA_Pos: u32 = 18;
pub const DWT_CTRL_EXCEVTENA_Msk: u32 = 262144;
pub const DWT_CTRL_CPIEVTENA_Pos: u32 = 17;
pub const DWT_CTRL_CPIEVTENA_Msk: u32 = 131072;
pub const DWT_CTRL_EXCTRCENA_Pos: u32 = 16;
pub const DWT_CTRL_EXCTRCENA_Msk: u32 = 65536;
pub const DWT_CTRL_PCSAMPLENA_Pos: u32 = 12;
pub const DWT_CTRL_PCSAMPLENA_Msk: u32 = 4096;
pub const DWT_CTRL_SYNCTAP_Pos: u32 = 10;
pub const DWT_CTRL_SYNCTAP_Msk: u32 = 3072;
pub const DWT_CTRL_CYCTAP_Pos: u32 = 9;
pub const DWT_CTRL_CYCTAP_Msk: u32 = 512;
pub const DWT_CTRL_POSTINIT_Pos: u32 = 5;
pub const DWT_CTRL_POSTINIT_Msk: u32 = 480;
pub const DWT_CTRL_POSTPRESET_Pos: u32 = 1;
pub const DWT_CTRL_POSTPRESET_Msk: u32 = 30;
pub const DWT_CTRL_CYCCNTENA_Pos: u32 = 0;
pub const DWT_CTRL_CYCCNTENA_Msk: u32 = 1;
pub const DWT_CPICNT_CPICNT_Pos: u32 = 0;
pub const DWT_CPICNT_CPICNT_Msk: u32 = 255;
pub const DWT_EXCCNT_EXCCNT_Pos: u32 = 0;
pub const DWT_EXCCNT_EXCCNT_Msk: u32 = 255;
pub const DWT_SLEEPCNT_SLEEPCNT_Pos: u32 = 0;
pub const DWT_SLEEPCNT_SLEEPCNT_Msk: u32 = 255;
pub const DWT_LSUCNT_LSUCNT_Pos: u32 = 0;
pub const DWT_LSUCNT_LSUCNT_Msk: u32 = 255;
pub const DWT_FOLDCNT_FOLDCNT_Pos: u32 = 0;
pub const DWT_FOLDCNT_FOLDCNT_Msk: u32 = 255;
pub const DWT_MASK_MASK_Pos: u32 = 0;
pub const DWT_MASK_MASK_Msk: u32 = 31;
pub const DWT_FUNCTION_MATCHED_Pos: u32 = 24;
pub const DWT_FUNCTION_MATCHED_Msk: u32 = 16777216;
pub const DWT_FUNCTION_DATAVADDR1_Pos: u32 = 16;
pub const DWT_FUNCTION_DATAVADDR1_Msk: u32 = 983040;
pub const DWT_FUNCTION_DATAVADDR0_Pos: u32 = 12;
pub const DWT_FUNCTION_DATAVADDR0_Msk: u32 = 61440;
pub const DWT_FUNCTION_DATAVSIZE_Pos: u32 = 10;
pub const DWT_FUNCTION_DATAVSIZE_Msk: u32 = 3072;
pub const DWT_FUNCTION_LNK1ENA_Pos: u32 = 9;
pub const DWT_FUNCTION_LNK1ENA_Msk: u32 = 512;
pub const DWT_FUNCTION_DATAVMATCH_Pos: u32 = 8;
pub const DWT_FUNCTION_DATAVMATCH_Msk: u32 = 256;
pub const DWT_FUNCTION_CYCMATCH_Pos: u32 = 7;
pub const DWT_FUNCTION_CYCMATCH_Msk: u32 = 128;
pub const DWT_FUNCTION_EMITRANGE_Pos: u32 = 5;
pub const DWT_FUNCTION_EMITRANGE_Msk: u32 = 32;
pub const DWT_FUNCTION_FUNCTION_Pos: u32 = 0;
pub const DWT_FUNCTION_FUNCTION_Msk: u32 = 15;
#[doc = "\\brief  Structure type to access the Trace Port Interface Register (TPI)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TPI_Type {
    #[doc = "< Offset: 0x000 (R/ )  Supported Parallel Port Size Register"]
    pub SSPSR: u32,
    #[doc = "< Offset: 0x004 (R/W)  Current Parallel Port Size Register"]
    pub CSPSR: u32,
    pub RESERVED0: [u32; 2usize],
    #[doc = "< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Register"]
    pub ACPR: u32,
    pub RESERVED1: [u32; 55usize],
    #[doc = "< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register"]
    pub SPPR: u32,
    pub RESERVED2: [u32; 131usize],
    #[doc = "< Offset: 0x300 (R/ )  Formatter and Flush Status Register"]
    pub FFSR: u32,
    #[doc = "< Offset: 0x304 (R/W)  Formatter and Flush Control Register"]
    pub FFCR: u32,
    #[doc = "< Offset: 0x308 (R/ )  Formatter Synchronization Counter Register"]
    pub FSCR: u32,
    pub RESERVED3: [u32; 759usize],
    #[doc = "< Offset: 0xEE8 (R/ )  TRIGGER"]
    pub TRIGGER: u32,
    #[doc = "< Offset: 0xEEC (R/ )  Integration ETM Data"]
    pub FIFO0: u32,
    #[doc = "< Offset: 0xEF0 (R/ )  ITATBCTR2"]
    pub ITATBCTR2: u32,
    pub RESERVED4: [u32; 1usize],
    #[doc = "< Offset: 0xEF8 (R/ )  ITATBCTR0"]
    pub ITATBCTR0: u32,
    #[doc = "< Offset: 0xEFC (R/ )  Integration ITM Data"]
    pub FIFO1: u32,
    #[doc = "< Offset: 0xF00 (R/W)  Integration Mode Control"]
    pub ITCTRL: u32,
    pub RESERVED5: [u32; 39usize],
    #[doc = "< Offset: 0xFA0 (R/W)  Claim tag set"]
    pub CLAIMSET: u32,
    #[doc = "< Offset: 0xFA4 (R/W)  Claim tag clear"]
    pub CLAIMCLR: u32,
    pub RESERVED7: [u32; 8usize],
    #[doc = "< Offset: 0xFC8 (R/ )  TPIU_DEVID"]
    pub DEVID: u32,
    #[doc = "< Offset: 0xFCC (R/ )  TPIU_DEVTYPE"]
    pub DEVTYPE: u32,
}
#[test]
fn bindgen_test_layout_TPI_Type() {
    const UNINIT: ::std::mem::MaybeUninit<TPI_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TPI_Type>(),
        4048usize,
        concat!("Size of: ", stringify!(TPI_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<TPI_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(TPI_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SSPSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(SSPSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSPSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CSPSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACPR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ACPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SPPR) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(SPPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FFSR) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FFSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FFCR) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FFCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FSCR) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FSCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TRIGGER) as usize - ptr as usize },
        3816usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(TRIGGER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FIFO0) as usize - ptr as usize },
        3820usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FIFO0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ITATBCTR2) as usize - ptr as usize },
        3824usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITATBCTR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        3828usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ITATBCTR0) as usize - ptr as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITATBCTR0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FIFO1) as usize - ptr as usize },
        3836usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(FIFO1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ITCTRL) as usize - ptr as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(ITCTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        3844usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLAIMSET) as usize - ptr as usize },
        4000usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CLAIMSET)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLAIMCLR) as usize - ptr as usize },
        4004usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(CLAIMCLR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        4008usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DEVID) as usize - ptr as usize },
        4040usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(DEVID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DEVTYPE) as usize - ptr as usize },
        4044usize,
        concat!(
            "Offset of field: ",
            stringify!(TPI_Type),
            "::",
            stringify!(DEVTYPE)
        )
    );
}
pub const TPI_ACPR_PRESCALER_Pos: u32 = 0;
pub const TPI_ACPR_PRESCALER_Msk: u32 = 8191;
pub const TPI_SPPR_TXMODE_Pos: u32 = 0;
pub const TPI_SPPR_TXMODE_Msk: u32 = 3;
pub const TPI_FFSR_FtNonStop_Pos: u32 = 3;
pub const TPI_FFSR_FtNonStop_Msk: u32 = 8;
pub const TPI_FFSR_TCPresent_Pos: u32 = 2;
pub const TPI_FFSR_TCPresent_Msk: u32 = 4;
pub const TPI_FFSR_FtStopped_Pos: u32 = 1;
pub const TPI_FFSR_FtStopped_Msk: u32 = 2;
pub const TPI_FFSR_FlInProg_Pos: u32 = 0;
pub const TPI_FFSR_FlInProg_Msk: u32 = 1;
pub const TPI_FFCR_TrigIn_Pos: u32 = 8;
pub const TPI_FFCR_TrigIn_Msk: u32 = 256;
pub const TPI_FFCR_EnFCont_Pos: u32 = 1;
pub const TPI_FFCR_EnFCont_Msk: u32 = 2;
pub const TPI_TRIGGER_TRIGGER_Pos: u32 = 0;
pub const TPI_TRIGGER_TRIGGER_Msk: u32 = 1;
pub const TPI_FIFO0_ITM_ATVALID_Pos: u32 = 29;
pub const TPI_FIFO0_ITM_ATVALID_Msk: u32 = 1610612736;
pub const TPI_FIFO0_ITM_bytecount_Pos: u32 = 27;
pub const TPI_FIFO0_ITM_bytecount_Msk: u32 = 402653184;
pub const TPI_FIFO0_ETM_ATVALID_Pos: u32 = 26;
pub const TPI_FIFO0_ETM_ATVALID_Msk: u32 = 201326592;
pub const TPI_FIFO0_ETM_bytecount_Pos: u32 = 24;
pub const TPI_FIFO0_ETM_bytecount_Msk: u32 = 50331648;
pub const TPI_FIFO0_ETM2_Pos: u32 = 16;
pub const TPI_FIFO0_ETM2_Msk: u32 = 16711680;
pub const TPI_FIFO0_ETM1_Pos: u32 = 8;
pub const TPI_FIFO0_ETM1_Msk: u32 = 65280;
pub const TPI_FIFO0_ETM0_Pos: u32 = 0;
pub const TPI_FIFO0_ETM0_Msk: u32 = 255;
pub const TPI_ITATBCTR2_ATREADY_Pos: u32 = 0;
pub const TPI_ITATBCTR2_ATREADY_Msk: u32 = 1;
pub const TPI_FIFO1_ITM_ATVALID_Pos: u32 = 29;
pub const TPI_FIFO1_ITM_ATVALID_Msk: u32 = 1610612736;
pub const TPI_FIFO1_ITM_bytecount_Pos: u32 = 27;
pub const TPI_FIFO1_ITM_bytecount_Msk: u32 = 402653184;
pub const TPI_FIFO1_ETM_ATVALID_Pos: u32 = 26;
pub const TPI_FIFO1_ETM_ATVALID_Msk: u32 = 201326592;
pub const TPI_FIFO1_ETM_bytecount_Pos: u32 = 24;
pub const TPI_FIFO1_ETM_bytecount_Msk: u32 = 50331648;
pub const TPI_FIFO1_ITM2_Pos: u32 = 16;
pub const TPI_FIFO1_ITM2_Msk: u32 = 16711680;
pub const TPI_FIFO1_ITM1_Pos: u32 = 8;
pub const TPI_FIFO1_ITM1_Msk: u32 = 65280;
pub const TPI_FIFO1_ITM0_Pos: u32 = 0;
pub const TPI_FIFO1_ITM0_Msk: u32 = 255;
pub const TPI_ITATBCTR0_ATREADY_Pos: u32 = 0;
pub const TPI_ITATBCTR0_ATREADY_Msk: u32 = 1;
pub const TPI_ITCTRL_Mode_Pos: u32 = 0;
pub const TPI_ITCTRL_Mode_Msk: u32 = 1;
pub const TPI_DEVID_NRZVALID_Pos: u32 = 11;
pub const TPI_DEVID_NRZVALID_Msk: u32 = 2048;
pub const TPI_DEVID_MANCVALID_Pos: u32 = 10;
pub const TPI_DEVID_MANCVALID_Msk: u32 = 1024;
pub const TPI_DEVID_PTINVALID_Pos: u32 = 9;
pub const TPI_DEVID_PTINVALID_Msk: u32 = 512;
pub const TPI_DEVID_MinBufSz_Pos: u32 = 6;
pub const TPI_DEVID_MinBufSz_Msk: u32 = 448;
pub const TPI_DEVID_AsynClkIn_Pos: u32 = 5;
pub const TPI_DEVID_AsynClkIn_Msk: u32 = 32;
pub const TPI_DEVID_NrTraceInput_Pos: u32 = 0;
pub const TPI_DEVID_NrTraceInput_Msk: u32 = 31;
pub const TPI_DEVTYPE_MajorType_Pos: u32 = 4;
pub const TPI_DEVTYPE_MajorType_Msk: u32 = 240;
pub const TPI_DEVTYPE_SubType_Pos: u32 = 0;
pub const TPI_DEVTYPE_SubType_Msk: u32 = 15;
#[doc = "\\brief  Structure type to access the Floating Point Unit (FPU)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FPU_Type {
    pub RESERVED0: [u32; 1usize],
    #[doc = "< Offset: 0x004 (R/W)  Floating-Point Context Control Register"]
    pub FPCCR: u32,
    #[doc = "< Offset: 0x008 (R/W)  Floating-Point Context Address Register"]
    pub FPCAR: u32,
    #[doc = "< Offset: 0x00C (R/W)  Floating-Point Default Status Control Register"]
    pub FPDSCR: u32,
    #[doc = "< Offset: 0x010 (R/ )  Media and FP Feature Register 0"]
    pub MVFR0: u32,
    #[doc = "< Offset: 0x014 (R/ )  Media and FP Feature Register 1"]
    pub MVFR1: u32,
}
#[test]
fn bindgen_test_layout_FPU_Type() {
    const UNINIT: ::std::mem::MaybeUninit<FPU_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FPU_Type>(),
        24usize,
        concat!("Size of: ", stringify!(FPU_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<FPU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(FPU_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPCCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPCCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPCAR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPCAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPDSCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(FPDSCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MVFR0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(MVFR0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MVFR1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FPU_Type),
            "::",
            stringify!(MVFR1)
        )
    );
}
pub const FPU_FPCCR_ASPEN_Pos: u32 = 31;
pub const FPU_FPCCR_ASPEN_Msk: u32 = 2147483648;
pub const FPU_FPCCR_LSPEN_Pos: u32 = 30;
pub const FPU_FPCCR_LSPEN_Msk: u32 = 1073741824;
pub const FPU_FPCCR_MONRDY_Pos: u32 = 8;
pub const FPU_FPCCR_MONRDY_Msk: u32 = 256;
pub const FPU_FPCCR_BFRDY_Pos: u32 = 6;
pub const FPU_FPCCR_BFRDY_Msk: u32 = 64;
pub const FPU_FPCCR_MMRDY_Pos: u32 = 5;
pub const FPU_FPCCR_MMRDY_Msk: u32 = 32;
pub const FPU_FPCCR_HFRDY_Pos: u32 = 4;
pub const FPU_FPCCR_HFRDY_Msk: u32 = 16;
pub const FPU_FPCCR_THREAD_Pos: u32 = 3;
pub const FPU_FPCCR_THREAD_Msk: u32 = 8;
pub const FPU_FPCCR_USER_Pos: u32 = 1;
pub const FPU_FPCCR_USER_Msk: u32 = 2;
pub const FPU_FPCCR_LSPACT_Pos: u32 = 0;
pub const FPU_FPCCR_LSPACT_Msk: u32 = 1;
pub const FPU_FPCAR_ADDRESS_Pos: u32 = 3;
pub const FPU_FPCAR_ADDRESS_Msk: u32 = 4294967288;
pub const FPU_FPDSCR_AHP_Pos: u32 = 26;
pub const FPU_FPDSCR_AHP_Msk: u32 = 67108864;
pub const FPU_FPDSCR_DN_Pos: u32 = 25;
pub const FPU_FPDSCR_DN_Msk: u32 = 33554432;
pub const FPU_FPDSCR_FZ_Pos: u32 = 24;
pub const FPU_FPDSCR_FZ_Msk: u32 = 16777216;
pub const FPU_FPDSCR_RMode_Pos: u32 = 22;
pub const FPU_FPDSCR_RMode_Msk: u32 = 12582912;
pub const FPU_MVFR0_FP_rounding_modes_Pos: u32 = 28;
pub const FPU_MVFR0_FP_rounding_modes_Msk: u32 = 4026531840;
pub const FPU_MVFR0_Short_vectors_Pos: u32 = 24;
pub const FPU_MVFR0_Short_vectors_Msk: u32 = 251658240;
pub const FPU_MVFR0_Square_root_Pos: u32 = 20;
pub const FPU_MVFR0_Square_root_Msk: u32 = 15728640;
pub const FPU_MVFR0_Divide_Pos: u32 = 16;
pub const FPU_MVFR0_Divide_Msk: u32 = 983040;
pub const FPU_MVFR0_FP_excep_trapping_Pos: u32 = 12;
pub const FPU_MVFR0_FP_excep_trapping_Msk: u32 = 61440;
pub const FPU_MVFR0_Double_precision_Pos: u32 = 8;
pub const FPU_MVFR0_Double_precision_Msk: u32 = 3840;
pub const FPU_MVFR0_Single_precision_Pos: u32 = 4;
pub const FPU_MVFR0_Single_precision_Msk: u32 = 240;
pub const FPU_MVFR0_A_SIMD_registers_Pos: u32 = 0;
pub const FPU_MVFR0_A_SIMD_registers_Msk: u32 = 15;
pub const FPU_MVFR1_FP_fused_MAC_Pos: u32 = 28;
pub const FPU_MVFR1_FP_fused_MAC_Msk: u32 = 4026531840;
pub const FPU_MVFR1_FP_HPFP_Pos: u32 = 24;
pub const FPU_MVFR1_FP_HPFP_Msk: u32 = 251658240;
pub const FPU_MVFR1_D_NaN_mode_Pos: u32 = 4;
pub const FPU_MVFR1_D_NaN_mode_Msk: u32 = 240;
pub const FPU_MVFR1_FtZ_mode_Pos: u32 = 0;
pub const FPU_MVFR1_FtZ_mode_Msk: u32 = 15;
#[doc = "\\brief  Structure type to access the Core Debug Register (CoreDebug)."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoreDebug_Type {
    #[doc = "< Offset: 0x000 (R/W)  Debug Halting Control and Status Register"]
    pub DHCSR: u32,
    #[doc = "< Offset: 0x004 ( /W)  Debug Core Register Selector Register"]
    pub DCRSR: u32,
    #[doc = "< Offset: 0x008 (R/W)  Debug Core Register Data Register"]
    pub DCRDR: u32,
    #[doc = "< Offset: 0x00C (R/W)  Debug Exception and Monitor Control Register"]
    pub DEMCR: u32,
}
#[test]
fn bindgen_test_layout_CoreDebug_Type() {
    const UNINIT: ::std::mem::MaybeUninit<CoreDebug_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CoreDebug_Type>(),
        16usize,
        concat!("Size of: ", stringify!(CoreDebug_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<CoreDebug_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CoreDebug_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DHCSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DHCSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCRSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DCRSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCRDR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DCRDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DEMCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CoreDebug_Type),
            "::",
            stringify!(DEMCR)
        )
    );
}
pub const CoreDebug_DHCSR_DBGKEY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_DBGKEY_Msk: u32 = 4294901760;
pub const CoreDebug_DHCSR_S_RESET_ST_Pos: u32 = 25;
pub const CoreDebug_DHCSR_S_RESET_ST_Msk: u32 = 33554432;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Pos: u32 = 24;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Msk: u32 = 16777216;
pub const CoreDebug_DHCSR_S_LOCKUP_Pos: u32 = 19;
pub const CoreDebug_DHCSR_S_LOCKUP_Msk: u32 = 524288;
pub const CoreDebug_DHCSR_S_SLEEP_Pos: u32 = 18;
pub const CoreDebug_DHCSR_S_SLEEP_Msk: u32 = 262144;
pub const CoreDebug_DHCSR_S_HALT_Pos: u32 = 17;
pub const CoreDebug_DHCSR_S_HALT_Msk: u32 = 131072;
pub const CoreDebug_DHCSR_S_REGRDY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_S_REGRDY_Msk: u32 = 65536;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Pos: u32 = 5;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Msk: u32 = 32;
pub const CoreDebug_DHCSR_C_MASKINTS_Pos: u32 = 3;
pub const CoreDebug_DHCSR_C_MASKINTS_Msk: u32 = 8;
pub const CoreDebug_DHCSR_C_STEP_Pos: u32 = 2;
pub const CoreDebug_DHCSR_C_STEP_Msk: u32 = 4;
pub const CoreDebug_DHCSR_C_HALT_Pos: u32 = 1;
pub const CoreDebug_DHCSR_C_HALT_Msk: u32 = 2;
pub const CoreDebug_DHCSR_C_DEBUGEN_Pos: u32 = 0;
pub const CoreDebug_DHCSR_C_DEBUGEN_Msk: u32 = 1;
pub const CoreDebug_DCRSR_REGWnR_Pos: u32 = 16;
pub const CoreDebug_DCRSR_REGWnR_Msk: u32 = 65536;
pub const CoreDebug_DCRSR_REGSEL_Pos: u32 = 0;
pub const CoreDebug_DCRSR_REGSEL_Msk: u32 = 31;
pub const CoreDebug_DEMCR_TRCENA_Pos: u32 = 24;
pub const CoreDebug_DEMCR_TRCENA_Msk: u32 = 16777216;
pub const CoreDebug_DEMCR_MON_REQ_Pos: u32 = 19;
pub const CoreDebug_DEMCR_MON_REQ_Msk: u32 = 524288;
pub const CoreDebug_DEMCR_MON_STEP_Pos: u32 = 18;
pub const CoreDebug_DEMCR_MON_STEP_Msk: u32 = 262144;
pub const CoreDebug_DEMCR_MON_PEND_Pos: u32 = 17;
pub const CoreDebug_DEMCR_MON_PEND_Msk: u32 = 131072;
pub const CoreDebug_DEMCR_MON_EN_Pos: u32 = 16;
pub const CoreDebug_DEMCR_MON_EN_Msk: u32 = 65536;
pub const CoreDebug_DEMCR_VC_HARDERR_Pos: u32 = 10;
pub const CoreDebug_DEMCR_VC_HARDERR_Msk: u32 = 1024;
pub const CoreDebug_DEMCR_VC_INTERR_Pos: u32 = 9;
pub const CoreDebug_DEMCR_VC_INTERR_Msk: u32 = 512;
pub const CoreDebug_DEMCR_VC_BUSERR_Pos: u32 = 8;
pub const CoreDebug_DEMCR_VC_BUSERR_Msk: u32 = 256;
pub const CoreDebug_DEMCR_VC_STATERR_Pos: u32 = 7;
pub const CoreDebug_DEMCR_VC_STATERR_Msk: u32 = 128;
pub const CoreDebug_DEMCR_VC_CHKERR_Pos: u32 = 6;
pub const CoreDebug_DEMCR_VC_CHKERR_Msk: u32 = 64;
pub const CoreDebug_DEMCR_VC_NOCPERR_Pos: u32 = 5;
pub const CoreDebug_DEMCR_VC_NOCPERR_Msk: u32 = 32;
pub const CoreDebug_DEMCR_VC_MMERR_Pos: u32 = 4;
pub const CoreDebug_DEMCR_VC_MMERR_Msk: u32 = 16;
pub const CoreDebug_DEMCR_VC_CORERESET_Pos: u32 = 0;
pub const CoreDebug_DEMCR_VC_CORERESET_Msk: u32 = 1;
pub const SCS_BASE: u32 = 3758153728;
pub const ITM_BASE: u32 = 3758096384;
pub const DWT_BASE: u32 = 3758100480;
pub const TPI_BASE: u32 = 3758358528;
pub const CoreDebug_BASE: u32 = 3758157296;
pub const SysTick_BASE: u32 = 3758153744;
pub const NVIC_BASE: u32 = 3758153984;
pub const SCB_BASE: u32 = 3758157056;
pub const FPU_BASE: u32 = 3758157616;
pub const NVIC_USER_IRQ_OFFSET: u32 = 16;
unsafe extern "C" {
    #[doc = "< External variable to receive characters."]
    pub static mut ITM_RxBuffer: i32;
}
pub const DISABLE_WDOG: u32 = 1;
pub const CPU_XTAL_CLK_HZ: u32 = 8000000;
pub const CPU_XTAL32k_CLK_HZ: u32 = 32768;
pub const CPU_INT_SLOW_CLK_HZ: u32 = 32768;
pub const CPU_INT_FAST_CLK_HZ: u32 = 4000000;
pub const SYSTEM_SMC_PMPROT_VALUE: u32 = 42;
pub const DEFAULT_SYSTEM_CLOCK: u32 = 20971520;
unsafe extern "C" {
    #[doc = " @brief System clock frequency (core clock)\n\n The system clock frequency supplied to the SysTick timer and the processor\n core clock. This variable can be used by the user application to setup the\n SysTick timer or configure other parameters. It may also be used by debugger to\n query the frequency of the debug timer or configure the trace clock speed\n SystemCoreClock is initialized with a correct predefined value."]
    pub static mut SystemCoreClock: u32;
}
#[doc = "< DMAMUX TriggerDisabled."]
pub const _dma_request_source_kDmaRequestMux0Disable: _dma_request_source = 256;
#[doc = "< Reserved1"]
pub const _dma_request_source_kDmaRequestMux0Reserved1: _dma_request_source = 257;
#[doc = "< UART0 Receive."]
pub const _dma_request_source_kDmaRequestMux0UART0Rx: _dma_request_source = 258;
#[doc = "< UART0 Transmit."]
pub const _dma_request_source_kDmaRequestMux0UART0Tx: _dma_request_source = 259;
#[doc = "< UART1 Receive."]
pub const _dma_request_source_kDmaRequestMux0UART1Rx: _dma_request_source = 260;
#[doc = "< UART1 Transmit."]
pub const _dma_request_source_kDmaRequestMux0UART1Tx: _dma_request_source = 261;
#[doc = "< UART2 Receive."]
pub const _dma_request_source_kDmaRequestMux0UART2Rx: _dma_request_source = 262;
#[doc = "< UART2 Transmit."]
pub const _dma_request_source_kDmaRequestMux0UART2Tx: _dma_request_source = 263;
#[doc = "< UART3 Receive."]
pub const _dma_request_source_kDmaRequestMux0UART3Rx: _dma_request_source = 264;
#[doc = "< UART3 Transmit."]
pub const _dma_request_source_kDmaRequestMux0UART3Tx: _dma_request_source = 265;
#[doc = "< UART4 Transmit or Receive."]
pub const _dma_request_source_kDmaRequestMux0UART4: _dma_request_source = 266;
#[doc = "< UART5 Transmit or Receive."]
pub const _dma_request_source_kDmaRequestMux0UART5: _dma_request_source = 267;
#[doc = "< I2S0 Receive."]
pub const _dma_request_source_kDmaRequestMux0I2S0Rx: _dma_request_source = 268;
#[doc = "< I2S0 Transmit."]
pub const _dma_request_source_kDmaRequestMux0I2S0Tx: _dma_request_source = 269;
#[doc = "< SPI0 Receive."]
pub const _dma_request_source_kDmaRequestMux0SPI0Rx: _dma_request_source = 270;
#[doc = "< SPI0 Transmit."]
pub const _dma_request_source_kDmaRequestMux0SPI0Tx: _dma_request_source = 271;
#[doc = "< SPI1 Transmit or Receive."]
pub const _dma_request_source_kDmaRequestMux0SPI1: _dma_request_source = 272;
#[doc = "< SPI2 Transmit or Receive."]
pub const _dma_request_source_kDmaRequestMux0SPI2: _dma_request_source = 273;
#[doc = "< I2C0."]
pub const _dma_request_source_kDmaRequestMux0I2C0: _dma_request_source = 274;
#[doc = "< I2C1 and I2C2."]
pub const _dma_request_source_kDmaRequestMux0I2C1I2C2: _dma_request_source = 275;
#[doc = "< I2C1 and I2C2."]
pub const _dma_request_source_kDmaRequestMux0I2C1: _dma_request_source = 275;
#[doc = "< I2C1 and I2C2."]
pub const _dma_request_source_kDmaRequestMux0I2C2: _dma_request_source = 275;
#[doc = "< FTM0 C0V."]
pub const _dma_request_source_kDmaRequestMux0FTM0Channel0: _dma_request_source = 276;
#[doc = "< FTM0 C1V."]
pub const _dma_request_source_kDmaRequestMux0FTM0Channel1: _dma_request_source = 277;
#[doc = "< FTM0 C2V."]
pub const _dma_request_source_kDmaRequestMux0FTM0Channel2: _dma_request_source = 278;
#[doc = "< FTM0 C3V."]
pub const _dma_request_source_kDmaRequestMux0FTM0Channel3: _dma_request_source = 279;
#[doc = "< FTM0 C4V."]
pub const _dma_request_source_kDmaRequestMux0FTM0Channel4: _dma_request_source = 280;
#[doc = "< FTM0 C5V."]
pub const _dma_request_source_kDmaRequestMux0FTM0Channel5: _dma_request_source = 281;
#[doc = "< FTM0 C6V."]
pub const _dma_request_source_kDmaRequestMux0FTM0Channel6: _dma_request_source = 282;
#[doc = "< FTM0 C7V."]
pub const _dma_request_source_kDmaRequestMux0FTM0Channel7: _dma_request_source = 283;
#[doc = "< FTM1 C0V."]
pub const _dma_request_source_kDmaRequestMux0FTM1Channel0: _dma_request_source = 284;
#[doc = "< FTM1 C1V."]
pub const _dma_request_source_kDmaRequestMux0FTM1Channel1: _dma_request_source = 285;
#[doc = "< FTM2 C0V."]
pub const _dma_request_source_kDmaRequestMux0FTM2Channel0: _dma_request_source = 286;
#[doc = "< FTM2 C1V."]
pub const _dma_request_source_kDmaRequestMux0FTM2Channel1: _dma_request_source = 287;
#[doc = "< FTM3 C0V."]
pub const _dma_request_source_kDmaRequestMux0FTM3Channel0: _dma_request_source = 288;
#[doc = "< FTM3 C1V."]
pub const _dma_request_source_kDmaRequestMux0FTM3Channel1: _dma_request_source = 289;
#[doc = "< FTM3 C2V."]
pub const _dma_request_source_kDmaRequestMux0FTM3Channel2: _dma_request_source = 290;
#[doc = "< FTM3 C3V."]
pub const _dma_request_source_kDmaRequestMux0FTM3Channel3: _dma_request_source = 291;
#[doc = "< FTM3 C4V."]
pub const _dma_request_source_kDmaRequestMux0FTM3Channel4: _dma_request_source = 292;
#[doc = "< FTM3 C5V."]
pub const _dma_request_source_kDmaRequestMux0FTM3Channel5: _dma_request_source = 293;
#[doc = "< FTM3 C6V."]
pub const _dma_request_source_kDmaRequestMux0FTM3Channel6: _dma_request_source = 294;
#[doc = "< FTM3 C7V."]
pub const _dma_request_source_kDmaRequestMux0FTM3Channel7: _dma_request_source = 295;
#[doc = "< ADC0."]
pub const _dma_request_source_kDmaRequestMux0ADC0: _dma_request_source = 296;
#[doc = "< ADC1."]
pub const _dma_request_source_kDmaRequestMux0ADC1: _dma_request_source = 297;
#[doc = "< CMP0."]
pub const _dma_request_source_kDmaRequestMux0CMP0: _dma_request_source = 298;
#[doc = "< CMP1."]
pub const _dma_request_source_kDmaRequestMux0CMP1: _dma_request_source = 299;
#[doc = "< CMP2."]
pub const _dma_request_source_kDmaRequestMux0CMP2: _dma_request_source = 300;
#[doc = "< DAC0."]
pub const _dma_request_source_kDmaRequestMux0DAC0: _dma_request_source = 301;
#[doc = "< DAC1."]
pub const _dma_request_source_kDmaRequestMux0DAC1: _dma_request_source = 302;
#[doc = "< CMT."]
pub const _dma_request_source_kDmaRequestMux0CMT: _dma_request_source = 303;
#[doc = "< PDB0."]
pub const _dma_request_source_kDmaRequestMux0PDB: _dma_request_source = 304;
#[doc = "< PTA."]
pub const _dma_request_source_kDmaRequestMux0PortA: _dma_request_source = 305;
#[doc = "< PTB."]
pub const _dma_request_source_kDmaRequestMux0PortB: _dma_request_source = 306;
#[doc = "< PTC."]
pub const _dma_request_source_kDmaRequestMux0PortC: _dma_request_source = 307;
#[doc = "< PTD."]
pub const _dma_request_source_kDmaRequestMux0PortD: _dma_request_source = 308;
#[doc = "< PTE."]
pub const _dma_request_source_kDmaRequestMux0PortE: _dma_request_source = 309;
#[doc = "< DMAMUX Always Enabled slot."]
pub const _dma_request_source_kDmaRequestMux0AlwaysOn54: _dma_request_source = 310;
#[doc = "< DMAMUX Always Enabled slot."]
pub const _dma_request_source_kDmaRequestMux0AlwaysOn55: _dma_request_source = 311;
#[doc = "< DMAMUX Always Enabled slot."]
pub const _dma_request_source_kDmaRequestMux0AlwaysOn56: _dma_request_source = 312;
#[doc = "< DMAMUX Always Enabled slot."]
pub const _dma_request_source_kDmaRequestMux0AlwaysOn57: _dma_request_source = 313;
#[doc = "< DMAMUX Always Enabled slot."]
pub const _dma_request_source_kDmaRequestMux0AlwaysOn58: _dma_request_source = 314;
#[doc = "< DMAMUX Always Enabled slot."]
pub const _dma_request_source_kDmaRequestMux0AlwaysOn59: _dma_request_source = 315;
#[doc = "< DMAMUX Always Enabled slot."]
pub const _dma_request_source_kDmaRequestMux0AlwaysOn60: _dma_request_source = 316;
#[doc = "< DMAMUX Always Enabled slot."]
pub const _dma_request_source_kDmaRequestMux0AlwaysOn61: _dma_request_source = 317;
#[doc = "< DMAMUX Always Enabled slot."]
pub const _dma_request_source_kDmaRequestMux0AlwaysOn62: _dma_request_source = 318;
#[doc = "< DMAMUX Always Enabled slot."]
pub const _dma_request_source_kDmaRequestMux0AlwaysOn63: _dma_request_source = 319;
#[doc = " @brief Structure for the DMA hardware request\n\n Defines the structure for the DMA hardware request collections. The user can configure the\n hardware request into DMAMUX to trigger the DMA transfer accordingly. The index\n of the hardware request varies according  to the to SoC."]
pub type _dma_request_source = ::std::os::raw::c_uint;
#[doc = " @brief Structure for the DMA hardware request\n\n Defines the structure for the DMA hardware request collections. The user can configure the\n hardware request into DMAMUX to trigger the DMA transfer accordingly. The index\n of the hardware request varies according  to the to SoC."]
pub use self::_dma_request_source as dma_request_source_t;
#[doc = " ADC - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ADC_Type {
    #[doc = "< ADC Status and Control Registers 1, array offset: 0x0, array step: 0x4"]
    pub SC1: [u32; 2usize],
    #[doc = "< ADC Configuration Register 1, offset: 0x8"]
    pub CFG1: u32,
    #[doc = "< ADC Configuration Register 2, offset: 0xC"]
    pub CFG2: u32,
    #[doc = "< ADC Data Result Register, array offset: 0x10, array step: 0x4"]
    pub R: [u32; 2usize],
    #[doc = "< Compare Value Registers, offset: 0x18"]
    pub CV1: u32,
    #[doc = "< Compare Value Registers, offset: 0x1C"]
    pub CV2: u32,
    #[doc = "< Status and Control Register 2, offset: 0x20"]
    pub SC2: u32,
    #[doc = "< Status and Control Register 3, offset: 0x24"]
    pub SC3: u32,
    #[doc = "< ADC Offset Correction Register, offset: 0x28"]
    pub OFS: u32,
    #[doc = "< ADC Plus-Side Gain Register, offset: 0x2C"]
    pub PG: u32,
    #[doc = "< ADC Minus-Side Gain Register, offset: 0x30"]
    pub MG: u32,
    #[doc = "< ADC Plus-Side General Calibration Value Register, offset: 0x34"]
    pub CLPD: u32,
    #[doc = "< ADC Plus-Side General Calibration Value Register, offset: 0x38"]
    pub CLPS: u32,
    #[doc = "< ADC Plus-Side General Calibration Value Register, offset: 0x3C"]
    pub CLP4: u32,
    #[doc = "< ADC Plus-Side General Calibration Value Register, offset: 0x40"]
    pub CLP3: u32,
    #[doc = "< ADC Plus-Side General Calibration Value Register, offset: 0x44"]
    pub CLP2: u32,
    #[doc = "< ADC Plus-Side General Calibration Value Register, offset: 0x48"]
    pub CLP1: u32,
    #[doc = "< ADC Plus-Side General Calibration Value Register, offset: 0x4C"]
    pub CLP0: u32,
    pub RESERVED_0: [u8; 4usize],
    #[doc = "< ADC Minus-Side General Calibration Value Register, offset: 0x54"]
    pub CLMD: u32,
    #[doc = "< ADC Minus-Side General Calibration Value Register, offset: 0x58"]
    pub CLMS: u32,
    #[doc = "< ADC Minus-Side General Calibration Value Register, offset: 0x5C"]
    pub CLM4: u32,
    #[doc = "< ADC Minus-Side General Calibration Value Register, offset: 0x60"]
    pub CLM3: u32,
    #[doc = "< ADC Minus-Side General Calibration Value Register, offset: 0x64"]
    pub CLM2: u32,
    #[doc = "< ADC Minus-Side General Calibration Value Register, offset: 0x68"]
    pub CLM1: u32,
    #[doc = "< ADC Minus-Side General Calibration Value Register, offset: 0x6C"]
    pub CLM0: u32,
}
#[test]
fn bindgen_test_layout_ADC_Type() {
    const UNINIT: ::std::mem::MaybeUninit<ADC_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ADC_Type>(),
        112usize,
        concat!("Size of: ", stringify!(ADC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<ADC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(ADC_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SC1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(SC1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CFG1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CFG1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CFG2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CFG2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).R) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(R)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CV1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CV1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CV2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CV2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SC2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(SC2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SC3) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(SC3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OFS) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(OFS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PG) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(PG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MG) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(MG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLPD) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLPD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLPS) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLPS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLP4) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLP4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLP3) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLP3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLP2) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLP2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLP1) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLP1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLP0) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLP0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLMD) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLMS) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLMS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLM4) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLM4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLM3) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLM3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLM2) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLM2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLM1) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLM1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLM0) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ADC_Type),
            "::",
            stringify!(CLM0)
        )
    );
}
pub const ADC_SC1_ADCH_MASK: u32 = 31;
pub const ADC_SC1_ADCH_SHIFT: u32 = 0;
pub const ADC_SC1_DIFF_MASK: u32 = 32;
pub const ADC_SC1_DIFF_SHIFT: u32 = 5;
pub const ADC_SC1_AIEN_MASK: u32 = 64;
pub const ADC_SC1_AIEN_SHIFT: u32 = 6;
pub const ADC_SC1_COCO_MASK: u32 = 128;
pub const ADC_SC1_COCO_SHIFT: u32 = 7;
pub const ADC_SC1_COUNT: u32 = 2;
pub const ADC_CFG1_ADICLK_MASK: u32 = 3;
pub const ADC_CFG1_ADICLK_SHIFT: u32 = 0;
pub const ADC_CFG1_MODE_MASK: u32 = 12;
pub const ADC_CFG1_MODE_SHIFT: u32 = 2;
pub const ADC_CFG1_ADLSMP_MASK: u32 = 16;
pub const ADC_CFG1_ADLSMP_SHIFT: u32 = 4;
pub const ADC_CFG1_ADIV_MASK: u32 = 96;
pub const ADC_CFG1_ADIV_SHIFT: u32 = 5;
pub const ADC_CFG1_ADLPC_MASK: u32 = 128;
pub const ADC_CFG1_ADLPC_SHIFT: u32 = 7;
pub const ADC_CFG2_ADLSTS_MASK: u32 = 3;
pub const ADC_CFG2_ADLSTS_SHIFT: u32 = 0;
pub const ADC_CFG2_ADHSC_MASK: u32 = 4;
pub const ADC_CFG2_ADHSC_SHIFT: u32 = 2;
pub const ADC_CFG2_ADACKEN_MASK: u32 = 8;
pub const ADC_CFG2_ADACKEN_SHIFT: u32 = 3;
pub const ADC_CFG2_MUXSEL_MASK: u32 = 16;
pub const ADC_CFG2_MUXSEL_SHIFT: u32 = 4;
pub const ADC_R_D_MASK: u32 = 65535;
pub const ADC_R_D_SHIFT: u32 = 0;
pub const ADC_R_COUNT: u32 = 2;
pub const ADC_CV1_CV_MASK: u32 = 65535;
pub const ADC_CV1_CV_SHIFT: u32 = 0;
pub const ADC_CV2_CV_MASK: u32 = 65535;
pub const ADC_CV2_CV_SHIFT: u32 = 0;
pub const ADC_SC2_REFSEL_MASK: u32 = 3;
pub const ADC_SC2_REFSEL_SHIFT: u32 = 0;
pub const ADC_SC2_DMAEN_MASK: u32 = 4;
pub const ADC_SC2_DMAEN_SHIFT: u32 = 2;
pub const ADC_SC2_ACREN_MASK: u32 = 8;
pub const ADC_SC2_ACREN_SHIFT: u32 = 3;
pub const ADC_SC2_ACFGT_MASK: u32 = 16;
pub const ADC_SC2_ACFGT_SHIFT: u32 = 4;
pub const ADC_SC2_ACFE_MASK: u32 = 32;
pub const ADC_SC2_ACFE_SHIFT: u32 = 5;
pub const ADC_SC2_ADTRG_MASK: u32 = 64;
pub const ADC_SC2_ADTRG_SHIFT: u32 = 6;
pub const ADC_SC2_ADACT_MASK: u32 = 128;
pub const ADC_SC2_ADACT_SHIFT: u32 = 7;
pub const ADC_SC3_AVGS_MASK: u32 = 3;
pub const ADC_SC3_AVGS_SHIFT: u32 = 0;
pub const ADC_SC3_AVGE_MASK: u32 = 4;
pub const ADC_SC3_AVGE_SHIFT: u32 = 2;
pub const ADC_SC3_ADCO_MASK: u32 = 8;
pub const ADC_SC3_ADCO_SHIFT: u32 = 3;
pub const ADC_SC3_CALF_MASK: u32 = 64;
pub const ADC_SC3_CALF_SHIFT: u32 = 6;
pub const ADC_SC3_CAL_MASK: u32 = 128;
pub const ADC_SC3_CAL_SHIFT: u32 = 7;
pub const ADC_OFS_OFS_MASK: u32 = 65535;
pub const ADC_OFS_OFS_SHIFT: u32 = 0;
pub const ADC_PG_PG_MASK: u32 = 65535;
pub const ADC_PG_PG_SHIFT: u32 = 0;
pub const ADC_MG_MG_MASK: u32 = 65535;
pub const ADC_MG_MG_SHIFT: u32 = 0;
pub const ADC_CLPD_CLPD_MASK: u32 = 63;
pub const ADC_CLPD_CLPD_SHIFT: u32 = 0;
pub const ADC_CLPS_CLPS_MASK: u32 = 63;
pub const ADC_CLPS_CLPS_SHIFT: u32 = 0;
pub const ADC_CLP4_CLP4_MASK: u32 = 1023;
pub const ADC_CLP4_CLP4_SHIFT: u32 = 0;
pub const ADC_CLP3_CLP3_MASK: u32 = 511;
pub const ADC_CLP3_CLP3_SHIFT: u32 = 0;
pub const ADC_CLP2_CLP2_MASK: u32 = 255;
pub const ADC_CLP2_CLP2_SHIFT: u32 = 0;
pub const ADC_CLP1_CLP1_MASK: u32 = 127;
pub const ADC_CLP1_CLP1_SHIFT: u32 = 0;
pub const ADC_CLP0_CLP0_MASK: u32 = 63;
pub const ADC_CLP0_CLP0_SHIFT: u32 = 0;
pub const ADC_CLMD_CLMD_MASK: u32 = 63;
pub const ADC_CLMD_CLMD_SHIFT: u32 = 0;
pub const ADC_CLMS_CLMS_MASK: u32 = 63;
pub const ADC_CLMS_CLMS_SHIFT: u32 = 0;
pub const ADC_CLM4_CLM4_MASK: u32 = 1023;
pub const ADC_CLM4_CLM4_SHIFT: u32 = 0;
pub const ADC_CLM3_CLM3_MASK: u32 = 511;
pub const ADC_CLM3_CLM3_SHIFT: u32 = 0;
pub const ADC_CLM2_CLM2_MASK: u32 = 255;
pub const ADC_CLM2_CLM2_SHIFT: u32 = 0;
pub const ADC_CLM1_CLM1_MASK: u32 = 127;
pub const ADC_CLM1_CLM1_SHIFT: u32 = 0;
pub const ADC_CLM0_CLM0_MASK: u32 = 63;
pub const ADC_CLM0_CLM0_SHIFT: u32 = 0;
pub const ADC0_BASE: u32 = 1073983488;
pub const ADC1_BASE: u32 = 1074507776;
#[doc = " AIPS - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AIPS_Type {
    #[doc = "< Master Privilege Register A, offset: 0x0"]
    pub MPRA: u32,
    pub RESERVED_0: [u8; 28usize],
    #[doc = "< Peripheral Access Control Register, offset: 0x20"]
    pub PACRA: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x24"]
    pub PACRB: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x28"]
    pub PACRC: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x2C"]
    pub PACRD: u32,
    pub RESERVED_1: [u8; 16usize],
    #[doc = "< Peripheral Access Control Register, offset: 0x40"]
    pub PACRE: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x44"]
    pub PACRF: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x48"]
    pub PACRG: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x4C"]
    pub PACRH: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x50"]
    pub PACRI: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x54"]
    pub PACRJ: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x58"]
    pub PACRK: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x5C"]
    pub PACRL: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x60"]
    pub PACRM: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x64"]
    pub PACRN: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x68"]
    pub PACRO: u32,
    #[doc = "< Peripheral Access Control Register, offset: 0x6C"]
    pub PACRP: u32,
}
#[test]
fn bindgen_test_layout_AIPS_Type() {
    const UNINIT: ::std::mem::MaybeUninit<AIPS_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AIPS_Type>(),
        112usize,
        concat!("Size of: ", stringify!(AIPS_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<AIPS_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(AIPS_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MPRA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(MPRA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRA) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRB) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRC) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRD) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRE) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRF) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRG) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRH) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRI) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRJ) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRJ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRK) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRL) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRM) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRN) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRO) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PACRP) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(AIPS_Type),
            "::",
            stringify!(PACRP)
        )
    );
}
pub const AIPS_PACRA_TP7_MASK: u32 = 1;
pub const AIPS_PACRA_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRA_WP7_MASK: u32 = 2;
pub const AIPS_PACRA_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRA_SP7_MASK: u32 = 4;
pub const AIPS_PACRA_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRA_TP6_MASK: u32 = 16;
pub const AIPS_PACRA_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRA_WP6_MASK: u32 = 32;
pub const AIPS_PACRA_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRA_SP6_MASK: u32 = 64;
pub const AIPS_PACRA_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRA_TP5_MASK: u32 = 256;
pub const AIPS_PACRA_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRA_WP5_MASK: u32 = 512;
pub const AIPS_PACRA_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRA_SP5_MASK: u32 = 1024;
pub const AIPS_PACRA_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRA_TP4_MASK: u32 = 4096;
pub const AIPS_PACRA_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRA_WP4_MASK: u32 = 8192;
pub const AIPS_PACRA_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRA_SP4_MASK: u32 = 16384;
pub const AIPS_PACRA_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRA_TP3_MASK: u32 = 65536;
pub const AIPS_PACRA_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRA_WP3_MASK: u32 = 131072;
pub const AIPS_PACRA_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRA_SP3_MASK: u32 = 262144;
pub const AIPS_PACRA_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRA_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRA_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRA_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRA_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRA_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRA_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRA_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRA_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRA_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRA_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRA_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRA_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRA_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRA_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRA_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRA_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRA_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRA_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRB_TP7_MASK: u32 = 1;
pub const AIPS_PACRB_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRB_WP7_MASK: u32 = 2;
pub const AIPS_PACRB_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRB_SP7_MASK: u32 = 4;
pub const AIPS_PACRB_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRB_TP6_MASK: u32 = 16;
pub const AIPS_PACRB_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRB_WP6_MASK: u32 = 32;
pub const AIPS_PACRB_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRB_SP6_MASK: u32 = 64;
pub const AIPS_PACRB_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRB_TP5_MASK: u32 = 256;
pub const AIPS_PACRB_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRB_WP5_MASK: u32 = 512;
pub const AIPS_PACRB_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRB_SP5_MASK: u32 = 1024;
pub const AIPS_PACRB_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRB_TP4_MASK: u32 = 4096;
pub const AIPS_PACRB_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRB_WP4_MASK: u32 = 8192;
pub const AIPS_PACRB_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRB_SP4_MASK: u32 = 16384;
pub const AIPS_PACRB_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRB_TP3_MASK: u32 = 65536;
pub const AIPS_PACRB_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRB_WP3_MASK: u32 = 131072;
pub const AIPS_PACRB_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRB_SP3_MASK: u32 = 262144;
pub const AIPS_PACRB_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRB_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRB_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRB_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRB_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRB_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRB_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRB_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRB_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRB_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRB_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRB_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRB_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRB_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRB_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRB_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRB_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRB_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRB_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRC_TP7_MASK: u32 = 1;
pub const AIPS_PACRC_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRC_WP7_MASK: u32 = 2;
pub const AIPS_PACRC_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRC_SP7_MASK: u32 = 4;
pub const AIPS_PACRC_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRC_TP6_MASK: u32 = 16;
pub const AIPS_PACRC_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRC_WP6_MASK: u32 = 32;
pub const AIPS_PACRC_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRC_SP6_MASK: u32 = 64;
pub const AIPS_PACRC_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRC_TP5_MASK: u32 = 256;
pub const AIPS_PACRC_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRC_WP5_MASK: u32 = 512;
pub const AIPS_PACRC_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRC_SP5_MASK: u32 = 1024;
pub const AIPS_PACRC_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRC_TP4_MASK: u32 = 4096;
pub const AIPS_PACRC_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRC_WP4_MASK: u32 = 8192;
pub const AIPS_PACRC_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRC_SP4_MASK: u32 = 16384;
pub const AIPS_PACRC_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRC_TP3_MASK: u32 = 65536;
pub const AIPS_PACRC_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRC_WP3_MASK: u32 = 131072;
pub const AIPS_PACRC_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRC_SP3_MASK: u32 = 262144;
pub const AIPS_PACRC_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRC_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRC_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRC_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRC_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRC_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRC_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRC_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRC_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRC_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRC_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRC_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRC_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRC_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRC_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRC_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRC_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRC_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRC_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRD_TP7_MASK: u32 = 1;
pub const AIPS_PACRD_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRD_WP7_MASK: u32 = 2;
pub const AIPS_PACRD_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRD_SP7_MASK: u32 = 4;
pub const AIPS_PACRD_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRD_TP6_MASK: u32 = 16;
pub const AIPS_PACRD_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRD_WP6_MASK: u32 = 32;
pub const AIPS_PACRD_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRD_SP6_MASK: u32 = 64;
pub const AIPS_PACRD_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRD_TP5_MASK: u32 = 256;
pub const AIPS_PACRD_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRD_WP5_MASK: u32 = 512;
pub const AIPS_PACRD_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRD_SP5_MASK: u32 = 1024;
pub const AIPS_PACRD_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRD_TP4_MASK: u32 = 4096;
pub const AIPS_PACRD_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRD_WP4_MASK: u32 = 8192;
pub const AIPS_PACRD_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRD_SP4_MASK: u32 = 16384;
pub const AIPS_PACRD_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRD_TP3_MASK: u32 = 65536;
pub const AIPS_PACRD_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRD_WP3_MASK: u32 = 131072;
pub const AIPS_PACRD_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRD_SP3_MASK: u32 = 262144;
pub const AIPS_PACRD_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRD_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRD_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRD_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRD_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRD_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRD_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRD_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRD_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRD_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRD_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRD_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRD_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRD_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRD_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRD_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRD_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRD_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRD_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRE_TP7_MASK: u32 = 1;
pub const AIPS_PACRE_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRE_WP7_MASK: u32 = 2;
pub const AIPS_PACRE_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRE_SP7_MASK: u32 = 4;
pub const AIPS_PACRE_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRE_TP6_MASK: u32 = 16;
pub const AIPS_PACRE_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRE_WP6_MASK: u32 = 32;
pub const AIPS_PACRE_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRE_SP6_MASK: u32 = 64;
pub const AIPS_PACRE_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRE_TP5_MASK: u32 = 256;
pub const AIPS_PACRE_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRE_WP5_MASK: u32 = 512;
pub const AIPS_PACRE_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRE_SP5_MASK: u32 = 1024;
pub const AIPS_PACRE_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRE_TP4_MASK: u32 = 4096;
pub const AIPS_PACRE_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRE_WP4_MASK: u32 = 8192;
pub const AIPS_PACRE_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRE_SP4_MASK: u32 = 16384;
pub const AIPS_PACRE_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRE_TP3_MASK: u32 = 65536;
pub const AIPS_PACRE_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRE_WP3_MASK: u32 = 131072;
pub const AIPS_PACRE_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRE_SP3_MASK: u32 = 262144;
pub const AIPS_PACRE_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRE_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRE_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRE_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRE_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRE_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRE_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRE_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRE_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRE_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRE_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRE_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRE_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRE_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRE_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRE_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRE_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRE_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRE_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRF_TP7_MASK: u32 = 1;
pub const AIPS_PACRF_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRF_WP7_MASK: u32 = 2;
pub const AIPS_PACRF_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRF_SP7_MASK: u32 = 4;
pub const AIPS_PACRF_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRF_TP6_MASK: u32 = 16;
pub const AIPS_PACRF_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRF_WP6_MASK: u32 = 32;
pub const AIPS_PACRF_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRF_SP6_MASK: u32 = 64;
pub const AIPS_PACRF_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRF_TP5_MASK: u32 = 256;
pub const AIPS_PACRF_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRF_WP5_MASK: u32 = 512;
pub const AIPS_PACRF_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRF_SP5_MASK: u32 = 1024;
pub const AIPS_PACRF_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRF_TP4_MASK: u32 = 4096;
pub const AIPS_PACRF_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRF_WP4_MASK: u32 = 8192;
pub const AIPS_PACRF_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRF_SP4_MASK: u32 = 16384;
pub const AIPS_PACRF_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRF_TP3_MASK: u32 = 65536;
pub const AIPS_PACRF_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRF_WP3_MASK: u32 = 131072;
pub const AIPS_PACRF_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRF_SP3_MASK: u32 = 262144;
pub const AIPS_PACRF_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRF_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRF_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRF_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRF_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRF_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRF_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRF_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRF_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRF_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRF_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRF_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRF_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRF_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRF_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRF_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRF_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRF_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRF_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRG_TP7_MASK: u32 = 1;
pub const AIPS_PACRG_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRG_WP7_MASK: u32 = 2;
pub const AIPS_PACRG_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRG_SP7_MASK: u32 = 4;
pub const AIPS_PACRG_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRG_TP6_MASK: u32 = 16;
pub const AIPS_PACRG_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRG_WP6_MASK: u32 = 32;
pub const AIPS_PACRG_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRG_SP6_MASK: u32 = 64;
pub const AIPS_PACRG_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRG_TP5_MASK: u32 = 256;
pub const AIPS_PACRG_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRG_WP5_MASK: u32 = 512;
pub const AIPS_PACRG_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRG_SP5_MASK: u32 = 1024;
pub const AIPS_PACRG_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRG_TP4_MASK: u32 = 4096;
pub const AIPS_PACRG_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRG_WP4_MASK: u32 = 8192;
pub const AIPS_PACRG_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRG_SP4_MASK: u32 = 16384;
pub const AIPS_PACRG_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRG_TP3_MASK: u32 = 65536;
pub const AIPS_PACRG_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRG_WP3_MASK: u32 = 131072;
pub const AIPS_PACRG_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRG_SP3_MASK: u32 = 262144;
pub const AIPS_PACRG_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRG_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRG_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRG_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRG_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRG_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRG_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRG_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRG_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRG_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRG_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRG_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRG_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRG_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRG_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRG_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRG_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRG_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRG_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRH_TP7_MASK: u32 = 1;
pub const AIPS_PACRH_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRH_WP7_MASK: u32 = 2;
pub const AIPS_PACRH_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRH_SP7_MASK: u32 = 4;
pub const AIPS_PACRH_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRH_TP6_MASK: u32 = 16;
pub const AIPS_PACRH_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRH_WP6_MASK: u32 = 32;
pub const AIPS_PACRH_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRH_SP6_MASK: u32 = 64;
pub const AIPS_PACRH_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRH_TP5_MASK: u32 = 256;
pub const AIPS_PACRH_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRH_WP5_MASK: u32 = 512;
pub const AIPS_PACRH_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRH_SP5_MASK: u32 = 1024;
pub const AIPS_PACRH_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRH_TP4_MASK: u32 = 4096;
pub const AIPS_PACRH_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRH_WP4_MASK: u32 = 8192;
pub const AIPS_PACRH_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRH_SP4_MASK: u32 = 16384;
pub const AIPS_PACRH_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRH_TP3_MASK: u32 = 65536;
pub const AIPS_PACRH_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRH_WP3_MASK: u32 = 131072;
pub const AIPS_PACRH_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRH_SP3_MASK: u32 = 262144;
pub const AIPS_PACRH_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRH_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRH_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRH_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRH_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRH_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRH_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRH_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRH_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRH_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRH_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRH_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRH_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRH_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRH_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRH_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRH_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRH_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRH_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRI_TP7_MASK: u32 = 1;
pub const AIPS_PACRI_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRI_WP7_MASK: u32 = 2;
pub const AIPS_PACRI_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRI_SP7_MASK: u32 = 4;
pub const AIPS_PACRI_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRI_TP6_MASK: u32 = 16;
pub const AIPS_PACRI_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRI_WP6_MASK: u32 = 32;
pub const AIPS_PACRI_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRI_SP6_MASK: u32 = 64;
pub const AIPS_PACRI_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRI_TP5_MASK: u32 = 256;
pub const AIPS_PACRI_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRI_WP5_MASK: u32 = 512;
pub const AIPS_PACRI_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRI_SP5_MASK: u32 = 1024;
pub const AIPS_PACRI_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRI_TP4_MASK: u32 = 4096;
pub const AIPS_PACRI_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRI_WP4_MASK: u32 = 8192;
pub const AIPS_PACRI_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRI_SP4_MASK: u32 = 16384;
pub const AIPS_PACRI_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRI_TP3_MASK: u32 = 65536;
pub const AIPS_PACRI_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRI_WP3_MASK: u32 = 131072;
pub const AIPS_PACRI_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRI_SP3_MASK: u32 = 262144;
pub const AIPS_PACRI_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRI_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRI_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRI_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRI_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRI_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRI_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRI_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRI_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRI_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRI_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRI_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRI_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRI_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRI_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRI_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRI_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRI_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRI_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRJ_TP7_MASK: u32 = 1;
pub const AIPS_PACRJ_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRJ_WP7_MASK: u32 = 2;
pub const AIPS_PACRJ_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRJ_SP7_MASK: u32 = 4;
pub const AIPS_PACRJ_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRJ_TP6_MASK: u32 = 16;
pub const AIPS_PACRJ_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRJ_WP6_MASK: u32 = 32;
pub const AIPS_PACRJ_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRJ_SP6_MASK: u32 = 64;
pub const AIPS_PACRJ_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRJ_TP5_MASK: u32 = 256;
pub const AIPS_PACRJ_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRJ_WP5_MASK: u32 = 512;
pub const AIPS_PACRJ_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRJ_SP5_MASK: u32 = 1024;
pub const AIPS_PACRJ_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRJ_TP4_MASK: u32 = 4096;
pub const AIPS_PACRJ_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRJ_WP4_MASK: u32 = 8192;
pub const AIPS_PACRJ_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRJ_SP4_MASK: u32 = 16384;
pub const AIPS_PACRJ_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRJ_TP3_MASK: u32 = 65536;
pub const AIPS_PACRJ_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRJ_WP3_MASK: u32 = 131072;
pub const AIPS_PACRJ_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRJ_SP3_MASK: u32 = 262144;
pub const AIPS_PACRJ_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRJ_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRJ_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRJ_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRJ_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRJ_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRJ_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRJ_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRJ_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRJ_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRJ_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRJ_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRJ_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRJ_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRJ_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRJ_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRJ_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRJ_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRJ_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRK_TP7_MASK: u32 = 1;
pub const AIPS_PACRK_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRK_WP7_MASK: u32 = 2;
pub const AIPS_PACRK_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRK_SP7_MASK: u32 = 4;
pub const AIPS_PACRK_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRK_TP6_MASK: u32 = 16;
pub const AIPS_PACRK_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRK_WP6_MASK: u32 = 32;
pub const AIPS_PACRK_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRK_SP6_MASK: u32 = 64;
pub const AIPS_PACRK_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRK_TP5_MASK: u32 = 256;
pub const AIPS_PACRK_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRK_WP5_MASK: u32 = 512;
pub const AIPS_PACRK_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRK_SP5_MASK: u32 = 1024;
pub const AIPS_PACRK_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRK_TP4_MASK: u32 = 4096;
pub const AIPS_PACRK_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRK_WP4_MASK: u32 = 8192;
pub const AIPS_PACRK_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRK_SP4_MASK: u32 = 16384;
pub const AIPS_PACRK_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRK_TP3_MASK: u32 = 65536;
pub const AIPS_PACRK_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRK_WP3_MASK: u32 = 131072;
pub const AIPS_PACRK_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRK_SP3_MASK: u32 = 262144;
pub const AIPS_PACRK_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRK_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRK_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRK_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRK_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRK_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRK_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRK_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRK_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRK_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRK_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRK_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRK_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRK_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRK_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRK_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRK_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRK_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRK_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRL_TP7_MASK: u32 = 1;
pub const AIPS_PACRL_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRL_WP7_MASK: u32 = 2;
pub const AIPS_PACRL_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRL_SP7_MASK: u32 = 4;
pub const AIPS_PACRL_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRL_TP6_MASK: u32 = 16;
pub const AIPS_PACRL_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRL_WP6_MASK: u32 = 32;
pub const AIPS_PACRL_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRL_SP6_MASK: u32 = 64;
pub const AIPS_PACRL_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRL_TP5_MASK: u32 = 256;
pub const AIPS_PACRL_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRL_WP5_MASK: u32 = 512;
pub const AIPS_PACRL_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRL_SP5_MASK: u32 = 1024;
pub const AIPS_PACRL_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRL_TP4_MASK: u32 = 4096;
pub const AIPS_PACRL_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRL_WP4_MASK: u32 = 8192;
pub const AIPS_PACRL_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRL_SP4_MASK: u32 = 16384;
pub const AIPS_PACRL_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRL_TP3_MASK: u32 = 65536;
pub const AIPS_PACRL_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRL_WP3_MASK: u32 = 131072;
pub const AIPS_PACRL_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRL_SP3_MASK: u32 = 262144;
pub const AIPS_PACRL_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRL_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRL_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRL_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRL_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRL_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRL_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRL_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRL_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRL_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRL_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRL_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRL_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRL_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRL_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRL_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRL_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRL_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRL_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRM_TP7_MASK: u32 = 1;
pub const AIPS_PACRM_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRM_WP7_MASK: u32 = 2;
pub const AIPS_PACRM_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRM_SP7_MASK: u32 = 4;
pub const AIPS_PACRM_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRM_TP6_MASK: u32 = 16;
pub const AIPS_PACRM_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRM_WP6_MASK: u32 = 32;
pub const AIPS_PACRM_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRM_SP6_MASK: u32 = 64;
pub const AIPS_PACRM_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRM_TP5_MASK: u32 = 256;
pub const AIPS_PACRM_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRM_WP5_MASK: u32 = 512;
pub const AIPS_PACRM_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRM_SP5_MASK: u32 = 1024;
pub const AIPS_PACRM_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRM_TP4_MASK: u32 = 4096;
pub const AIPS_PACRM_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRM_WP4_MASK: u32 = 8192;
pub const AIPS_PACRM_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRM_SP4_MASK: u32 = 16384;
pub const AIPS_PACRM_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRM_TP3_MASK: u32 = 65536;
pub const AIPS_PACRM_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRM_WP3_MASK: u32 = 131072;
pub const AIPS_PACRM_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRM_SP3_MASK: u32 = 262144;
pub const AIPS_PACRM_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRM_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRM_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRM_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRM_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRM_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRM_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRM_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRM_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRM_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRM_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRM_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRM_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRM_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRM_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRM_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRM_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRM_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRM_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRN_TP7_MASK: u32 = 1;
pub const AIPS_PACRN_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRN_WP7_MASK: u32 = 2;
pub const AIPS_PACRN_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRN_SP7_MASK: u32 = 4;
pub const AIPS_PACRN_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRN_TP6_MASK: u32 = 16;
pub const AIPS_PACRN_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRN_WP6_MASK: u32 = 32;
pub const AIPS_PACRN_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRN_SP6_MASK: u32 = 64;
pub const AIPS_PACRN_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRN_TP5_MASK: u32 = 256;
pub const AIPS_PACRN_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRN_WP5_MASK: u32 = 512;
pub const AIPS_PACRN_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRN_SP5_MASK: u32 = 1024;
pub const AIPS_PACRN_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRN_TP4_MASK: u32 = 4096;
pub const AIPS_PACRN_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRN_WP4_MASK: u32 = 8192;
pub const AIPS_PACRN_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRN_SP4_MASK: u32 = 16384;
pub const AIPS_PACRN_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRN_TP3_MASK: u32 = 65536;
pub const AIPS_PACRN_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRN_WP3_MASK: u32 = 131072;
pub const AIPS_PACRN_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRN_SP3_MASK: u32 = 262144;
pub const AIPS_PACRN_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRN_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRN_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRN_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRN_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRN_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRN_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRN_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRN_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRN_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRN_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRN_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRN_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRN_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRN_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRN_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRN_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRN_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRN_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRO_TP7_MASK: u32 = 1;
pub const AIPS_PACRO_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRO_WP7_MASK: u32 = 2;
pub const AIPS_PACRO_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRO_SP7_MASK: u32 = 4;
pub const AIPS_PACRO_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRO_TP6_MASK: u32 = 16;
pub const AIPS_PACRO_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRO_WP6_MASK: u32 = 32;
pub const AIPS_PACRO_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRO_SP6_MASK: u32 = 64;
pub const AIPS_PACRO_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRO_TP5_MASK: u32 = 256;
pub const AIPS_PACRO_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRO_WP5_MASK: u32 = 512;
pub const AIPS_PACRO_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRO_SP5_MASK: u32 = 1024;
pub const AIPS_PACRO_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRO_TP4_MASK: u32 = 4096;
pub const AIPS_PACRO_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRO_WP4_MASK: u32 = 8192;
pub const AIPS_PACRO_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRO_SP4_MASK: u32 = 16384;
pub const AIPS_PACRO_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRO_TP3_MASK: u32 = 65536;
pub const AIPS_PACRO_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRO_WP3_MASK: u32 = 131072;
pub const AIPS_PACRO_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRO_SP3_MASK: u32 = 262144;
pub const AIPS_PACRO_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRO_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRO_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRO_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRO_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRO_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRO_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRO_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRO_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRO_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRO_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRO_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRO_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRO_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRO_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRO_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRO_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRO_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRO_SP0_SHIFT: u32 = 30;
pub const AIPS_PACRP_TP7_MASK: u32 = 1;
pub const AIPS_PACRP_TP7_SHIFT: u32 = 0;
pub const AIPS_PACRP_WP7_MASK: u32 = 2;
pub const AIPS_PACRP_WP7_SHIFT: u32 = 1;
pub const AIPS_PACRP_SP7_MASK: u32 = 4;
pub const AIPS_PACRP_SP7_SHIFT: u32 = 2;
pub const AIPS_PACRP_TP6_MASK: u32 = 16;
pub const AIPS_PACRP_TP6_SHIFT: u32 = 4;
pub const AIPS_PACRP_WP6_MASK: u32 = 32;
pub const AIPS_PACRP_WP6_SHIFT: u32 = 5;
pub const AIPS_PACRP_SP6_MASK: u32 = 64;
pub const AIPS_PACRP_SP6_SHIFT: u32 = 6;
pub const AIPS_PACRP_TP5_MASK: u32 = 256;
pub const AIPS_PACRP_TP5_SHIFT: u32 = 8;
pub const AIPS_PACRP_WP5_MASK: u32 = 512;
pub const AIPS_PACRP_WP5_SHIFT: u32 = 9;
pub const AIPS_PACRP_SP5_MASK: u32 = 1024;
pub const AIPS_PACRP_SP5_SHIFT: u32 = 10;
pub const AIPS_PACRP_TP4_MASK: u32 = 4096;
pub const AIPS_PACRP_TP4_SHIFT: u32 = 12;
pub const AIPS_PACRP_WP4_MASK: u32 = 8192;
pub const AIPS_PACRP_WP4_SHIFT: u32 = 13;
pub const AIPS_PACRP_SP4_MASK: u32 = 16384;
pub const AIPS_PACRP_SP4_SHIFT: u32 = 14;
pub const AIPS_PACRP_TP3_MASK: u32 = 65536;
pub const AIPS_PACRP_TP3_SHIFT: u32 = 16;
pub const AIPS_PACRP_WP3_MASK: u32 = 131072;
pub const AIPS_PACRP_WP3_SHIFT: u32 = 17;
pub const AIPS_PACRP_SP3_MASK: u32 = 262144;
pub const AIPS_PACRP_SP3_SHIFT: u32 = 18;
pub const AIPS_PACRP_TP2_MASK: u32 = 1048576;
pub const AIPS_PACRP_TP2_SHIFT: u32 = 20;
pub const AIPS_PACRP_WP2_MASK: u32 = 2097152;
pub const AIPS_PACRP_WP2_SHIFT: u32 = 21;
pub const AIPS_PACRP_SP2_MASK: u32 = 4194304;
pub const AIPS_PACRP_SP2_SHIFT: u32 = 22;
pub const AIPS_PACRP_TP1_MASK: u32 = 16777216;
pub const AIPS_PACRP_TP1_SHIFT: u32 = 24;
pub const AIPS_PACRP_WP1_MASK: u32 = 33554432;
pub const AIPS_PACRP_WP1_SHIFT: u32 = 25;
pub const AIPS_PACRP_SP1_MASK: u32 = 67108864;
pub const AIPS_PACRP_SP1_SHIFT: u32 = 26;
pub const AIPS_PACRP_TP0_MASK: u32 = 268435456;
pub const AIPS_PACRP_TP0_SHIFT: u32 = 28;
pub const AIPS_PACRP_WP0_MASK: u32 = 536870912;
pub const AIPS_PACRP_WP0_SHIFT: u32 = 29;
pub const AIPS_PACRP_SP0_MASK: u32 = 1073741824;
pub const AIPS_PACRP_SP0_SHIFT: u32 = 30;
pub const AIPS0_BASE: u32 = 1073741824;
pub const AIPS1_BASE: u32 = 1074266112;
#[doc = " AXBS - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AXBS_Type {
    pub SLAVE: [AXBS_Type__bindgen_ty_1; 5usize],
    pub RESERVED_0: [u8; 768usize],
    #[doc = "< Master General Purpose Control Register, offset: 0x800"]
    pub MGPCR0: u32,
    pub RESERVED_1: [u8; 252usize],
    #[doc = "< Master General Purpose Control Register, offset: 0x900"]
    pub MGPCR1: u32,
    pub RESERVED_2: [u8; 252usize],
    #[doc = "< Master General Purpose Control Register, offset: 0xA00"]
    pub MGPCR2: u32,
    pub RESERVED_3: [u8; 508usize],
    #[doc = "< Master General Purpose Control Register, offset: 0xC00"]
    pub MGPCR4: u32,
    pub RESERVED_4: [u8; 252usize],
    #[doc = "< Master General Purpose Control Register, offset: 0xD00"]
    pub MGPCR5: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AXBS_Type__bindgen_ty_1 {
    #[doc = "< Priority Registers Slave, array offset: 0x0, array step: 0x100"]
    pub PRS: u32,
    pub RESERVED_0: [u8; 12usize],
    #[doc = "< Control Register, array offset: 0x10, array step: 0x100"]
    pub CRS: u32,
    pub RESERVED_1: [u8; 236usize],
}
#[test]
fn bindgen_test_layout_AXBS_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<AXBS_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AXBS_Type__bindgen_ty_1>(),
        256usize,
        concat!("Size of: ", stringify!(AXBS_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<AXBS_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(AXBS_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PRS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type__bindgen_ty_1),
            "::",
            stringify!(PRS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type__bindgen_ty_1),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CRS) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type__bindgen_ty_1),
            "::",
            stringify!(CRS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type__bindgen_ty_1),
            "::",
            stringify!(RESERVED_1)
        )
    );
}
#[test]
fn bindgen_test_layout_AXBS_Type() {
    const UNINIT: ::std::mem::MaybeUninit<AXBS_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<AXBS_Type>(),
        3332usize,
        concat!("Size of: ", stringify!(AXBS_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<AXBS_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(AXBS_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SLAVE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type),
            "::",
            stringify!(SLAVE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MGPCR0) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type),
            "::",
            stringify!(MGPCR0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        2052usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MGPCR1) as usize - ptr as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type),
            "::",
            stringify!(MGPCR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_2) as usize - ptr as usize },
        2308usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type),
            "::",
            stringify!(RESERVED_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MGPCR2) as usize - ptr as usize },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type),
            "::",
            stringify!(MGPCR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_3) as usize - ptr as usize },
        2564usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type),
            "::",
            stringify!(RESERVED_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MGPCR4) as usize - ptr as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type),
            "::",
            stringify!(MGPCR4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_4) as usize - ptr as usize },
        3076usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type),
            "::",
            stringify!(RESERVED_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MGPCR5) as usize - ptr as usize },
        3328usize,
        concat!(
            "Offset of field: ",
            stringify!(AXBS_Type),
            "::",
            stringify!(MGPCR5)
        )
    );
}
pub const AXBS_PRS_M0_MASK: u32 = 7;
pub const AXBS_PRS_M0_SHIFT: u32 = 0;
pub const AXBS_PRS_M1_MASK: u32 = 112;
pub const AXBS_PRS_M1_SHIFT: u32 = 4;
pub const AXBS_PRS_M2_MASK: u32 = 1792;
pub const AXBS_PRS_M2_SHIFT: u32 = 8;
pub const AXBS_PRS_M4_MASK: u32 = 458752;
pub const AXBS_PRS_M4_SHIFT: u32 = 16;
pub const AXBS_PRS_M5_MASK: u32 = 7340032;
pub const AXBS_PRS_M5_SHIFT: u32 = 20;
pub const AXBS_PRS_COUNT: u32 = 5;
pub const AXBS_CRS_PARK_MASK: u32 = 7;
pub const AXBS_CRS_PARK_SHIFT: u32 = 0;
pub const AXBS_CRS_PCTL_MASK: u32 = 48;
pub const AXBS_CRS_PCTL_SHIFT: u32 = 4;
pub const AXBS_CRS_ARB_MASK: u32 = 768;
pub const AXBS_CRS_ARB_SHIFT: u32 = 8;
pub const AXBS_CRS_HLP_MASK: u32 = 1073741824;
pub const AXBS_CRS_HLP_SHIFT: u32 = 30;
pub const AXBS_CRS_RO_MASK: u32 = 2147483648;
pub const AXBS_CRS_RO_SHIFT: u32 = 31;
pub const AXBS_CRS_COUNT: u32 = 5;
pub const AXBS_MGPCR0_AULB_MASK: u32 = 7;
pub const AXBS_MGPCR0_AULB_SHIFT: u32 = 0;
pub const AXBS_MGPCR1_AULB_MASK: u32 = 7;
pub const AXBS_MGPCR1_AULB_SHIFT: u32 = 0;
pub const AXBS_MGPCR2_AULB_MASK: u32 = 7;
pub const AXBS_MGPCR2_AULB_SHIFT: u32 = 0;
pub const AXBS_MGPCR4_AULB_MASK: u32 = 7;
pub const AXBS_MGPCR4_AULB_SHIFT: u32 = 0;
pub const AXBS_MGPCR5_AULB_MASK: u32 = 7;
pub const AXBS_MGPCR5_AULB_SHIFT: u32 = 0;
pub const AXBS_BASE: u32 = 1073758208;
#[doc = " CAN - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAN_Type {
    #[doc = "< Module Configuration Register, offset: 0x0"]
    pub MCR: u32,
    #[doc = "< Control 1 register, offset: 0x4"]
    pub CTRL1: u32,
    #[doc = "< Free Running Timer, offset: 0x8"]
    pub TIMER: u32,
    pub RESERVED_0: [u8; 4usize],
    #[doc = "< Rx Mailboxes Global Mask Register, offset: 0x10"]
    pub RXMGMASK: u32,
    #[doc = "< Rx 14 Mask register, offset: 0x14"]
    pub RX14MASK: u32,
    #[doc = "< Rx 15 Mask register, offset: 0x18"]
    pub RX15MASK: u32,
    #[doc = "< Error Counter, offset: 0x1C"]
    pub ECR: u32,
    #[doc = "< Error and Status 1 register, offset: 0x20"]
    pub ESR1: u32,
    pub RESERVED_1: [u8; 4usize],
    #[doc = "< Interrupt Masks 1 register, offset: 0x28"]
    pub IMASK1: u32,
    pub RESERVED_2: [u8; 4usize],
    #[doc = "< Interrupt Flags 1 register, offset: 0x30"]
    pub IFLAG1: u32,
    #[doc = "< Control 2 register, offset: 0x34"]
    pub CTRL2: u32,
    #[doc = "< Error and Status 2 register, offset: 0x38"]
    pub ESR2: u32,
    pub RESERVED_3: [u8; 8usize],
    #[doc = "< CRC Register, offset: 0x44"]
    pub CRCR: u32,
    #[doc = "< Rx FIFO Global Mask register, offset: 0x48"]
    pub RXFGMASK: u32,
    #[doc = "< Rx FIFO Information Register, offset: 0x4C"]
    pub RXFIR: u32,
    pub RESERVED_4: [u8; 48usize],
    pub MB: [CAN_Type__bindgen_ty_1; 16usize],
    pub RESERVED_5: [u8; 1792usize],
    #[doc = "< Rx Individual Mask Registers, array offset: 0x880, array step: 0x4"]
    pub RXIMR: [u32; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAN_Type__bindgen_ty_1 {
    #[doc = "< Message Buffer 0 CS Register..Message Buffer 15 CS Register, array offset: 0x80, array step: 0x10"]
    pub CS: u32,
    #[doc = "< Message Buffer 0 ID Register..Message Buffer 15 ID Register, array offset: 0x84, array step: 0x10"]
    pub ID: u32,
    #[doc = "< Message Buffer 0 WORD0 Register..Message Buffer 15 WORD0 Register, array offset: 0x88, array step: 0x10"]
    pub WORD0: u32,
    #[doc = "< Message Buffer 0 WORD1 Register..Message Buffer 15 WORD1 Register, array offset: 0x8C, array step: 0x10"]
    pub WORD1: u32,
}
#[test]
fn bindgen_test_layout_CAN_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CAN_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CAN_Type__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(CAN_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CAN_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type__bindgen_ty_1),
            "::",
            stringify!(CS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type__bindgen_ty_1),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WORD0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type__bindgen_ty_1),
            "::",
            stringify!(WORD0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WORD1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type__bindgen_ty_1),
            "::",
            stringify!(WORD1)
        )
    );
}
#[test]
fn bindgen_test_layout_CAN_Type() {
    const UNINIT: ::std::mem::MaybeUninit<CAN_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CAN_Type>(),
        2240usize,
        concat!("Size of: ", stringify!(CAN_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<CAN_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CAN_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(MCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTRL1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(CTRL1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TIMER) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(TIMER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXMGMASK) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RXMGMASK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RX14MASK) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RX14MASK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RX15MASK) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RX15MASK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ECR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(ECR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ESR1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(ESR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IMASK1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(IMASK1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_2) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RESERVED_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IFLAG1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(IFLAG1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTRL2) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(CTRL2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ESR2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(ESR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_3) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RESERVED_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CRCR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(CRCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXFGMASK) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RXFGMASK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXFIR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RXFIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_4) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RESERVED_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MB) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(MB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_5) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RESERVED_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXIMR) as usize - ptr as usize },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(CAN_Type),
            "::",
            stringify!(RXIMR)
        )
    );
}
pub const CAN_MCR_MAXMB_MASK: u32 = 127;
pub const CAN_MCR_MAXMB_SHIFT: u32 = 0;
pub const CAN_MCR_IDAM_MASK: u32 = 768;
pub const CAN_MCR_IDAM_SHIFT: u32 = 8;
pub const CAN_MCR_AEN_MASK: u32 = 4096;
pub const CAN_MCR_AEN_SHIFT: u32 = 12;
pub const CAN_MCR_LPRIOEN_MASK: u32 = 8192;
pub const CAN_MCR_LPRIOEN_SHIFT: u32 = 13;
pub const CAN_MCR_IRMQ_MASK: u32 = 65536;
pub const CAN_MCR_IRMQ_SHIFT: u32 = 16;
pub const CAN_MCR_SRXDIS_MASK: u32 = 131072;
pub const CAN_MCR_SRXDIS_SHIFT: u32 = 17;
pub const CAN_MCR_WAKSRC_MASK: u32 = 524288;
pub const CAN_MCR_WAKSRC_SHIFT: u32 = 19;
pub const CAN_MCR_LPMACK_MASK: u32 = 1048576;
pub const CAN_MCR_LPMACK_SHIFT: u32 = 20;
pub const CAN_MCR_WRNEN_MASK: u32 = 2097152;
pub const CAN_MCR_WRNEN_SHIFT: u32 = 21;
pub const CAN_MCR_SLFWAK_MASK: u32 = 4194304;
pub const CAN_MCR_SLFWAK_SHIFT: u32 = 22;
pub const CAN_MCR_SUPV_MASK: u32 = 8388608;
pub const CAN_MCR_SUPV_SHIFT: u32 = 23;
pub const CAN_MCR_FRZACK_MASK: u32 = 16777216;
pub const CAN_MCR_FRZACK_SHIFT: u32 = 24;
pub const CAN_MCR_SOFTRST_MASK: u32 = 33554432;
pub const CAN_MCR_SOFTRST_SHIFT: u32 = 25;
pub const CAN_MCR_WAKMSK_MASK: u32 = 67108864;
pub const CAN_MCR_WAKMSK_SHIFT: u32 = 26;
pub const CAN_MCR_NOTRDY_MASK: u32 = 134217728;
pub const CAN_MCR_NOTRDY_SHIFT: u32 = 27;
pub const CAN_MCR_HALT_MASK: u32 = 268435456;
pub const CAN_MCR_HALT_SHIFT: u32 = 28;
pub const CAN_MCR_RFEN_MASK: u32 = 536870912;
pub const CAN_MCR_RFEN_SHIFT: u32 = 29;
pub const CAN_MCR_FRZ_MASK: u32 = 1073741824;
pub const CAN_MCR_FRZ_SHIFT: u32 = 30;
pub const CAN_MCR_MDIS_MASK: u32 = 2147483648;
pub const CAN_MCR_MDIS_SHIFT: u32 = 31;
pub const CAN_CTRL1_PROPSEG_MASK: u32 = 7;
pub const CAN_CTRL1_PROPSEG_SHIFT: u32 = 0;
pub const CAN_CTRL1_LOM_MASK: u32 = 8;
pub const CAN_CTRL1_LOM_SHIFT: u32 = 3;
pub const CAN_CTRL1_LBUF_MASK: u32 = 16;
pub const CAN_CTRL1_LBUF_SHIFT: u32 = 4;
pub const CAN_CTRL1_TSYN_MASK: u32 = 32;
pub const CAN_CTRL1_TSYN_SHIFT: u32 = 5;
pub const CAN_CTRL1_BOFFREC_MASK: u32 = 64;
pub const CAN_CTRL1_BOFFREC_SHIFT: u32 = 6;
pub const CAN_CTRL1_SMP_MASK: u32 = 128;
pub const CAN_CTRL1_SMP_SHIFT: u32 = 7;
pub const CAN_CTRL1_RWRNMSK_MASK: u32 = 1024;
pub const CAN_CTRL1_RWRNMSK_SHIFT: u32 = 10;
pub const CAN_CTRL1_TWRNMSK_MASK: u32 = 2048;
pub const CAN_CTRL1_TWRNMSK_SHIFT: u32 = 11;
pub const CAN_CTRL1_LPB_MASK: u32 = 4096;
pub const CAN_CTRL1_LPB_SHIFT: u32 = 12;
pub const CAN_CTRL1_CLKSRC_MASK: u32 = 8192;
pub const CAN_CTRL1_CLKSRC_SHIFT: u32 = 13;
pub const CAN_CTRL1_ERRMSK_MASK: u32 = 16384;
pub const CAN_CTRL1_ERRMSK_SHIFT: u32 = 14;
pub const CAN_CTRL1_BOFFMSK_MASK: u32 = 32768;
pub const CAN_CTRL1_BOFFMSK_SHIFT: u32 = 15;
pub const CAN_CTRL1_PSEG2_MASK: u32 = 458752;
pub const CAN_CTRL1_PSEG2_SHIFT: u32 = 16;
pub const CAN_CTRL1_PSEG1_MASK: u32 = 3670016;
pub const CAN_CTRL1_PSEG1_SHIFT: u32 = 19;
pub const CAN_CTRL1_RJW_MASK: u32 = 12582912;
pub const CAN_CTRL1_RJW_SHIFT: u32 = 22;
pub const CAN_CTRL1_PRESDIV_MASK: u32 = 4278190080;
pub const CAN_CTRL1_PRESDIV_SHIFT: u32 = 24;
pub const CAN_TIMER_TIMER_MASK: u32 = 65535;
pub const CAN_TIMER_TIMER_SHIFT: u32 = 0;
pub const CAN_RXMGMASK_MG_MASK: u32 = 4294967295;
pub const CAN_RXMGMASK_MG_SHIFT: u32 = 0;
pub const CAN_RX14MASK_RX14M_MASK: u32 = 4294967295;
pub const CAN_RX14MASK_RX14M_SHIFT: u32 = 0;
pub const CAN_RX15MASK_RX15M_MASK: u32 = 4294967295;
pub const CAN_RX15MASK_RX15M_SHIFT: u32 = 0;
pub const CAN_ECR_TXERRCNT_MASK: u32 = 255;
pub const CAN_ECR_TXERRCNT_SHIFT: u32 = 0;
pub const CAN_ECR_RXERRCNT_MASK: u32 = 65280;
pub const CAN_ECR_RXERRCNT_SHIFT: u32 = 8;
pub const CAN_ESR1_WAKINT_MASK: u32 = 1;
pub const CAN_ESR1_WAKINT_SHIFT: u32 = 0;
pub const CAN_ESR1_ERRINT_MASK: u32 = 2;
pub const CAN_ESR1_ERRINT_SHIFT: u32 = 1;
pub const CAN_ESR1_BOFFINT_MASK: u32 = 4;
pub const CAN_ESR1_BOFFINT_SHIFT: u32 = 2;
pub const CAN_ESR1_RX_MASK: u32 = 8;
pub const CAN_ESR1_RX_SHIFT: u32 = 3;
pub const CAN_ESR1_FLTCONF_MASK: u32 = 48;
pub const CAN_ESR1_FLTCONF_SHIFT: u32 = 4;
pub const CAN_ESR1_TX_MASK: u32 = 64;
pub const CAN_ESR1_TX_SHIFT: u32 = 6;
pub const CAN_ESR1_IDLE_MASK: u32 = 128;
pub const CAN_ESR1_IDLE_SHIFT: u32 = 7;
pub const CAN_ESR1_RXWRN_MASK: u32 = 256;
pub const CAN_ESR1_RXWRN_SHIFT: u32 = 8;
pub const CAN_ESR1_TXWRN_MASK: u32 = 512;
pub const CAN_ESR1_TXWRN_SHIFT: u32 = 9;
pub const CAN_ESR1_STFERR_MASK: u32 = 1024;
pub const CAN_ESR1_STFERR_SHIFT: u32 = 10;
pub const CAN_ESR1_FRMERR_MASK: u32 = 2048;
pub const CAN_ESR1_FRMERR_SHIFT: u32 = 11;
pub const CAN_ESR1_CRCERR_MASK: u32 = 4096;
pub const CAN_ESR1_CRCERR_SHIFT: u32 = 12;
pub const CAN_ESR1_ACKERR_MASK: u32 = 8192;
pub const CAN_ESR1_ACKERR_SHIFT: u32 = 13;
pub const CAN_ESR1_BIT0ERR_MASK: u32 = 16384;
pub const CAN_ESR1_BIT0ERR_SHIFT: u32 = 14;
pub const CAN_ESR1_BIT1ERR_MASK: u32 = 32768;
pub const CAN_ESR1_BIT1ERR_SHIFT: u32 = 15;
pub const CAN_ESR1_RWRNINT_MASK: u32 = 65536;
pub const CAN_ESR1_RWRNINT_SHIFT: u32 = 16;
pub const CAN_ESR1_TWRNINT_MASK: u32 = 131072;
pub const CAN_ESR1_TWRNINT_SHIFT: u32 = 17;
pub const CAN_ESR1_SYNCH_MASK: u32 = 262144;
pub const CAN_ESR1_SYNCH_SHIFT: u32 = 18;
pub const CAN_IMASK1_BUFLM_MASK: u32 = 4294967295;
pub const CAN_IMASK1_BUFLM_SHIFT: u32 = 0;
pub const CAN_IFLAG1_BUF0I_MASK: u32 = 1;
pub const CAN_IFLAG1_BUF0I_SHIFT: u32 = 0;
pub const CAN_IFLAG1_BUF4TO1I_MASK: u32 = 30;
pub const CAN_IFLAG1_BUF4TO1I_SHIFT: u32 = 1;
pub const CAN_IFLAG1_BUF5I_MASK: u32 = 32;
pub const CAN_IFLAG1_BUF5I_SHIFT: u32 = 5;
pub const CAN_IFLAG1_BUF6I_MASK: u32 = 64;
pub const CAN_IFLAG1_BUF6I_SHIFT: u32 = 6;
pub const CAN_IFLAG1_BUF7I_MASK: u32 = 128;
pub const CAN_IFLAG1_BUF7I_SHIFT: u32 = 7;
pub const CAN_IFLAG1_BUF31TO8I_MASK: u32 = 4294967040;
pub const CAN_IFLAG1_BUF31TO8I_SHIFT: u32 = 8;
pub const CAN_CTRL2_EACEN_MASK: u32 = 65536;
pub const CAN_CTRL2_EACEN_SHIFT: u32 = 16;
pub const CAN_CTRL2_RRS_MASK: u32 = 131072;
pub const CAN_CTRL2_RRS_SHIFT: u32 = 17;
pub const CAN_CTRL2_MRP_MASK: u32 = 262144;
pub const CAN_CTRL2_MRP_SHIFT: u32 = 18;
pub const CAN_CTRL2_TASD_MASK: u32 = 16252928;
pub const CAN_CTRL2_TASD_SHIFT: u32 = 19;
pub const CAN_CTRL2_RFFN_MASK: u32 = 251658240;
pub const CAN_CTRL2_RFFN_SHIFT: u32 = 24;
pub const CAN_CTRL2_WRMFRZ_MASK: u32 = 268435456;
pub const CAN_CTRL2_WRMFRZ_SHIFT: u32 = 28;
pub const CAN_ESR2_IMB_MASK: u32 = 8192;
pub const CAN_ESR2_IMB_SHIFT: u32 = 13;
pub const CAN_ESR2_VPS_MASK: u32 = 16384;
pub const CAN_ESR2_VPS_SHIFT: u32 = 14;
pub const CAN_ESR2_LPTM_MASK: u32 = 8323072;
pub const CAN_ESR2_LPTM_SHIFT: u32 = 16;
pub const CAN_CRCR_TXCRC_MASK: u32 = 32767;
pub const CAN_CRCR_TXCRC_SHIFT: u32 = 0;
pub const CAN_CRCR_MBCRC_MASK: u32 = 8323072;
pub const CAN_CRCR_MBCRC_SHIFT: u32 = 16;
pub const CAN_RXFGMASK_FGM_MASK: u32 = 4294967295;
pub const CAN_RXFGMASK_FGM_SHIFT: u32 = 0;
pub const CAN_RXFIR_IDHIT_MASK: u32 = 511;
pub const CAN_RXFIR_IDHIT_SHIFT: u32 = 0;
pub const CAN_CS_TIME_STAMP_MASK: u32 = 65535;
pub const CAN_CS_TIME_STAMP_SHIFT: u32 = 0;
pub const CAN_CS_DLC_MASK: u32 = 983040;
pub const CAN_CS_DLC_SHIFT: u32 = 16;
pub const CAN_CS_RTR_MASK: u32 = 1048576;
pub const CAN_CS_RTR_SHIFT: u32 = 20;
pub const CAN_CS_IDE_MASK: u32 = 2097152;
pub const CAN_CS_IDE_SHIFT: u32 = 21;
pub const CAN_CS_SRR_MASK: u32 = 4194304;
pub const CAN_CS_SRR_SHIFT: u32 = 22;
pub const CAN_CS_CODE_MASK: u32 = 251658240;
pub const CAN_CS_CODE_SHIFT: u32 = 24;
pub const CAN_CS_COUNT: u32 = 16;
pub const CAN_ID_EXT_MASK: u32 = 262143;
pub const CAN_ID_EXT_SHIFT: u32 = 0;
pub const CAN_ID_STD_MASK: u32 = 536608768;
pub const CAN_ID_STD_SHIFT: u32 = 18;
pub const CAN_ID_PRIO_MASK: u32 = 3758096384;
pub const CAN_ID_PRIO_SHIFT: u32 = 29;
pub const CAN_ID_COUNT: u32 = 16;
pub const CAN_WORD0_DATA_BYTE_3_MASK: u32 = 255;
pub const CAN_WORD0_DATA_BYTE_3_SHIFT: u32 = 0;
pub const CAN_WORD0_DATA_BYTE_2_MASK: u32 = 65280;
pub const CAN_WORD0_DATA_BYTE_2_SHIFT: u32 = 8;
pub const CAN_WORD0_DATA_BYTE_1_MASK: u32 = 16711680;
pub const CAN_WORD0_DATA_BYTE_1_SHIFT: u32 = 16;
pub const CAN_WORD0_DATA_BYTE_0_MASK: u32 = 4278190080;
pub const CAN_WORD0_DATA_BYTE_0_SHIFT: u32 = 24;
pub const CAN_WORD0_COUNT: u32 = 16;
pub const CAN_WORD1_DATA_BYTE_7_MASK: u32 = 255;
pub const CAN_WORD1_DATA_BYTE_7_SHIFT: u32 = 0;
pub const CAN_WORD1_DATA_BYTE_6_MASK: u32 = 65280;
pub const CAN_WORD1_DATA_BYTE_6_SHIFT: u32 = 8;
pub const CAN_WORD1_DATA_BYTE_5_MASK: u32 = 16711680;
pub const CAN_WORD1_DATA_BYTE_5_SHIFT: u32 = 16;
pub const CAN_WORD1_DATA_BYTE_4_MASK: u32 = 4278190080;
pub const CAN_WORD1_DATA_BYTE_4_SHIFT: u32 = 24;
pub const CAN_WORD1_COUNT: u32 = 16;
pub const CAN_RXIMR_MI_MASK: u32 = 4294967295;
pub const CAN_RXIMR_MI_SHIFT: u32 = 0;
pub const CAN_RXIMR_COUNT: u32 = 16;
pub const CAN0_BASE: u32 = 1073889280;
#[doc = " CAU - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CAU_Type {
    #[doc = "< Direct access register 0..Direct access register 15, array offset: 0x0, array step: 0x4"]
    pub DIRECT: [u32; 16usize],
    pub RESERVED_0: [u8; 2048usize],
    #[doc = "< Status register - Load Register command, offset: 0x840"]
    pub LDR_CASR: u32,
    #[doc = "< Accumulator register - Load Register command, offset: 0x844"]
    pub LDR_CAA: u32,
    #[doc = "< General Purpose Register 0 - Load Register command..General Purpose Register 8 - Load Register command, array offset: 0x848, array step: 0x4"]
    pub LDR_CA: [u32; 9usize],
    pub RESERVED_1: [u8; 20usize],
    #[doc = "< Status register - Store Register command, offset: 0x880"]
    pub STR_CASR: u32,
    #[doc = "< Accumulator register - Store Register command, offset: 0x884"]
    pub STR_CAA: u32,
    #[doc = "< General Purpose Register 0 - Store Register command..General Purpose Register 8 - Store Register command, array offset: 0x888, array step: 0x4"]
    pub STR_CA: [u32; 9usize],
    pub RESERVED_2: [u8; 20usize],
    #[doc = "< Status register - Add Register command, offset: 0x8C0"]
    pub ADR_CASR: u32,
    #[doc = "< Accumulator register - Add to register command, offset: 0x8C4"]
    pub ADR_CAA: u32,
    #[doc = "< General Purpose Register 0 - Add to register command..General Purpose Register 8 - Add to register command, array offset: 0x8C8, array step: 0x4"]
    pub ADR_CA: [u32; 9usize],
    pub RESERVED_3: [u8; 20usize],
    #[doc = "< Status register - Reverse and Add to Register command, offset: 0x900"]
    pub RADR_CASR: u32,
    #[doc = "< Accumulator register - Reverse and Add to Register command, offset: 0x904"]
    pub RADR_CAA: u32,
    #[doc = "< General Purpose Register 0 - Reverse and Add to Register command..General Purpose Register 8 - Reverse and Add to Register command, array offset: 0x908, array step: 0x4"]
    pub RADR_CA: [u32; 9usize],
    pub RESERVED_4: [u8; 84usize],
    #[doc = "< Status register - Exclusive Or command, offset: 0x980"]
    pub XOR_CASR: u32,
    #[doc = "< Accumulator register - Exclusive Or command, offset: 0x984"]
    pub XOR_CAA: u32,
    #[doc = "< General Purpose Register 0 - Exclusive Or command..General Purpose Register 8 - Exclusive Or command, array offset: 0x988, array step: 0x4"]
    pub XOR_CA: [u32; 9usize],
    pub RESERVED_5: [u8; 20usize],
    #[doc = "< Status register - Rotate Left command, offset: 0x9C0"]
    pub ROTL_CASR: u32,
    #[doc = "< Accumulator register - Rotate Left command, offset: 0x9C4"]
    pub ROTL_CAA: u32,
    #[doc = "< General Purpose Register 0 - Rotate Left command..General Purpose Register 8 - Rotate Left command, array offset: 0x9C8, array step: 0x4"]
    pub ROTL_CA: [u32; 9usize],
    pub RESERVED_6: [u8; 276usize],
    #[doc = "< Status register - AES Column Operation command, offset: 0xB00"]
    pub AESC_CASR: u32,
    #[doc = "< Accumulator register - AES Column Operation command, offset: 0xB04"]
    pub AESC_CAA: u32,
    #[doc = "< General Purpose Register 0 - AES Column Operation command..General Purpose Register 8 - AES Column Operation command, array offset: 0xB08, array step: 0x4"]
    pub AESC_CA: [u32; 9usize],
    pub RESERVED_7: [u8; 20usize],
    #[doc = "< Status register - AES Inverse Column Operation command, offset: 0xB40"]
    pub AESIC_CASR: u32,
    #[doc = "< Accumulator register - AES Inverse Column Operation command, offset: 0xB44"]
    pub AESIC_CAA: u32,
    #[doc = "< General Purpose Register 0 - AES Inverse Column Operation command..General Purpose Register 8 - AES Inverse Column Operation command, array offset: 0xB48, array step: 0x4"]
    pub AESIC_CA: [u32; 9usize],
}
#[test]
fn bindgen_test_layout_CAU_Type() {
    const UNINIT: ::std::mem::MaybeUninit<CAU_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CAU_Type>(),
        2924usize,
        concat!("Size of: ", stringify!(CAU_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<CAU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CAU_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIRECT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(DIRECT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LDR_CASR) as usize - ptr as usize },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(LDR_CASR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LDR_CAA) as usize - ptr as usize },
        2116usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(LDR_CAA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LDR_CA) as usize - ptr as usize },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(LDR_CA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        2156usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STR_CASR) as usize - ptr as usize },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(STR_CASR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STR_CAA) as usize - ptr as usize },
        2180usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(STR_CAA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STR_CA) as usize - ptr as usize },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(STR_CA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_2) as usize - ptr as usize },
        2220usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(RESERVED_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ADR_CASR) as usize - ptr as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(ADR_CASR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ADR_CAA) as usize - ptr as usize },
        2244usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(ADR_CAA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ADR_CA) as usize - ptr as usize },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(ADR_CA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_3) as usize - ptr as usize },
        2284usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(RESERVED_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RADR_CASR) as usize - ptr as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(RADR_CASR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RADR_CAA) as usize - ptr as usize },
        2308usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(RADR_CAA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RADR_CA) as usize - ptr as usize },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(RADR_CA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_4) as usize - ptr as usize },
        2348usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(RESERVED_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XOR_CASR) as usize - ptr as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(XOR_CASR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XOR_CAA) as usize - ptr as usize },
        2436usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(XOR_CAA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XOR_CA) as usize - ptr as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(XOR_CA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_5) as usize - ptr as usize },
        2476usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(RESERVED_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ROTL_CASR) as usize - ptr as usize },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(ROTL_CASR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ROTL_CAA) as usize - ptr as usize },
        2500usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(ROTL_CAA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ROTL_CA) as usize - ptr as usize },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(ROTL_CA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_6) as usize - ptr as usize },
        2540usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(RESERVED_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AESC_CASR) as usize - ptr as usize },
        2816usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(AESC_CASR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AESC_CAA) as usize - ptr as usize },
        2820usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(AESC_CAA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AESC_CA) as usize - ptr as usize },
        2824usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(AESC_CA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_7) as usize - ptr as usize },
        2860usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(RESERVED_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AESIC_CASR) as usize - ptr as usize },
        2880usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(AESIC_CASR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AESIC_CAA) as usize - ptr as usize },
        2884usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(AESIC_CAA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AESIC_CA) as usize - ptr as usize },
        2888usize,
        concat!(
            "Offset of field: ",
            stringify!(CAU_Type),
            "::",
            stringify!(AESIC_CA)
        )
    );
}
pub const CAU_DIRECT_CAU_DIRECT0_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT0_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT1_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT1_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT2_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT2_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT3_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT3_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT4_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT4_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT5_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT5_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT6_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT6_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT7_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT7_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT8_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT8_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT9_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT9_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT10_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT10_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT11_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT11_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT12_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT12_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT13_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT13_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT14_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT14_SHIFT: u32 = 0;
pub const CAU_DIRECT_CAU_DIRECT15_MASK: u32 = 4294967295;
pub const CAU_DIRECT_CAU_DIRECT15_SHIFT: u32 = 0;
pub const CAU_DIRECT_COUNT: u32 = 16;
pub const CAU_LDR_CASR_IC_MASK: u32 = 1;
pub const CAU_LDR_CASR_IC_SHIFT: u32 = 0;
pub const CAU_LDR_CASR_DPE_MASK: u32 = 2;
pub const CAU_LDR_CASR_DPE_SHIFT: u32 = 1;
pub const CAU_LDR_CASR_VER_MASK: u32 = 4026531840;
pub const CAU_LDR_CASR_VER_SHIFT: u32 = 28;
pub const CAU_LDR_CAA_ACC_MASK: u32 = 4294967295;
pub const CAU_LDR_CAA_ACC_SHIFT: u32 = 0;
pub const CAU_LDR_CA_CA0_MASK: u32 = 4294967295;
pub const CAU_LDR_CA_CA0_SHIFT: u32 = 0;
pub const CAU_LDR_CA_CA1_MASK: u32 = 4294967295;
pub const CAU_LDR_CA_CA1_SHIFT: u32 = 0;
pub const CAU_LDR_CA_CA2_MASK: u32 = 4294967295;
pub const CAU_LDR_CA_CA2_SHIFT: u32 = 0;
pub const CAU_LDR_CA_CA3_MASK: u32 = 4294967295;
pub const CAU_LDR_CA_CA3_SHIFT: u32 = 0;
pub const CAU_LDR_CA_CA4_MASK: u32 = 4294967295;
pub const CAU_LDR_CA_CA4_SHIFT: u32 = 0;
pub const CAU_LDR_CA_CA5_MASK: u32 = 4294967295;
pub const CAU_LDR_CA_CA5_SHIFT: u32 = 0;
pub const CAU_LDR_CA_CA6_MASK: u32 = 4294967295;
pub const CAU_LDR_CA_CA6_SHIFT: u32 = 0;
pub const CAU_LDR_CA_CA7_MASK: u32 = 4294967295;
pub const CAU_LDR_CA_CA7_SHIFT: u32 = 0;
pub const CAU_LDR_CA_CA8_MASK: u32 = 4294967295;
pub const CAU_LDR_CA_CA8_SHIFT: u32 = 0;
pub const CAU_LDR_CA_COUNT: u32 = 9;
pub const CAU_STR_CASR_IC_MASK: u32 = 1;
pub const CAU_STR_CASR_IC_SHIFT: u32 = 0;
pub const CAU_STR_CASR_DPE_MASK: u32 = 2;
pub const CAU_STR_CASR_DPE_SHIFT: u32 = 1;
pub const CAU_STR_CASR_VER_MASK: u32 = 4026531840;
pub const CAU_STR_CASR_VER_SHIFT: u32 = 28;
pub const CAU_STR_CAA_ACC_MASK: u32 = 4294967295;
pub const CAU_STR_CAA_ACC_SHIFT: u32 = 0;
pub const CAU_STR_CA_CA0_MASK: u32 = 4294967295;
pub const CAU_STR_CA_CA0_SHIFT: u32 = 0;
pub const CAU_STR_CA_CA1_MASK: u32 = 4294967295;
pub const CAU_STR_CA_CA1_SHIFT: u32 = 0;
pub const CAU_STR_CA_CA2_MASK: u32 = 4294967295;
pub const CAU_STR_CA_CA2_SHIFT: u32 = 0;
pub const CAU_STR_CA_CA3_MASK: u32 = 4294967295;
pub const CAU_STR_CA_CA3_SHIFT: u32 = 0;
pub const CAU_STR_CA_CA4_MASK: u32 = 4294967295;
pub const CAU_STR_CA_CA4_SHIFT: u32 = 0;
pub const CAU_STR_CA_CA5_MASK: u32 = 4294967295;
pub const CAU_STR_CA_CA5_SHIFT: u32 = 0;
pub const CAU_STR_CA_CA6_MASK: u32 = 4294967295;
pub const CAU_STR_CA_CA6_SHIFT: u32 = 0;
pub const CAU_STR_CA_CA7_MASK: u32 = 4294967295;
pub const CAU_STR_CA_CA7_SHIFT: u32 = 0;
pub const CAU_STR_CA_CA8_MASK: u32 = 4294967295;
pub const CAU_STR_CA_CA8_SHIFT: u32 = 0;
pub const CAU_STR_CA_COUNT: u32 = 9;
pub const CAU_ADR_CASR_IC_MASK: u32 = 1;
pub const CAU_ADR_CASR_IC_SHIFT: u32 = 0;
pub const CAU_ADR_CASR_DPE_MASK: u32 = 2;
pub const CAU_ADR_CASR_DPE_SHIFT: u32 = 1;
pub const CAU_ADR_CASR_VER_MASK: u32 = 4026531840;
pub const CAU_ADR_CASR_VER_SHIFT: u32 = 28;
pub const CAU_ADR_CAA_ACC_MASK: u32 = 4294967295;
pub const CAU_ADR_CAA_ACC_SHIFT: u32 = 0;
pub const CAU_ADR_CA_CA0_MASK: u32 = 4294967295;
pub const CAU_ADR_CA_CA0_SHIFT: u32 = 0;
pub const CAU_ADR_CA_CA1_MASK: u32 = 4294967295;
pub const CAU_ADR_CA_CA1_SHIFT: u32 = 0;
pub const CAU_ADR_CA_CA2_MASK: u32 = 4294967295;
pub const CAU_ADR_CA_CA2_SHIFT: u32 = 0;
pub const CAU_ADR_CA_CA3_MASK: u32 = 4294967295;
pub const CAU_ADR_CA_CA3_SHIFT: u32 = 0;
pub const CAU_ADR_CA_CA4_MASK: u32 = 4294967295;
pub const CAU_ADR_CA_CA4_SHIFT: u32 = 0;
pub const CAU_ADR_CA_CA5_MASK: u32 = 4294967295;
pub const CAU_ADR_CA_CA5_SHIFT: u32 = 0;
pub const CAU_ADR_CA_CA6_MASK: u32 = 4294967295;
pub const CAU_ADR_CA_CA6_SHIFT: u32 = 0;
pub const CAU_ADR_CA_CA7_MASK: u32 = 4294967295;
pub const CAU_ADR_CA_CA7_SHIFT: u32 = 0;
pub const CAU_ADR_CA_CA8_MASK: u32 = 4294967295;
pub const CAU_ADR_CA_CA8_SHIFT: u32 = 0;
pub const CAU_ADR_CA_COUNT: u32 = 9;
pub const CAU_RADR_CASR_IC_MASK: u32 = 1;
pub const CAU_RADR_CASR_IC_SHIFT: u32 = 0;
pub const CAU_RADR_CASR_DPE_MASK: u32 = 2;
pub const CAU_RADR_CASR_DPE_SHIFT: u32 = 1;
pub const CAU_RADR_CASR_VER_MASK: u32 = 4026531840;
pub const CAU_RADR_CASR_VER_SHIFT: u32 = 28;
pub const CAU_RADR_CAA_ACC_MASK: u32 = 4294967295;
pub const CAU_RADR_CAA_ACC_SHIFT: u32 = 0;
pub const CAU_RADR_CA_CA0_MASK: u32 = 4294967295;
pub const CAU_RADR_CA_CA0_SHIFT: u32 = 0;
pub const CAU_RADR_CA_CA1_MASK: u32 = 4294967295;
pub const CAU_RADR_CA_CA1_SHIFT: u32 = 0;
pub const CAU_RADR_CA_CA2_MASK: u32 = 4294967295;
pub const CAU_RADR_CA_CA2_SHIFT: u32 = 0;
pub const CAU_RADR_CA_CA3_MASK: u32 = 4294967295;
pub const CAU_RADR_CA_CA3_SHIFT: u32 = 0;
pub const CAU_RADR_CA_CA4_MASK: u32 = 4294967295;
pub const CAU_RADR_CA_CA4_SHIFT: u32 = 0;
pub const CAU_RADR_CA_CA5_MASK: u32 = 4294967295;
pub const CAU_RADR_CA_CA5_SHIFT: u32 = 0;
pub const CAU_RADR_CA_CA6_MASK: u32 = 4294967295;
pub const CAU_RADR_CA_CA6_SHIFT: u32 = 0;
pub const CAU_RADR_CA_CA7_MASK: u32 = 4294967295;
pub const CAU_RADR_CA_CA7_SHIFT: u32 = 0;
pub const CAU_RADR_CA_CA8_MASK: u32 = 4294967295;
pub const CAU_RADR_CA_CA8_SHIFT: u32 = 0;
pub const CAU_RADR_CA_COUNT: u32 = 9;
pub const CAU_XOR_CASR_IC_MASK: u32 = 1;
pub const CAU_XOR_CASR_IC_SHIFT: u32 = 0;
pub const CAU_XOR_CASR_DPE_MASK: u32 = 2;
pub const CAU_XOR_CASR_DPE_SHIFT: u32 = 1;
pub const CAU_XOR_CASR_VER_MASK: u32 = 4026531840;
pub const CAU_XOR_CASR_VER_SHIFT: u32 = 28;
pub const CAU_XOR_CAA_ACC_MASK: u32 = 4294967295;
pub const CAU_XOR_CAA_ACC_SHIFT: u32 = 0;
pub const CAU_XOR_CA_CA0_MASK: u32 = 4294967295;
pub const CAU_XOR_CA_CA0_SHIFT: u32 = 0;
pub const CAU_XOR_CA_CA1_MASK: u32 = 4294967295;
pub const CAU_XOR_CA_CA1_SHIFT: u32 = 0;
pub const CAU_XOR_CA_CA2_MASK: u32 = 4294967295;
pub const CAU_XOR_CA_CA2_SHIFT: u32 = 0;
pub const CAU_XOR_CA_CA3_MASK: u32 = 4294967295;
pub const CAU_XOR_CA_CA3_SHIFT: u32 = 0;
pub const CAU_XOR_CA_CA4_MASK: u32 = 4294967295;
pub const CAU_XOR_CA_CA4_SHIFT: u32 = 0;
pub const CAU_XOR_CA_CA5_MASK: u32 = 4294967295;
pub const CAU_XOR_CA_CA5_SHIFT: u32 = 0;
pub const CAU_XOR_CA_CA6_MASK: u32 = 4294967295;
pub const CAU_XOR_CA_CA6_SHIFT: u32 = 0;
pub const CAU_XOR_CA_CA7_MASK: u32 = 4294967295;
pub const CAU_XOR_CA_CA7_SHIFT: u32 = 0;
pub const CAU_XOR_CA_CA8_MASK: u32 = 4294967295;
pub const CAU_XOR_CA_CA8_SHIFT: u32 = 0;
pub const CAU_XOR_CA_COUNT: u32 = 9;
pub const CAU_ROTL_CASR_IC_MASK: u32 = 1;
pub const CAU_ROTL_CASR_IC_SHIFT: u32 = 0;
pub const CAU_ROTL_CASR_DPE_MASK: u32 = 2;
pub const CAU_ROTL_CASR_DPE_SHIFT: u32 = 1;
pub const CAU_ROTL_CASR_VER_MASK: u32 = 4026531840;
pub const CAU_ROTL_CASR_VER_SHIFT: u32 = 28;
pub const CAU_ROTL_CAA_ACC_MASK: u32 = 4294967295;
pub const CAU_ROTL_CAA_ACC_SHIFT: u32 = 0;
pub const CAU_ROTL_CA_CA0_MASK: u32 = 4294967295;
pub const CAU_ROTL_CA_CA0_SHIFT: u32 = 0;
pub const CAU_ROTL_CA_CA1_MASK: u32 = 4294967295;
pub const CAU_ROTL_CA_CA1_SHIFT: u32 = 0;
pub const CAU_ROTL_CA_CA2_MASK: u32 = 4294967295;
pub const CAU_ROTL_CA_CA2_SHIFT: u32 = 0;
pub const CAU_ROTL_CA_CA3_MASK: u32 = 4294967295;
pub const CAU_ROTL_CA_CA3_SHIFT: u32 = 0;
pub const CAU_ROTL_CA_CA4_MASK: u32 = 4294967295;
pub const CAU_ROTL_CA_CA4_SHIFT: u32 = 0;
pub const CAU_ROTL_CA_CA5_MASK: u32 = 4294967295;
pub const CAU_ROTL_CA_CA5_SHIFT: u32 = 0;
pub const CAU_ROTL_CA_CA6_MASK: u32 = 4294967295;
pub const CAU_ROTL_CA_CA6_SHIFT: u32 = 0;
pub const CAU_ROTL_CA_CA7_MASK: u32 = 4294967295;
pub const CAU_ROTL_CA_CA7_SHIFT: u32 = 0;
pub const CAU_ROTL_CA_CA8_MASK: u32 = 4294967295;
pub const CAU_ROTL_CA_CA8_SHIFT: u32 = 0;
pub const CAU_ROTL_CA_COUNT: u32 = 9;
pub const CAU_AESC_CASR_IC_MASK: u32 = 1;
pub const CAU_AESC_CASR_IC_SHIFT: u32 = 0;
pub const CAU_AESC_CASR_DPE_MASK: u32 = 2;
pub const CAU_AESC_CASR_DPE_SHIFT: u32 = 1;
pub const CAU_AESC_CASR_VER_MASK: u32 = 4026531840;
pub const CAU_AESC_CASR_VER_SHIFT: u32 = 28;
pub const CAU_AESC_CAA_ACC_MASK: u32 = 4294967295;
pub const CAU_AESC_CAA_ACC_SHIFT: u32 = 0;
pub const CAU_AESC_CA_CA0_MASK: u32 = 4294967295;
pub const CAU_AESC_CA_CA0_SHIFT: u32 = 0;
pub const CAU_AESC_CA_CA1_MASK: u32 = 4294967295;
pub const CAU_AESC_CA_CA1_SHIFT: u32 = 0;
pub const CAU_AESC_CA_CA2_MASK: u32 = 4294967295;
pub const CAU_AESC_CA_CA2_SHIFT: u32 = 0;
pub const CAU_AESC_CA_CA3_MASK: u32 = 4294967295;
pub const CAU_AESC_CA_CA3_SHIFT: u32 = 0;
pub const CAU_AESC_CA_CA4_MASK: u32 = 4294967295;
pub const CAU_AESC_CA_CA4_SHIFT: u32 = 0;
pub const CAU_AESC_CA_CA5_MASK: u32 = 4294967295;
pub const CAU_AESC_CA_CA5_SHIFT: u32 = 0;
pub const CAU_AESC_CA_CA6_MASK: u32 = 4294967295;
pub const CAU_AESC_CA_CA6_SHIFT: u32 = 0;
pub const CAU_AESC_CA_CA7_MASK: u32 = 4294967295;
pub const CAU_AESC_CA_CA7_SHIFT: u32 = 0;
pub const CAU_AESC_CA_CA8_MASK: u32 = 4294967295;
pub const CAU_AESC_CA_CA8_SHIFT: u32 = 0;
pub const CAU_AESC_CA_COUNT: u32 = 9;
pub const CAU_AESIC_CASR_IC_MASK: u32 = 1;
pub const CAU_AESIC_CASR_IC_SHIFT: u32 = 0;
pub const CAU_AESIC_CASR_DPE_MASK: u32 = 2;
pub const CAU_AESIC_CASR_DPE_SHIFT: u32 = 1;
pub const CAU_AESIC_CASR_VER_MASK: u32 = 4026531840;
pub const CAU_AESIC_CASR_VER_SHIFT: u32 = 28;
pub const CAU_AESIC_CAA_ACC_MASK: u32 = 4294967295;
pub const CAU_AESIC_CAA_ACC_SHIFT: u32 = 0;
pub const CAU_AESIC_CA_CA0_MASK: u32 = 4294967295;
pub const CAU_AESIC_CA_CA0_SHIFT: u32 = 0;
pub const CAU_AESIC_CA_CA1_MASK: u32 = 4294967295;
pub const CAU_AESIC_CA_CA1_SHIFT: u32 = 0;
pub const CAU_AESIC_CA_CA2_MASK: u32 = 4294967295;
pub const CAU_AESIC_CA_CA2_SHIFT: u32 = 0;
pub const CAU_AESIC_CA_CA3_MASK: u32 = 4294967295;
pub const CAU_AESIC_CA_CA3_SHIFT: u32 = 0;
pub const CAU_AESIC_CA_CA4_MASK: u32 = 4294967295;
pub const CAU_AESIC_CA_CA4_SHIFT: u32 = 0;
pub const CAU_AESIC_CA_CA5_MASK: u32 = 4294967295;
pub const CAU_AESIC_CA_CA5_SHIFT: u32 = 0;
pub const CAU_AESIC_CA_CA6_MASK: u32 = 4294967295;
pub const CAU_AESIC_CA_CA6_SHIFT: u32 = 0;
pub const CAU_AESIC_CA_CA7_MASK: u32 = 4294967295;
pub const CAU_AESIC_CA_CA7_SHIFT: u32 = 0;
pub const CAU_AESIC_CA_CA8_MASK: u32 = 4294967295;
pub const CAU_AESIC_CA_CA8_SHIFT: u32 = 0;
pub const CAU_AESIC_CA_COUNT: u32 = 9;
pub const CAU_BASE: u32 = 3758624768;
#[doc = " CMP - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CMP_Type {
    #[doc = "< CMP Control Register 0, offset: 0x0"]
    pub CR0: u8,
    #[doc = "< CMP Control Register 1, offset: 0x1"]
    pub CR1: u8,
    #[doc = "< CMP Filter Period Register, offset: 0x2"]
    pub FPR: u8,
    #[doc = "< CMP Status and Control Register, offset: 0x3"]
    pub SCR: u8,
    #[doc = "< DAC Control Register, offset: 0x4"]
    pub DACCR: u8,
    #[doc = "< MUX Control Register, offset: 0x5"]
    pub MUXCR: u8,
}
#[test]
fn bindgen_test_layout_CMP_Type() {
    const UNINIT: ::std::mem::MaybeUninit<CMP_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CMP_Type>(),
        6usize,
        concat!("Size of: ", stringify!(CMP_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<CMP_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(CMP_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CMP_Type),
            "::",
            stringify!(CR0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CMP_Type),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPR) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CMP_Type),
            "::",
            stringify!(FPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SCR) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(CMP_Type),
            "::",
            stringify!(SCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DACCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CMP_Type),
            "::",
            stringify!(DACCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MUXCR) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CMP_Type),
            "::",
            stringify!(MUXCR)
        )
    );
}
pub const CMP_CR0_HYSTCTR_MASK: u32 = 3;
pub const CMP_CR0_HYSTCTR_SHIFT: u32 = 0;
pub const CMP_CR0_FILTER_CNT_MASK: u32 = 112;
pub const CMP_CR0_FILTER_CNT_SHIFT: u32 = 4;
pub const CMP_CR1_EN_MASK: u32 = 1;
pub const CMP_CR1_EN_SHIFT: u32 = 0;
pub const CMP_CR1_OPE_MASK: u32 = 2;
pub const CMP_CR1_OPE_SHIFT: u32 = 1;
pub const CMP_CR1_COS_MASK: u32 = 4;
pub const CMP_CR1_COS_SHIFT: u32 = 2;
pub const CMP_CR1_INV_MASK: u32 = 8;
pub const CMP_CR1_INV_SHIFT: u32 = 3;
pub const CMP_CR1_PMODE_MASK: u32 = 16;
pub const CMP_CR1_PMODE_SHIFT: u32 = 4;
pub const CMP_CR1_WE_MASK: u32 = 64;
pub const CMP_CR1_WE_SHIFT: u32 = 6;
pub const CMP_CR1_SE_MASK: u32 = 128;
pub const CMP_CR1_SE_SHIFT: u32 = 7;
pub const CMP_FPR_FILT_PER_MASK: u32 = 255;
pub const CMP_FPR_FILT_PER_SHIFT: u32 = 0;
pub const CMP_SCR_COUT_MASK: u32 = 1;
pub const CMP_SCR_COUT_SHIFT: u32 = 0;
pub const CMP_SCR_CFF_MASK: u32 = 2;
pub const CMP_SCR_CFF_SHIFT: u32 = 1;
pub const CMP_SCR_CFR_MASK: u32 = 4;
pub const CMP_SCR_CFR_SHIFT: u32 = 2;
pub const CMP_SCR_IEF_MASK: u32 = 8;
pub const CMP_SCR_IEF_SHIFT: u32 = 3;
pub const CMP_SCR_IER_MASK: u32 = 16;
pub const CMP_SCR_IER_SHIFT: u32 = 4;
pub const CMP_SCR_DMAEN_MASK: u32 = 64;
pub const CMP_SCR_DMAEN_SHIFT: u32 = 6;
pub const CMP_DACCR_VOSEL_MASK: u32 = 63;
pub const CMP_DACCR_VOSEL_SHIFT: u32 = 0;
pub const CMP_DACCR_VRSEL_MASK: u32 = 64;
pub const CMP_DACCR_VRSEL_SHIFT: u32 = 6;
pub const CMP_DACCR_DACEN_MASK: u32 = 128;
pub const CMP_DACCR_DACEN_SHIFT: u32 = 7;
pub const CMP_MUXCR_MSEL_MASK: u32 = 7;
pub const CMP_MUXCR_MSEL_SHIFT: u32 = 0;
pub const CMP_MUXCR_PSEL_MASK: u32 = 56;
pub const CMP_MUXCR_PSEL_SHIFT: u32 = 3;
pub const CMP_MUXCR_PSTM_MASK: u32 = 128;
pub const CMP_MUXCR_PSTM_SHIFT: u32 = 7;
pub const CMP0_BASE: u32 = 1074212864;
pub const CMP1_BASE: u32 = 1074212872;
pub const CMP2_BASE: u32 = 1074212880;
#[doc = " CMT - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CMT_Type {
    #[doc = "< CMT Carrier Generator High Data Register 1, offset: 0x0"]
    pub CGH1: u8,
    #[doc = "< CMT Carrier Generator Low Data Register 1, offset: 0x1"]
    pub CGL1: u8,
    #[doc = "< CMT Carrier Generator High Data Register 2, offset: 0x2"]
    pub CGH2: u8,
    #[doc = "< CMT Carrier Generator Low Data Register 2, offset: 0x3"]
    pub CGL2: u8,
    #[doc = "< CMT Output Control Register, offset: 0x4"]
    pub OC: u8,
    #[doc = "< CMT Modulator Status and Control Register, offset: 0x5"]
    pub MSC: u8,
    #[doc = "< CMT Modulator Data Register Mark High, offset: 0x6"]
    pub CMD1: u8,
    #[doc = "< CMT Modulator Data Register Mark Low, offset: 0x7"]
    pub CMD2: u8,
    #[doc = "< CMT Modulator Data Register Space High, offset: 0x8"]
    pub CMD3: u8,
    #[doc = "< CMT Modulator Data Register Space Low, offset: 0x9"]
    pub CMD4: u8,
    #[doc = "< CMT Primary Prescaler Register, offset: 0xA"]
    pub PPS: u8,
    #[doc = "< CMT Direct Memory Access Register, offset: 0xB"]
    pub DMA: u8,
}
#[test]
fn bindgen_test_layout_CMT_Type() {
    const UNINIT: ::std::mem::MaybeUninit<CMT_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CMT_Type>(),
        12usize,
        concat!("Size of: ", stringify!(CMT_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<CMT_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(CMT_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CGH1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(CGH1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CGL1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(CGL1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CGH2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(CGH2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CGL2) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(CGL2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OC) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(OC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MSC) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(MSC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMD1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(CMD1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMD2) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(CMD2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMD3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(CMD3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMD4) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(CMD4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PPS) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(PPS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMA) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(CMT_Type),
            "::",
            stringify!(DMA)
        )
    );
}
pub const CMT_CGH1_PH_MASK: u32 = 255;
pub const CMT_CGH1_PH_SHIFT: u32 = 0;
pub const CMT_CGL1_PL_MASK: u32 = 255;
pub const CMT_CGL1_PL_SHIFT: u32 = 0;
pub const CMT_CGH2_SH_MASK: u32 = 255;
pub const CMT_CGH2_SH_SHIFT: u32 = 0;
pub const CMT_CGL2_SL_MASK: u32 = 255;
pub const CMT_CGL2_SL_SHIFT: u32 = 0;
pub const CMT_OC_IROPEN_MASK: u32 = 32;
pub const CMT_OC_IROPEN_SHIFT: u32 = 5;
pub const CMT_OC_CMTPOL_MASK: u32 = 64;
pub const CMT_OC_CMTPOL_SHIFT: u32 = 6;
pub const CMT_OC_IROL_MASK: u32 = 128;
pub const CMT_OC_IROL_SHIFT: u32 = 7;
pub const CMT_MSC_MCGEN_MASK: u32 = 1;
pub const CMT_MSC_MCGEN_SHIFT: u32 = 0;
pub const CMT_MSC_EOCIE_MASK: u32 = 2;
pub const CMT_MSC_EOCIE_SHIFT: u32 = 1;
pub const CMT_MSC_FSK_MASK: u32 = 4;
pub const CMT_MSC_FSK_SHIFT: u32 = 2;
pub const CMT_MSC_BASE_MASK: u32 = 8;
pub const CMT_MSC_BASE_SHIFT: u32 = 3;
pub const CMT_MSC_EXSPC_MASK: u32 = 16;
pub const CMT_MSC_EXSPC_SHIFT: u32 = 4;
pub const CMT_MSC_CMTDIV_MASK: u32 = 96;
pub const CMT_MSC_CMTDIV_SHIFT: u32 = 5;
pub const CMT_MSC_EOCF_MASK: u32 = 128;
pub const CMT_MSC_EOCF_SHIFT: u32 = 7;
pub const CMT_CMD1_MB_MASK: u32 = 255;
pub const CMT_CMD1_MB_SHIFT: u32 = 0;
pub const CMT_CMD2_MB_MASK: u32 = 255;
pub const CMT_CMD2_MB_SHIFT: u32 = 0;
pub const CMT_CMD3_SB_MASK: u32 = 255;
pub const CMT_CMD3_SB_SHIFT: u32 = 0;
pub const CMT_CMD4_SB_MASK: u32 = 255;
pub const CMT_CMD4_SB_SHIFT: u32 = 0;
pub const CMT_PPS_PPSDIV_MASK: u32 = 15;
pub const CMT_PPS_PPSDIV_SHIFT: u32 = 0;
pub const CMT_DMA_DMA_MASK: u32 = 1;
pub const CMT_DMA_DMA_SHIFT: u32 = 0;
pub const CMT_BASE: u32 = 1074143232;
#[doc = " CRC - Register Layout Typedef"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CRC_Type {
    pub __bindgen_anon_1: CRC_Type__bindgen_ty_1,
    pub __bindgen_anon_2: CRC_Type__bindgen_ty_2,
    pub __bindgen_anon_3: CRC_Type__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CRC_Type__bindgen_ty_1 {
    pub ACCESS16BIT: CRC_Type__bindgen_ty_1__bindgen_ty_1,
    #[doc = "< CRC Data register, offset: 0x0"]
    pub DATA: u32,
    pub ACCESS8BIT: CRC_Type__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRC_Type__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "< CRC_DATAL register., offset: 0x0"]
    pub DATAL: u16,
    #[doc = "< CRC_DATAH register., offset: 0x2"]
    pub DATAH: u16,
}
#[test]
fn bindgen_test_layout_CRC_Type__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CRC_Type__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CRC_Type__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(CRC_Type__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CRC_Type__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(CRC_Type__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATAL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(DATAL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATAH) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(DATAH)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRC_Type__bindgen_ty_1__bindgen_ty_2 {
    #[doc = "< CRC_DATALL register., offset: 0x0"]
    pub DATALL: u8,
    #[doc = "< CRC_DATALU register., offset: 0x1"]
    pub DATALU: u8,
    #[doc = "< CRC_DATAHL register., offset: 0x2"]
    pub DATAHL: u8,
    #[doc = "< CRC_DATAHU register., offset: 0x3"]
    pub DATAHU: u8,
}
#[test]
fn bindgen_test_layout_CRC_Type__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<CRC_Type__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CRC_Type__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(CRC_Type__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CRC_Type__bindgen_ty_1__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CRC_Type__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATALL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(DATALL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATALU) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(DATALU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATAHL) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(DATAHL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATAHU) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(DATAHU)
        )
    );
}
#[test]
fn bindgen_test_layout_CRC_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CRC_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CRC_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(CRC_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CRC_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(CRC_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACCESS16BIT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_1),
            "::",
            stringify!(ACCESS16BIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATA) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_1),
            "::",
            stringify!(DATA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACCESS8BIT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_1),
            "::",
            stringify!(ACCESS8BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CRC_Type__bindgen_ty_2 {
    pub GPOLY_ACCESS16BIT: CRC_Type__bindgen_ty_2__bindgen_ty_1,
    #[doc = "< CRC Polynomial register, offset: 0x4"]
    pub GPOLY: u32,
    pub GPOLY_ACCESS8BIT: CRC_Type__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRC_Type__bindgen_ty_2__bindgen_ty_1 {
    #[doc = "< CRC_GPOLYL register., offset: 0x4"]
    pub GPOLYL: u16,
    #[doc = "< CRC_GPOLYH register., offset: 0x6"]
    pub GPOLYH: u16,
}
#[test]
fn bindgen_test_layout_CRC_Type__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CRC_Type__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CRC_Type__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(CRC_Type__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CRC_Type__bindgen_ty_2__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(CRC_Type__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPOLYL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(GPOLYL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPOLYH) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(GPOLYH)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRC_Type__bindgen_ty_2__bindgen_ty_2 {
    #[doc = "< CRC_GPOLYLL register., offset: 0x4"]
    pub GPOLYLL: u8,
    #[doc = "< CRC_GPOLYLU register., offset: 0x5"]
    pub GPOLYLU: u8,
    #[doc = "< CRC_GPOLYHL register., offset: 0x6"]
    pub GPOLYHL: u8,
    #[doc = "< CRC_GPOLYHU register., offset: 0x7"]
    pub GPOLYHU: u8,
}
#[test]
fn bindgen_test_layout_CRC_Type__bindgen_ty_2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<CRC_Type__bindgen_ty_2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CRC_Type__bindgen_ty_2__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(CRC_Type__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CRC_Type__bindgen_ty_2__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CRC_Type__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPOLYLL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(GPOLYLL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPOLYLU) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(GPOLYLU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPOLYHL) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(GPOLYHL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPOLYHU) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(GPOLYHU)
        )
    );
}
#[test]
fn bindgen_test_layout_CRC_Type__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<CRC_Type__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CRC_Type__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(CRC_Type__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<CRC_Type__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(CRC_Type__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPOLY_ACCESS16BIT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_2),
            "::",
            stringify!(GPOLY_ACCESS16BIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPOLY) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_2),
            "::",
            stringify!(GPOLY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPOLY_ACCESS8BIT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_2),
            "::",
            stringify!(GPOLY_ACCESS8BIT)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CRC_Type__bindgen_ty_3 {
    #[doc = "< CRC Control register, offset: 0x8"]
    pub CTRL: u32,
    pub CTRL_ACCESS8BIT: CRC_Type__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRC_Type__bindgen_ty_3__bindgen_ty_1 {
    pub RESERVED_0: [u8; 3usize],
    #[doc = "< CRC_CTRLHU register., offset: 0xB"]
    pub CTRLHU: u8,
}
#[test]
fn bindgen_test_layout_CRC_Type__bindgen_ty_3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CRC_Type__bindgen_ty_3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CRC_Type__bindgen_ty_3__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(CRC_Type__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CRC_Type__bindgen_ty_3__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CRC_Type__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTRLHU) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(CTRLHU)
        )
    );
}
#[test]
fn bindgen_test_layout_CRC_Type__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<CRC_Type__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CRC_Type__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(CRC_Type__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<CRC_Type__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(CRC_Type__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTRL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_3),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTRL_ACCESS8BIT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRC_Type__bindgen_ty_3),
            "::",
            stringify!(CTRL_ACCESS8BIT)
        )
    );
}
#[test]
fn bindgen_test_layout_CRC_Type() {
    assert_eq!(
        ::std::mem::size_of::<CRC_Type>(),
        12usize,
        concat!("Size of: ", stringify!(CRC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<CRC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CRC_Type))
    );
}
pub const CRC_DATAL_DATAL_MASK: u32 = 65535;
pub const CRC_DATAL_DATAL_SHIFT: u32 = 0;
pub const CRC_DATAH_DATAH_MASK: u32 = 65535;
pub const CRC_DATAH_DATAH_SHIFT: u32 = 0;
pub const CRC_DATA_LL_MASK: u32 = 255;
pub const CRC_DATA_LL_SHIFT: u32 = 0;
pub const CRC_DATA_LU_MASK: u32 = 65280;
pub const CRC_DATA_LU_SHIFT: u32 = 8;
pub const CRC_DATA_HL_MASK: u32 = 16711680;
pub const CRC_DATA_HL_SHIFT: u32 = 16;
pub const CRC_DATA_HU_MASK: u32 = 4278190080;
pub const CRC_DATA_HU_SHIFT: u32 = 24;
pub const CRC_DATALL_DATALL_MASK: u32 = 255;
pub const CRC_DATALL_DATALL_SHIFT: u32 = 0;
pub const CRC_DATALU_DATALU_MASK: u32 = 255;
pub const CRC_DATALU_DATALU_SHIFT: u32 = 0;
pub const CRC_DATAHL_DATAHL_MASK: u32 = 255;
pub const CRC_DATAHL_DATAHL_SHIFT: u32 = 0;
pub const CRC_DATAHU_DATAHU_MASK: u32 = 255;
pub const CRC_DATAHU_DATAHU_SHIFT: u32 = 0;
pub const CRC_GPOLYL_GPOLYL_MASK: u32 = 65535;
pub const CRC_GPOLYL_GPOLYL_SHIFT: u32 = 0;
pub const CRC_GPOLYH_GPOLYH_MASK: u32 = 65535;
pub const CRC_GPOLYH_GPOLYH_SHIFT: u32 = 0;
pub const CRC_GPOLY_LOW_MASK: u32 = 65535;
pub const CRC_GPOLY_LOW_SHIFT: u32 = 0;
pub const CRC_GPOLY_HIGH_MASK: u32 = 4294901760;
pub const CRC_GPOLY_HIGH_SHIFT: u32 = 16;
pub const CRC_GPOLYLL_GPOLYLL_MASK: u32 = 255;
pub const CRC_GPOLYLL_GPOLYLL_SHIFT: u32 = 0;
pub const CRC_GPOLYLU_GPOLYLU_MASK: u32 = 255;
pub const CRC_GPOLYLU_GPOLYLU_SHIFT: u32 = 0;
pub const CRC_GPOLYHL_GPOLYHL_MASK: u32 = 255;
pub const CRC_GPOLYHL_GPOLYHL_SHIFT: u32 = 0;
pub const CRC_GPOLYHU_GPOLYHU_MASK: u32 = 255;
pub const CRC_GPOLYHU_GPOLYHU_SHIFT: u32 = 0;
pub const CRC_CTRL_TCRC_MASK: u32 = 16777216;
pub const CRC_CTRL_TCRC_SHIFT: u32 = 24;
pub const CRC_CTRL_WAS_MASK: u32 = 33554432;
pub const CRC_CTRL_WAS_SHIFT: u32 = 25;
pub const CRC_CTRL_FXOR_MASK: u32 = 67108864;
pub const CRC_CTRL_FXOR_SHIFT: u32 = 26;
pub const CRC_CTRL_TOTR_MASK: u32 = 805306368;
pub const CRC_CTRL_TOTR_SHIFT: u32 = 28;
pub const CRC_CTRL_TOT_MASK: u32 = 3221225472;
pub const CRC_CTRL_TOT_SHIFT: u32 = 30;
pub const CRC_CTRLHU_TCRC_MASK: u32 = 1;
pub const CRC_CTRLHU_TCRC_SHIFT: u32 = 0;
pub const CRC_CTRLHU_WAS_MASK: u32 = 2;
pub const CRC_CTRLHU_WAS_SHIFT: u32 = 1;
pub const CRC_CTRLHU_FXOR_MASK: u32 = 4;
pub const CRC_CTRLHU_FXOR_SHIFT: u32 = 2;
pub const CRC_CTRLHU_TOTR_MASK: u32 = 48;
pub const CRC_CTRLHU_TOTR_SHIFT: u32 = 4;
pub const CRC_CTRLHU_TOT_MASK: u32 = 192;
pub const CRC_CTRLHU_TOT_SHIFT: u32 = 6;
pub const CRC_BASE: u32 = 1073946624;
#[doc = " DAC - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAC_Type {
    pub DAT: [DAC_Type__bindgen_ty_1; 16usize],
    #[doc = "< DAC Status Register, offset: 0x20"]
    pub SR: u8,
    #[doc = "< DAC Control Register, offset: 0x21"]
    pub C0: u8,
    #[doc = "< DAC Control Register 1, offset: 0x22"]
    pub C1: u8,
    #[doc = "< DAC Control Register 2, offset: 0x23"]
    pub C2: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAC_Type__bindgen_ty_1 {
    #[doc = "< DAC Data Low Register, array offset: 0x0, array step: 0x2"]
    pub DATL: u8,
    #[doc = "< DAC Data High Register, array offset: 0x1, array step: 0x2"]
    pub DATH: u8,
}
#[test]
fn bindgen_test_layout_DAC_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<DAC_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DAC_Type__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(DAC_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<DAC_Type__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(DAC_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_Type__bindgen_ty_1),
            "::",
            stringify!(DATL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATH) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_Type__bindgen_ty_1),
            "::",
            stringify!(DATH)
        )
    );
}
#[test]
fn bindgen_test_layout_DAC_Type() {
    const UNINIT: ::std::mem::MaybeUninit<DAC_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DAC_Type>(),
        36usize,
        concat!("Size of: ", stringify!(DAC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<DAC_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(DAC_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DAT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_Type),
            "::",
            stringify!(DAT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_Type),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C0) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_Type),
            "::",
            stringify!(C0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C1) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_Type),
            "::",
            stringify!(C1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C2) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(DAC_Type),
            "::",
            stringify!(C2)
        )
    );
}
pub const DAC_DATL_DATA0_MASK: u32 = 255;
pub const DAC_DATL_DATA0_SHIFT: u32 = 0;
pub const DAC_DATL_COUNT: u32 = 16;
pub const DAC_DATH_DATA1_MASK: u32 = 15;
pub const DAC_DATH_DATA1_SHIFT: u32 = 0;
pub const DAC_DATH_COUNT: u32 = 16;
pub const DAC_SR_DACBFRPBF_MASK: u32 = 1;
pub const DAC_SR_DACBFRPBF_SHIFT: u32 = 0;
pub const DAC_SR_DACBFRPTF_MASK: u32 = 2;
pub const DAC_SR_DACBFRPTF_SHIFT: u32 = 1;
pub const DAC_SR_DACBFWMF_MASK: u32 = 4;
pub const DAC_SR_DACBFWMF_SHIFT: u32 = 2;
pub const DAC_C0_DACBBIEN_MASK: u32 = 1;
pub const DAC_C0_DACBBIEN_SHIFT: u32 = 0;
pub const DAC_C0_DACBTIEN_MASK: u32 = 2;
pub const DAC_C0_DACBTIEN_SHIFT: u32 = 1;
pub const DAC_C0_DACBWIEN_MASK: u32 = 4;
pub const DAC_C0_DACBWIEN_SHIFT: u32 = 2;
pub const DAC_C0_LPEN_MASK: u32 = 8;
pub const DAC_C0_LPEN_SHIFT: u32 = 3;
pub const DAC_C0_DACSWTRG_MASK: u32 = 16;
pub const DAC_C0_DACSWTRG_SHIFT: u32 = 4;
pub const DAC_C0_DACTRGSEL_MASK: u32 = 32;
pub const DAC_C0_DACTRGSEL_SHIFT: u32 = 5;
pub const DAC_C0_DACRFS_MASK: u32 = 64;
pub const DAC_C0_DACRFS_SHIFT: u32 = 6;
pub const DAC_C0_DACEN_MASK: u32 = 128;
pub const DAC_C0_DACEN_SHIFT: u32 = 7;
pub const DAC_C1_DACBFEN_MASK: u32 = 1;
pub const DAC_C1_DACBFEN_SHIFT: u32 = 0;
pub const DAC_C1_DACBFMD_MASK: u32 = 6;
pub const DAC_C1_DACBFMD_SHIFT: u32 = 1;
pub const DAC_C1_DACBFWM_MASK: u32 = 24;
pub const DAC_C1_DACBFWM_SHIFT: u32 = 3;
pub const DAC_C1_DMAEN_MASK: u32 = 128;
pub const DAC_C1_DMAEN_SHIFT: u32 = 7;
pub const DAC_C2_DACBFUP_MASK: u32 = 15;
pub const DAC_C2_DACBFUP_SHIFT: u32 = 0;
pub const DAC_C2_DACBFRP_MASK: u32 = 240;
pub const DAC_C2_DACBFRP_SHIFT: u32 = 4;
pub const DAC0_BASE: u32 = 1074577408;
pub const DAC1_BASE: u32 = 1074581504;
#[doc = " DMA - Register Layout Typedef"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DMA_Type {
    #[doc = "< Control Register, offset: 0x0"]
    pub CR: u32,
    #[doc = "< Error Status Register, offset: 0x4"]
    pub ES: u32,
    pub RESERVED_0: [u8; 4usize],
    #[doc = "< Enable Request Register, offset: 0xC"]
    pub ERQ: u32,
    pub RESERVED_1: [u8; 4usize],
    #[doc = "< Enable Error Interrupt Register, offset: 0x14"]
    pub EEI: u32,
    #[doc = "< Clear Enable Error Interrupt Register, offset: 0x18"]
    pub CEEI: u8,
    #[doc = "< Set Enable Error Interrupt Register, offset: 0x19"]
    pub SEEI: u8,
    #[doc = "< Clear Enable Request Register, offset: 0x1A"]
    pub CERQ: u8,
    #[doc = "< Set Enable Request Register, offset: 0x1B"]
    pub SERQ: u8,
    #[doc = "< Clear DONE Status Bit Register, offset: 0x1C"]
    pub CDNE: u8,
    #[doc = "< Set START Bit Register, offset: 0x1D"]
    pub SSRT: u8,
    #[doc = "< Clear Error Register, offset: 0x1E"]
    pub CERR: u8,
    #[doc = "< Clear Interrupt Request Register, offset: 0x1F"]
    pub CINT: u8,
    pub RESERVED_2: [u8; 4usize],
    #[doc = "< Interrupt Request Register, offset: 0x24"]
    pub INT: u32,
    pub RESERVED_3: [u8; 4usize],
    #[doc = "< Error Register, offset: 0x2C"]
    pub ERR: u32,
    pub RESERVED_4: [u8; 4usize],
    #[doc = "< Hardware Request Status Register, offset: 0x34"]
    pub HRS: u32,
    pub RESERVED_5: [u8; 12usize],
    #[doc = "< Enable Asynchronous Request in Stop Register, offset: 0x44"]
    pub EARS: u32,
    pub RESERVED_6: [u8; 184usize],
    #[doc = "< Channel n Priority Register, offset: 0x100"]
    pub DCHPRI3: u8,
    #[doc = "< Channel n Priority Register, offset: 0x101"]
    pub DCHPRI2: u8,
    #[doc = "< Channel n Priority Register, offset: 0x102"]
    pub DCHPRI1: u8,
    #[doc = "< Channel n Priority Register, offset: 0x103"]
    pub DCHPRI0: u8,
    #[doc = "< Channel n Priority Register, offset: 0x104"]
    pub DCHPRI7: u8,
    #[doc = "< Channel n Priority Register, offset: 0x105"]
    pub DCHPRI6: u8,
    #[doc = "< Channel n Priority Register, offset: 0x106"]
    pub DCHPRI5: u8,
    #[doc = "< Channel n Priority Register, offset: 0x107"]
    pub DCHPRI4: u8,
    #[doc = "< Channel n Priority Register, offset: 0x108"]
    pub DCHPRI11: u8,
    #[doc = "< Channel n Priority Register, offset: 0x109"]
    pub DCHPRI10: u8,
    #[doc = "< Channel n Priority Register, offset: 0x10A"]
    pub DCHPRI9: u8,
    #[doc = "< Channel n Priority Register, offset: 0x10B"]
    pub DCHPRI8: u8,
    #[doc = "< Channel n Priority Register, offset: 0x10C"]
    pub DCHPRI15: u8,
    #[doc = "< Channel n Priority Register, offset: 0x10D"]
    pub DCHPRI14: u8,
    #[doc = "< Channel n Priority Register, offset: 0x10E"]
    pub DCHPRI13: u8,
    #[doc = "< Channel n Priority Register, offset: 0x10F"]
    pub DCHPRI12: u8,
    pub RESERVED_7: [u8; 3824usize],
    pub TCD: [DMA_Type__bindgen_ty_1; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DMA_Type__bindgen_ty_1 {
    #[doc = "< TCD Source Address, array offset: 0x1000, array step: 0x20"]
    pub SADDR: u32,
    #[doc = "< TCD Signed Source Address Offset, array offset: 0x1004, array step: 0x20"]
    pub SOFF: u16,
    #[doc = "< TCD Transfer Attributes, array offset: 0x1006, array step: 0x20"]
    pub ATTR: u16,
    pub __bindgen_anon_1: DMA_Type__bindgen_ty_1__bindgen_ty_1,
    #[doc = "< TCD Last Source Address Adjustment, array offset: 0x100C, array step: 0x20"]
    pub SLAST: u32,
    #[doc = "< TCD Destination Address, array offset: 0x1010, array step: 0x20"]
    pub DADDR: u32,
    #[doc = "< TCD Signed Destination Address Offset, array offset: 0x1014, array step: 0x20"]
    pub DOFF: u16,
    pub __bindgen_anon_2: DMA_Type__bindgen_ty_1__bindgen_ty_2,
    #[doc = "< TCD Last Destination Address Adjustment/Scatter Gather Address, array offset: 0x1018, array step: 0x20"]
    pub DLAST_SGA: u32,
    #[doc = "< TCD Control and Status, array offset: 0x101C, array step: 0x20"]
    pub CSR: u16,
    pub __bindgen_anon_3: DMA_Type__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DMA_Type__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "< TCD Minor Byte Count (Minor Loop Disabled), array offset: 0x1008, array step: 0x20"]
    pub NBYTES_MLNO: u32,
    #[doc = "< TCD Signed Minor Loop Offset (Minor Loop Enabled and Offset Disabled), array offset: 0x1008, array step: 0x20"]
    pub NBYTES_MLOFFNO: u32,
    #[doc = "< TCD Signed Minor Loop Offset (Minor Loop and Offset Enabled), array offset: 0x1008, array step: 0x20"]
    pub NBYTES_MLOFFYES: u32,
}
#[test]
fn bindgen_test_layout_DMA_Type__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<DMA_Type__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DMA_Type__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<DMA_Type__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NBYTES_MLNO) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(NBYTES_MLNO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NBYTES_MLOFFNO) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(NBYTES_MLOFFNO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NBYTES_MLOFFYES) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(NBYTES_MLOFFYES)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DMA_Type__bindgen_ty_1__bindgen_ty_2 {
    #[doc = "< TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled), array offset: 0x1016, array step: 0x20"]
    pub CITER_ELINKNO: u16,
    #[doc = "< TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled), array offset: 0x1016, array step: 0x20"]
    pub CITER_ELINKYES: u16,
}
#[test]
fn bindgen_test_layout_DMA_Type__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<DMA_Type__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DMA_Type__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<DMA_Type__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CITER_ELINKNO) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(CITER_ELINKNO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CITER_ELINKYES) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(CITER_ELINKYES)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DMA_Type__bindgen_ty_1__bindgen_ty_3 {
    #[doc = "< TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled), array offset: 0x101E, array step: 0x20"]
    pub BITER_ELINKNO: u16,
    #[doc = "< TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled), array offset: 0x101E, array step: 0x20"]
    pub BITER_ELINKYES: u16,
}
#[test]
fn bindgen_test_layout_DMA_Type__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<DMA_Type__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DMA_Type__bindgen_ty_1__bindgen_ty_3>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<DMA_Type__bindgen_ty_1__bindgen_ty_3>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BITER_ELINKNO) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(BITER_ELINKNO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BITER_ELINKYES) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(BITER_ELINKYES)
        )
    );
}
#[test]
fn bindgen_test_layout_DMA_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<DMA_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DMA_Type__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(DMA_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<DMA_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SADDR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1),
            "::",
            stringify!(SADDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SOFF) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1),
            "::",
            stringify!(SOFF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ATTR) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1),
            "::",
            stringify!(ATTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SLAST) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1),
            "::",
            stringify!(SLAST)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DADDR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1),
            "::",
            stringify!(DADDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DOFF) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1),
            "::",
            stringify!(DOFF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DLAST_SGA) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1),
            "::",
            stringify!(DLAST_SGA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type__bindgen_ty_1),
            "::",
            stringify!(CSR)
        )
    );
}
#[test]
fn bindgen_test_layout_DMA_Type() {
    const UNINIT: ::std::mem::MaybeUninit<DMA_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DMA_Type>(),
        4608usize,
        concat!("Size of: ", stringify!(DMA_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<DMA_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(DMA_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ES) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(ES)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ERQ) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(ERQ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EEI) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(EEI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CEEI) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(CEEI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SEEI) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(SEEI)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CERQ) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(CERQ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SERQ) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(SERQ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CDNE) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(CDNE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SSRT) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(SSRT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CERR) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(CERR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CINT) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(CINT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(RESERVED_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INT) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(INT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_3) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(RESERVED_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ERR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(ERR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_4) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(RESERVED_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HRS) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(HRS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_5) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(RESERVED_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EARS) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(EARS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_6) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(RESERVED_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI3) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI2) as usize - ptr as usize },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI1) as usize - ptr as usize },
        258usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI0) as usize - ptr as usize },
        259usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI7) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI6) as usize - ptr as usize },
        261usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI5) as usize - ptr as usize },
        262usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI4) as usize - ptr as usize },
        263usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI11) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI10) as usize - ptr as usize },
        265usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI9) as usize - ptr as usize },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI8) as usize - ptr as usize },
        267usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI15) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI14) as usize - ptr as usize },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI13) as usize - ptr as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCHPRI12) as usize - ptr as usize },
        271usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(DCHPRI12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_7) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(RESERVED_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCD) as usize - ptr as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(DMA_Type),
            "::",
            stringify!(TCD)
        )
    );
}
pub const DMA_CR_EDBG_MASK: u32 = 2;
pub const DMA_CR_EDBG_SHIFT: u32 = 1;
pub const DMA_CR_ERCA_MASK: u32 = 4;
pub const DMA_CR_ERCA_SHIFT: u32 = 2;
pub const DMA_CR_HOE_MASK: u32 = 16;
pub const DMA_CR_HOE_SHIFT: u32 = 4;
pub const DMA_CR_HALT_MASK: u32 = 32;
pub const DMA_CR_HALT_SHIFT: u32 = 5;
pub const DMA_CR_CLM_MASK: u32 = 64;
pub const DMA_CR_CLM_SHIFT: u32 = 6;
pub const DMA_CR_EMLM_MASK: u32 = 128;
pub const DMA_CR_EMLM_SHIFT: u32 = 7;
pub const DMA_CR_ECX_MASK: u32 = 65536;
pub const DMA_CR_ECX_SHIFT: u32 = 16;
pub const DMA_CR_CX_MASK: u32 = 131072;
pub const DMA_CR_CX_SHIFT: u32 = 17;
pub const DMA_ES_DBE_MASK: u32 = 1;
pub const DMA_ES_DBE_SHIFT: u32 = 0;
pub const DMA_ES_SBE_MASK: u32 = 2;
pub const DMA_ES_SBE_SHIFT: u32 = 1;
pub const DMA_ES_SGE_MASK: u32 = 4;
pub const DMA_ES_SGE_SHIFT: u32 = 2;
pub const DMA_ES_NCE_MASK: u32 = 8;
pub const DMA_ES_NCE_SHIFT: u32 = 3;
pub const DMA_ES_DOE_MASK: u32 = 16;
pub const DMA_ES_DOE_SHIFT: u32 = 4;
pub const DMA_ES_DAE_MASK: u32 = 32;
pub const DMA_ES_DAE_SHIFT: u32 = 5;
pub const DMA_ES_SOE_MASK: u32 = 64;
pub const DMA_ES_SOE_SHIFT: u32 = 6;
pub const DMA_ES_SAE_MASK: u32 = 128;
pub const DMA_ES_SAE_SHIFT: u32 = 7;
pub const DMA_ES_ERRCHN_MASK: u32 = 3840;
pub const DMA_ES_ERRCHN_SHIFT: u32 = 8;
pub const DMA_ES_CPE_MASK: u32 = 16384;
pub const DMA_ES_CPE_SHIFT: u32 = 14;
pub const DMA_ES_ECX_MASK: u32 = 65536;
pub const DMA_ES_ECX_SHIFT: u32 = 16;
pub const DMA_ES_VLD_MASK: u32 = 2147483648;
pub const DMA_ES_VLD_SHIFT: u32 = 31;
pub const DMA_ERQ_ERQ0_MASK: u32 = 1;
pub const DMA_ERQ_ERQ0_SHIFT: u32 = 0;
pub const DMA_ERQ_ERQ1_MASK: u32 = 2;
pub const DMA_ERQ_ERQ1_SHIFT: u32 = 1;
pub const DMA_ERQ_ERQ2_MASK: u32 = 4;
pub const DMA_ERQ_ERQ2_SHIFT: u32 = 2;
pub const DMA_ERQ_ERQ3_MASK: u32 = 8;
pub const DMA_ERQ_ERQ3_SHIFT: u32 = 3;
pub const DMA_ERQ_ERQ4_MASK: u32 = 16;
pub const DMA_ERQ_ERQ4_SHIFT: u32 = 4;
pub const DMA_ERQ_ERQ5_MASK: u32 = 32;
pub const DMA_ERQ_ERQ5_SHIFT: u32 = 5;
pub const DMA_ERQ_ERQ6_MASK: u32 = 64;
pub const DMA_ERQ_ERQ6_SHIFT: u32 = 6;
pub const DMA_ERQ_ERQ7_MASK: u32 = 128;
pub const DMA_ERQ_ERQ7_SHIFT: u32 = 7;
pub const DMA_ERQ_ERQ8_MASK: u32 = 256;
pub const DMA_ERQ_ERQ8_SHIFT: u32 = 8;
pub const DMA_ERQ_ERQ9_MASK: u32 = 512;
pub const DMA_ERQ_ERQ9_SHIFT: u32 = 9;
pub const DMA_ERQ_ERQ10_MASK: u32 = 1024;
pub const DMA_ERQ_ERQ10_SHIFT: u32 = 10;
pub const DMA_ERQ_ERQ11_MASK: u32 = 2048;
pub const DMA_ERQ_ERQ11_SHIFT: u32 = 11;
pub const DMA_ERQ_ERQ12_MASK: u32 = 4096;
pub const DMA_ERQ_ERQ12_SHIFT: u32 = 12;
pub const DMA_ERQ_ERQ13_MASK: u32 = 8192;
pub const DMA_ERQ_ERQ13_SHIFT: u32 = 13;
pub const DMA_ERQ_ERQ14_MASK: u32 = 16384;
pub const DMA_ERQ_ERQ14_SHIFT: u32 = 14;
pub const DMA_ERQ_ERQ15_MASK: u32 = 32768;
pub const DMA_ERQ_ERQ15_SHIFT: u32 = 15;
pub const DMA_EEI_EEI0_MASK: u32 = 1;
pub const DMA_EEI_EEI0_SHIFT: u32 = 0;
pub const DMA_EEI_EEI1_MASK: u32 = 2;
pub const DMA_EEI_EEI1_SHIFT: u32 = 1;
pub const DMA_EEI_EEI2_MASK: u32 = 4;
pub const DMA_EEI_EEI2_SHIFT: u32 = 2;
pub const DMA_EEI_EEI3_MASK: u32 = 8;
pub const DMA_EEI_EEI3_SHIFT: u32 = 3;
pub const DMA_EEI_EEI4_MASK: u32 = 16;
pub const DMA_EEI_EEI4_SHIFT: u32 = 4;
pub const DMA_EEI_EEI5_MASK: u32 = 32;
pub const DMA_EEI_EEI5_SHIFT: u32 = 5;
pub const DMA_EEI_EEI6_MASK: u32 = 64;
pub const DMA_EEI_EEI6_SHIFT: u32 = 6;
pub const DMA_EEI_EEI7_MASK: u32 = 128;
pub const DMA_EEI_EEI7_SHIFT: u32 = 7;
pub const DMA_EEI_EEI8_MASK: u32 = 256;
pub const DMA_EEI_EEI8_SHIFT: u32 = 8;
pub const DMA_EEI_EEI9_MASK: u32 = 512;
pub const DMA_EEI_EEI9_SHIFT: u32 = 9;
pub const DMA_EEI_EEI10_MASK: u32 = 1024;
pub const DMA_EEI_EEI10_SHIFT: u32 = 10;
pub const DMA_EEI_EEI11_MASK: u32 = 2048;
pub const DMA_EEI_EEI11_SHIFT: u32 = 11;
pub const DMA_EEI_EEI12_MASK: u32 = 4096;
pub const DMA_EEI_EEI12_SHIFT: u32 = 12;
pub const DMA_EEI_EEI13_MASK: u32 = 8192;
pub const DMA_EEI_EEI13_SHIFT: u32 = 13;
pub const DMA_EEI_EEI14_MASK: u32 = 16384;
pub const DMA_EEI_EEI14_SHIFT: u32 = 14;
pub const DMA_EEI_EEI15_MASK: u32 = 32768;
pub const DMA_EEI_EEI15_SHIFT: u32 = 15;
pub const DMA_CEEI_CEEI_MASK: u32 = 15;
pub const DMA_CEEI_CEEI_SHIFT: u32 = 0;
pub const DMA_CEEI_CAEE_MASK: u32 = 64;
pub const DMA_CEEI_CAEE_SHIFT: u32 = 6;
pub const DMA_CEEI_NOP_MASK: u32 = 128;
pub const DMA_CEEI_NOP_SHIFT: u32 = 7;
pub const DMA_SEEI_SEEI_MASK: u32 = 15;
pub const DMA_SEEI_SEEI_SHIFT: u32 = 0;
pub const DMA_SEEI_SAEE_MASK: u32 = 64;
pub const DMA_SEEI_SAEE_SHIFT: u32 = 6;
pub const DMA_SEEI_NOP_MASK: u32 = 128;
pub const DMA_SEEI_NOP_SHIFT: u32 = 7;
pub const DMA_CERQ_CERQ_MASK: u32 = 15;
pub const DMA_CERQ_CERQ_SHIFT: u32 = 0;
pub const DMA_CERQ_CAER_MASK: u32 = 64;
pub const DMA_CERQ_CAER_SHIFT: u32 = 6;
pub const DMA_CERQ_NOP_MASK: u32 = 128;
pub const DMA_CERQ_NOP_SHIFT: u32 = 7;
pub const DMA_SERQ_SERQ_MASK: u32 = 15;
pub const DMA_SERQ_SERQ_SHIFT: u32 = 0;
pub const DMA_SERQ_SAER_MASK: u32 = 64;
pub const DMA_SERQ_SAER_SHIFT: u32 = 6;
pub const DMA_SERQ_NOP_MASK: u32 = 128;
pub const DMA_SERQ_NOP_SHIFT: u32 = 7;
pub const DMA_CDNE_CDNE_MASK: u32 = 15;
pub const DMA_CDNE_CDNE_SHIFT: u32 = 0;
pub const DMA_CDNE_CADN_MASK: u32 = 64;
pub const DMA_CDNE_CADN_SHIFT: u32 = 6;
pub const DMA_CDNE_NOP_MASK: u32 = 128;
pub const DMA_CDNE_NOP_SHIFT: u32 = 7;
pub const DMA_SSRT_SSRT_MASK: u32 = 15;
pub const DMA_SSRT_SSRT_SHIFT: u32 = 0;
pub const DMA_SSRT_SAST_MASK: u32 = 64;
pub const DMA_SSRT_SAST_SHIFT: u32 = 6;
pub const DMA_SSRT_NOP_MASK: u32 = 128;
pub const DMA_SSRT_NOP_SHIFT: u32 = 7;
pub const DMA_CERR_CERR_MASK: u32 = 15;
pub const DMA_CERR_CERR_SHIFT: u32 = 0;
pub const DMA_CERR_CAEI_MASK: u32 = 64;
pub const DMA_CERR_CAEI_SHIFT: u32 = 6;
pub const DMA_CERR_NOP_MASK: u32 = 128;
pub const DMA_CERR_NOP_SHIFT: u32 = 7;
pub const DMA_CINT_CINT_MASK: u32 = 15;
pub const DMA_CINT_CINT_SHIFT: u32 = 0;
pub const DMA_CINT_CAIR_MASK: u32 = 64;
pub const DMA_CINT_CAIR_SHIFT: u32 = 6;
pub const DMA_CINT_NOP_MASK: u32 = 128;
pub const DMA_CINT_NOP_SHIFT: u32 = 7;
pub const DMA_INT_INT0_MASK: u32 = 1;
pub const DMA_INT_INT0_SHIFT: u32 = 0;
pub const DMA_INT_INT1_MASK: u32 = 2;
pub const DMA_INT_INT1_SHIFT: u32 = 1;
pub const DMA_INT_INT2_MASK: u32 = 4;
pub const DMA_INT_INT2_SHIFT: u32 = 2;
pub const DMA_INT_INT3_MASK: u32 = 8;
pub const DMA_INT_INT3_SHIFT: u32 = 3;
pub const DMA_INT_INT4_MASK: u32 = 16;
pub const DMA_INT_INT4_SHIFT: u32 = 4;
pub const DMA_INT_INT5_MASK: u32 = 32;
pub const DMA_INT_INT5_SHIFT: u32 = 5;
pub const DMA_INT_INT6_MASK: u32 = 64;
pub const DMA_INT_INT6_SHIFT: u32 = 6;
pub const DMA_INT_INT7_MASK: u32 = 128;
pub const DMA_INT_INT7_SHIFT: u32 = 7;
pub const DMA_INT_INT8_MASK: u32 = 256;
pub const DMA_INT_INT8_SHIFT: u32 = 8;
pub const DMA_INT_INT9_MASK: u32 = 512;
pub const DMA_INT_INT9_SHIFT: u32 = 9;
pub const DMA_INT_INT10_MASK: u32 = 1024;
pub const DMA_INT_INT10_SHIFT: u32 = 10;
pub const DMA_INT_INT11_MASK: u32 = 2048;
pub const DMA_INT_INT11_SHIFT: u32 = 11;
pub const DMA_INT_INT12_MASK: u32 = 4096;
pub const DMA_INT_INT12_SHIFT: u32 = 12;
pub const DMA_INT_INT13_MASK: u32 = 8192;
pub const DMA_INT_INT13_SHIFT: u32 = 13;
pub const DMA_INT_INT14_MASK: u32 = 16384;
pub const DMA_INT_INT14_SHIFT: u32 = 14;
pub const DMA_INT_INT15_MASK: u32 = 32768;
pub const DMA_INT_INT15_SHIFT: u32 = 15;
pub const DMA_ERR_ERR0_MASK: u32 = 1;
pub const DMA_ERR_ERR0_SHIFT: u32 = 0;
pub const DMA_ERR_ERR1_MASK: u32 = 2;
pub const DMA_ERR_ERR1_SHIFT: u32 = 1;
pub const DMA_ERR_ERR2_MASK: u32 = 4;
pub const DMA_ERR_ERR2_SHIFT: u32 = 2;
pub const DMA_ERR_ERR3_MASK: u32 = 8;
pub const DMA_ERR_ERR3_SHIFT: u32 = 3;
pub const DMA_ERR_ERR4_MASK: u32 = 16;
pub const DMA_ERR_ERR4_SHIFT: u32 = 4;
pub const DMA_ERR_ERR5_MASK: u32 = 32;
pub const DMA_ERR_ERR5_SHIFT: u32 = 5;
pub const DMA_ERR_ERR6_MASK: u32 = 64;
pub const DMA_ERR_ERR6_SHIFT: u32 = 6;
pub const DMA_ERR_ERR7_MASK: u32 = 128;
pub const DMA_ERR_ERR7_SHIFT: u32 = 7;
pub const DMA_ERR_ERR8_MASK: u32 = 256;
pub const DMA_ERR_ERR8_SHIFT: u32 = 8;
pub const DMA_ERR_ERR9_MASK: u32 = 512;
pub const DMA_ERR_ERR9_SHIFT: u32 = 9;
pub const DMA_ERR_ERR10_MASK: u32 = 1024;
pub const DMA_ERR_ERR10_SHIFT: u32 = 10;
pub const DMA_ERR_ERR11_MASK: u32 = 2048;
pub const DMA_ERR_ERR11_SHIFT: u32 = 11;
pub const DMA_ERR_ERR12_MASK: u32 = 4096;
pub const DMA_ERR_ERR12_SHIFT: u32 = 12;
pub const DMA_ERR_ERR13_MASK: u32 = 8192;
pub const DMA_ERR_ERR13_SHIFT: u32 = 13;
pub const DMA_ERR_ERR14_MASK: u32 = 16384;
pub const DMA_ERR_ERR14_SHIFT: u32 = 14;
pub const DMA_ERR_ERR15_MASK: u32 = 32768;
pub const DMA_ERR_ERR15_SHIFT: u32 = 15;
pub const DMA_HRS_HRS0_MASK: u32 = 1;
pub const DMA_HRS_HRS0_SHIFT: u32 = 0;
pub const DMA_HRS_HRS1_MASK: u32 = 2;
pub const DMA_HRS_HRS1_SHIFT: u32 = 1;
pub const DMA_HRS_HRS2_MASK: u32 = 4;
pub const DMA_HRS_HRS2_SHIFT: u32 = 2;
pub const DMA_HRS_HRS3_MASK: u32 = 8;
pub const DMA_HRS_HRS3_SHIFT: u32 = 3;
pub const DMA_HRS_HRS4_MASK: u32 = 16;
pub const DMA_HRS_HRS4_SHIFT: u32 = 4;
pub const DMA_HRS_HRS5_MASK: u32 = 32;
pub const DMA_HRS_HRS5_SHIFT: u32 = 5;
pub const DMA_HRS_HRS6_MASK: u32 = 64;
pub const DMA_HRS_HRS6_SHIFT: u32 = 6;
pub const DMA_HRS_HRS7_MASK: u32 = 128;
pub const DMA_HRS_HRS7_SHIFT: u32 = 7;
pub const DMA_HRS_HRS8_MASK: u32 = 256;
pub const DMA_HRS_HRS8_SHIFT: u32 = 8;
pub const DMA_HRS_HRS9_MASK: u32 = 512;
pub const DMA_HRS_HRS9_SHIFT: u32 = 9;
pub const DMA_HRS_HRS10_MASK: u32 = 1024;
pub const DMA_HRS_HRS10_SHIFT: u32 = 10;
pub const DMA_HRS_HRS11_MASK: u32 = 2048;
pub const DMA_HRS_HRS11_SHIFT: u32 = 11;
pub const DMA_HRS_HRS12_MASK: u32 = 4096;
pub const DMA_HRS_HRS12_SHIFT: u32 = 12;
pub const DMA_HRS_HRS13_MASK: u32 = 8192;
pub const DMA_HRS_HRS13_SHIFT: u32 = 13;
pub const DMA_HRS_HRS14_MASK: u32 = 16384;
pub const DMA_HRS_HRS14_SHIFT: u32 = 14;
pub const DMA_HRS_HRS15_MASK: u32 = 32768;
pub const DMA_HRS_HRS15_SHIFT: u32 = 15;
pub const DMA_EARS_EDREQ_0_MASK: u32 = 1;
pub const DMA_EARS_EDREQ_0_SHIFT: u32 = 0;
pub const DMA_EARS_EDREQ_1_MASK: u32 = 2;
pub const DMA_EARS_EDREQ_1_SHIFT: u32 = 1;
pub const DMA_EARS_EDREQ_2_MASK: u32 = 4;
pub const DMA_EARS_EDREQ_2_SHIFT: u32 = 2;
pub const DMA_EARS_EDREQ_3_MASK: u32 = 8;
pub const DMA_EARS_EDREQ_3_SHIFT: u32 = 3;
pub const DMA_DCHPRI3_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI3_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI3_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI3_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI3_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI3_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI2_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI2_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI2_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI2_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI2_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI2_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI1_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI1_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI1_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI1_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI1_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI1_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI0_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI0_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI0_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI0_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI0_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI0_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI7_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI7_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI7_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI7_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI7_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI7_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI6_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI6_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI6_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI6_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI6_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI6_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI5_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI5_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI5_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI5_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI5_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI5_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI4_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI4_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI4_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI4_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI4_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI4_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI11_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI11_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI11_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI11_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI11_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI11_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI10_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI10_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI10_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI10_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI10_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI10_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI9_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI9_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI9_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI9_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI9_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI9_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI8_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI8_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI8_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI8_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI8_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI8_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI15_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI15_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI15_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI15_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI15_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI15_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI14_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI14_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI14_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI14_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI14_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI14_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI13_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI13_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI13_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI13_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI13_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI13_ECP_SHIFT: u32 = 7;
pub const DMA_DCHPRI12_CHPRI_MASK: u32 = 15;
pub const DMA_DCHPRI12_CHPRI_SHIFT: u32 = 0;
pub const DMA_DCHPRI12_DPA_MASK: u32 = 64;
pub const DMA_DCHPRI12_DPA_SHIFT: u32 = 6;
pub const DMA_DCHPRI12_ECP_MASK: u32 = 128;
pub const DMA_DCHPRI12_ECP_SHIFT: u32 = 7;
pub const DMA_SADDR_SADDR_MASK: u32 = 4294967295;
pub const DMA_SADDR_SADDR_SHIFT: u32 = 0;
pub const DMA_SADDR_COUNT: u32 = 16;
pub const DMA_SOFF_SOFF_MASK: u32 = 65535;
pub const DMA_SOFF_SOFF_SHIFT: u32 = 0;
pub const DMA_SOFF_COUNT: u32 = 16;
pub const DMA_ATTR_DSIZE_MASK: u32 = 7;
pub const DMA_ATTR_DSIZE_SHIFT: u32 = 0;
pub const DMA_ATTR_DMOD_MASK: u32 = 248;
pub const DMA_ATTR_DMOD_SHIFT: u32 = 3;
pub const DMA_ATTR_SSIZE_MASK: u32 = 1792;
pub const DMA_ATTR_SSIZE_SHIFT: u32 = 8;
pub const DMA_ATTR_SMOD_MASK: u32 = 63488;
pub const DMA_ATTR_SMOD_SHIFT: u32 = 11;
pub const DMA_ATTR_COUNT: u32 = 16;
pub const DMA_NBYTES_MLNO_NBYTES_MASK: u32 = 4294967295;
pub const DMA_NBYTES_MLNO_NBYTES_SHIFT: u32 = 0;
pub const DMA_NBYTES_MLNO_COUNT: u32 = 16;
pub const DMA_NBYTES_MLOFFNO_NBYTES_MASK: u32 = 1073741823;
pub const DMA_NBYTES_MLOFFNO_NBYTES_SHIFT: u32 = 0;
pub const DMA_NBYTES_MLOFFNO_DMLOE_MASK: u32 = 1073741824;
pub const DMA_NBYTES_MLOFFNO_DMLOE_SHIFT: u32 = 30;
pub const DMA_NBYTES_MLOFFNO_SMLOE_MASK: u32 = 2147483648;
pub const DMA_NBYTES_MLOFFNO_SMLOE_SHIFT: u32 = 31;
pub const DMA_NBYTES_MLOFFNO_COUNT: u32 = 16;
pub const DMA_NBYTES_MLOFFYES_NBYTES_MASK: u32 = 1023;
pub const DMA_NBYTES_MLOFFYES_NBYTES_SHIFT: u32 = 0;
pub const DMA_NBYTES_MLOFFYES_MLOFF_MASK: u32 = 1073740800;
pub const DMA_NBYTES_MLOFFYES_MLOFF_SHIFT: u32 = 10;
pub const DMA_NBYTES_MLOFFYES_DMLOE_MASK: u32 = 1073741824;
pub const DMA_NBYTES_MLOFFYES_DMLOE_SHIFT: u32 = 30;
pub const DMA_NBYTES_MLOFFYES_SMLOE_MASK: u32 = 2147483648;
pub const DMA_NBYTES_MLOFFYES_SMLOE_SHIFT: u32 = 31;
pub const DMA_NBYTES_MLOFFYES_COUNT: u32 = 16;
pub const DMA_SLAST_SLAST_MASK: u32 = 4294967295;
pub const DMA_SLAST_SLAST_SHIFT: u32 = 0;
pub const DMA_SLAST_COUNT: u32 = 16;
pub const DMA_DADDR_DADDR_MASK: u32 = 4294967295;
pub const DMA_DADDR_DADDR_SHIFT: u32 = 0;
pub const DMA_DADDR_COUNT: u32 = 16;
pub const DMA_DOFF_DOFF_MASK: u32 = 65535;
pub const DMA_DOFF_DOFF_SHIFT: u32 = 0;
pub const DMA_DOFF_COUNT: u32 = 16;
pub const DMA_CITER_ELINKNO_CITER_MASK: u32 = 32767;
pub const DMA_CITER_ELINKNO_CITER_SHIFT: u32 = 0;
pub const DMA_CITER_ELINKNO_ELINK_MASK: u32 = 32768;
pub const DMA_CITER_ELINKNO_ELINK_SHIFT: u32 = 15;
pub const DMA_CITER_ELINKNO_COUNT: u32 = 16;
pub const DMA_CITER_ELINKYES_CITER_MASK: u32 = 511;
pub const DMA_CITER_ELINKYES_CITER_SHIFT: u32 = 0;
pub const DMA_CITER_ELINKYES_LINKCH_MASK: u32 = 7680;
pub const DMA_CITER_ELINKYES_LINKCH_SHIFT: u32 = 9;
pub const DMA_CITER_ELINKYES_ELINK_MASK: u32 = 32768;
pub const DMA_CITER_ELINKYES_ELINK_SHIFT: u32 = 15;
pub const DMA_CITER_ELINKYES_COUNT: u32 = 16;
pub const DMA_DLAST_SGA_DLASTSGA_MASK: u32 = 4294967295;
pub const DMA_DLAST_SGA_DLASTSGA_SHIFT: u32 = 0;
pub const DMA_DLAST_SGA_COUNT: u32 = 16;
pub const DMA_CSR_START_MASK: u32 = 1;
pub const DMA_CSR_START_SHIFT: u32 = 0;
pub const DMA_CSR_INTMAJOR_MASK: u32 = 2;
pub const DMA_CSR_INTMAJOR_SHIFT: u32 = 1;
pub const DMA_CSR_INTHALF_MASK: u32 = 4;
pub const DMA_CSR_INTHALF_SHIFT: u32 = 2;
pub const DMA_CSR_DREQ_MASK: u32 = 8;
pub const DMA_CSR_DREQ_SHIFT: u32 = 3;
pub const DMA_CSR_ESG_MASK: u32 = 16;
pub const DMA_CSR_ESG_SHIFT: u32 = 4;
pub const DMA_CSR_MAJORELINK_MASK: u32 = 32;
pub const DMA_CSR_MAJORELINK_SHIFT: u32 = 5;
pub const DMA_CSR_ACTIVE_MASK: u32 = 64;
pub const DMA_CSR_ACTIVE_SHIFT: u32 = 6;
pub const DMA_CSR_DONE_MASK: u32 = 128;
pub const DMA_CSR_DONE_SHIFT: u32 = 7;
pub const DMA_CSR_MAJORLINKCH_MASK: u32 = 3840;
pub const DMA_CSR_MAJORLINKCH_SHIFT: u32 = 8;
pub const DMA_CSR_BWC_MASK: u32 = 49152;
pub const DMA_CSR_BWC_SHIFT: u32 = 14;
pub const DMA_CSR_COUNT: u32 = 16;
pub const DMA_BITER_ELINKNO_BITER_MASK: u32 = 32767;
pub const DMA_BITER_ELINKNO_BITER_SHIFT: u32 = 0;
pub const DMA_BITER_ELINKNO_ELINK_MASK: u32 = 32768;
pub const DMA_BITER_ELINKNO_ELINK_SHIFT: u32 = 15;
pub const DMA_BITER_ELINKNO_COUNT: u32 = 16;
pub const DMA_BITER_ELINKYES_BITER_MASK: u32 = 511;
pub const DMA_BITER_ELINKYES_BITER_SHIFT: u32 = 0;
pub const DMA_BITER_ELINKYES_LINKCH_MASK: u32 = 7680;
pub const DMA_BITER_ELINKYES_LINKCH_SHIFT: u32 = 9;
pub const DMA_BITER_ELINKYES_ELINK_MASK: u32 = 32768;
pub const DMA_BITER_ELINKYES_ELINK_SHIFT: u32 = 15;
pub const DMA_BITER_ELINKYES_COUNT: u32 = 16;
pub const DMA_BASE: u32 = 1073774592;
#[doc = " DMAMUX - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DMAMUX_Type {
    #[doc = "< Channel Configuration register, array offset: 0x0, array step: 0x1"]
    pub CHCFG: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_DMAMUX_Type() {
    const UNINIT: ::std::mem::MaybeUninit<DMAMUX_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DMAMUX_Type>(),
        16usize,
        concat!("Size of: ", stringify!(DMAMUX_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<DMAMUX_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(DMAMUX_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CHCFG) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DMAMUX_Type),
            "::",
            stringify!(CHCFG)
        )
    );
}
pub const DMAMUX_CHCFG_SOURCE_MASK: u32 = 63;
pub const DMAMUX_CHCFG_SOURCE_SHIFT: u32 = 0;
pub const DMAMUX_CHCFG_TRIG_MASK: u32 = 64;
pub const DMAMUX_CHCFG_TRIG_SHIFT: u32 = 6;
pub const DMAMUX_CHCFG_ENBL_MASK: u32 = 128;
pub const DMAMUX_CHCFG_ENBL_SHIFT: u32 = 7;
pub const DMAMUX_CHCFG_COUNT: u32 = 16;
pub const DMAMUX_BASE: u32 = 1073876992;
#[doc = " EWM - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EWM_Type {
    #[doc = "< Control Register, offset: 0x0"]
    pub CTRL: u8,
    #[doc = "< Service Register, offset: 0x1"]
    pub SERV: u8,
    #[doc = "< Compare Low Register, offset: 0x2"]
    pub CMPL: u8,
    #[doc = "< Compare High Register, offset: 0x3"]
    pub CMPH: u8,
}
#[test]
fn bindgen_test_layout_EWM_Type() {
    const UNINIT: ::std::mem::MaybeUninit<EWM_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<EWM_Type>(),
        4usize,
        concat!("Size of: ", stringify!(EWM_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<EWM_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(EWM_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTRL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EWM_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SERV) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(EWM_Type),
            "::",
            stringify!(SERV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMPL) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(EWM_Type),
            "::",
            stringify!(CMPL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMPH) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(EWM_Type),
            "::",
            stringify!(CMPH)
        )
    );
}
pub const EWM_CTRL_EWMEN_MASK: u32 = 1;
pub const EWM_CTRL_EWMEN_SHIFT: u32 = 0;
pub const EWM_CTRL_ASSIN_MASK: u32 = 2;
pub const EWM_CTRL_ASSIN_SHIFT: u32 = 1;
pub const EWM_CTRL_INEN_MASK: u32 = 4;
pub const EWM_CTRL_INEN_SHIFT: u32 = 2;
pub const EWM_CTRL_INTEN_MASK: u32 = 8;
pub const EWM_CTRL_INTEN_SHIFT: u32 = 3;
pub const EWM_SERV_SERVICE_MASK: u32 = 255;
pub const EWM_SERV_SERVICE_SHIFT: u32 = 0;
pub const EWM_CMPL_COMPAREL_MASK: u32 = 255;
pub const EWM_CMPL_COMPAREL_SHIFT: u32 = 0;
pub const EWM_CMPH_COMPAREH_MASK: u32 = 255;
pub const EWM_CMPH_COMPAREH_SHIFT: u32 = 0;
pub const EWM_BASE: u32 = 1074139136;
#[doc = " FB - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FB_Type {
    pub CS: [FB_Type__bindgen_ty_1; 6usize],
    pub RESERVED_0: [u8; 24usize],
    #[doc = "< Chip Select port Multiplexing Control Register, offset: 0x60"]
    pub CSPMCR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FB_Type__bindgen_ty_1 {
    #[doc = "< Chip Select Address Register, array offset: 0x0, array step: 0xC"]
    pub CSAR: u32,
    #[doc = "< Chip Select Mask Register, array offset: 0x4, array step: 0xC"]
    pub CSMR: u32,
    #[doc = "< Chip Select Control Register, array offset: 0x8, array step: 0xC"]
    pub CSCR: u32,
}
#[test]
fn bindgen_test_layout_FB_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<FB_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FB_Type__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(FB_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<FB_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(FB_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSAR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FB_Type__bindgen_ty_1),
            "::",
            stringify!(CSAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSMR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FB_Type__bindgen_ty_1),
            "::",
            stringify!(CSMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FB_Type__bindgen_ty_1),
            "::",
            stringify!(CSCR)
        )
    );
}
#[test]
fn bindgen_test_layout_FB_Type() {
    const UNINIT: ::std::mem::MaybeUninit<FB_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FB_Type>(),
        100usize,
        concat!("Size of: ", stringify!(FB_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<FB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(FB_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CS) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FB_Type),
            "::",
            stringify!(CS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FB_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSPMCR) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FB_Type),
            "::",
            stringify!(CSPMCR)
        )
    );
}
pub const FB_CSAR_BA_MASK: u32 = 4294901760;
pub const FB_CSAR_BA_SHIFT: u32 = 16;
pub const FB_CSAR_COUNT: u32 = 6;
pub const FB_CSMR_V_MASK: u32 = 1;
pub const FB_CSMR_V_SHIFT: u32 = 0;
pub const FB_CSMR_WP_MASK: u32 = 256;
pub const FB_CSMR_WP_SHIFT: u32 = 8;
pub const FB_CSMR_BAM_MASK: u32 = 4294901760;
pub const FB_CSMR_BAM_SHIFT: u32 = 16;
pub const FB_CSMR_COUNT: u32 = 6;
pub const FB_CSCR_BSTW_MASK: u32 = 8;
pub const FB_CSCR_BSTW_SHIFT: u32 = 3;
pub const FB_CSCR_BSTR_MASK: u32 = 16;
pub const FB_CSCR_BSTR_SHIFT: u32 = 4;
pub const FB_CSCR_BEM_MASK: u32 = 32;
pub const FB_CSCR_BEM_SHIFT: u32 = 5;
pub const FB_CSCR_PS_MASK: u32 = 192;
pub const FB_CSCR_PS_SHIFT: u32 = 6;
pub const FB_CSCR_AA_MASK: u32 = 256;
pub const FB_CSCR_AA_SHIFT: u32 = 8;
pub const FB_CSCR_BLS_MASK: u32 = 512;
pub const FB_CSCR_BLS_SHIFT: u32 = 9;
pub const FB_CSCR_WS_MASK: u32 = 64512;
pub const FB_CSCR_WS_SHIFT: u32 = 10;
pub const FB_CSCR_WRAH_MASK: u32 = 196608;
pub const FB_CSCR_WRAH_SHIFT: u32 = 16;
pub const FB_CSCR_RDAH_MASK: u32 = 786432;
pub const FB_CSCR_RDAH_SHIFT: u32 = 18;
pub const FB_CSCR_ASET_MASK: u32 = 3145728;
pub const FB_CSCR_ASET_SHIFT: u32 = 20;
pub const FB_CSCR_EXTS_MASK: u32 = 4194304;
pub const FB_CSCR_EXTS_SHIFT: u32 = 22;
pub const FB_CSCR_SWSEN_MASK: u32 = 8388608;
pub const FB_CSCR_SWSEN_SHIFT: u32 = 23;
pub const FB_CSCR_SWS_MASK: u32 = 4227858432;
pub const FB_CSCR_SWS_SHIFT: u32 = 26;
pub const FB_CSCR_COUNT: u32 = 6;
pub const FB_CSPMCR_GROUP5_MASK: u32 = 61440;
pub const FB_CSPMCR_GROUP5_SHIFT: u32 = 12;
pub const FB_CSPMCR_GROUP4_MASK: u32 = 983040;
pub const FB_CSPMCR_GROUP4_SHIFT: u32 = 16;
pub const FB_CSPMCR_GROUP3_MASK: u32 = 15728640;
pub const FB_CSPMCR_GROUP3_SHIFT: u32 = 20;
pub const FB_CSPMCR_GROUP2_MASK: u32 = 251658240;
pub const FB_CSPMCR_GROUP2_SHIFT: u32 = 24;
pub const FB_CSPMCR_GROUP1_MASK: u32 = 4026531840;
pub const FB_CSPMCR_GROUP1_SHIFT: u32 = 28;
pub const FB_BASE: u32 = 1073790976;
#[doc = " FMC - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_Type {
    #[doc = "< Flash Access Protection Register, offset: 0x0"]
    pub PFAPR: u32,
    #[doc = "< Flash Bank 0 Control Register, offset: 0x4"]
    pub PFB0CR: u32,
    #[doc = "< Flash Bank 1 Control Register, offset: 0x8"]
    pub PFB1CR: u32,
    pub RESERVED_0: [u8; 244usize],
    #[doc = "< Cache Tag Storage, array offset: 0x100, array step: 0x4"]
    pub TAGVDW0S: [u32; 4usize],
    #[doc = "< Cache Tag Storage, array offset: 0x110, array step: 0x4"]
    pub TAGVDW1S: [u32; 4usize],
    #[doc = "< Cache Tag Storage, array offset: 0x120, array step: 0x4"]
    pub TAGVDW2S: [u32; 4usize],
    #[doc = "< Cache Tag Storage, array offset: 0x130, array step: 0x4"]
    pub TAGVDW3S: [u32; 4usize],
    pub RESERVED_1: [u8; 192usize],
    pub SET: [[FMC_Type__bindgen_ty_1; 4usize]; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FMC_Type__bindgen_ty_1 {
    #[doc = "< Cache Data Storage (uppermost word), array offset: 0x200, array step: index*0x40, index2*0x10"]
    pub DATA_UM: u32,
    #[doc = "< Cache Data Storage (mid-upper word), array offset: 0x204, array step: index*0x40, index2*0x10"]
    pub DATA_MU: u32,
    #[doc = "< Cache Data Storage (mid-lower word), array offset: 0x208, array step: index*0x40, index2*0x10"]
    pub DATA_ML: u32,
    #[doc = "< Cache Data Storage (lowermost word), array offset: 0x20C, array step: index*0x40, index2*0x10"]
    pub DATA_LM: u32,
}
#[test]
fn bindgen_test_layout_FMC_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<FMC_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMC_Type__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(FMC_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<FMC_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATA_UM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type__bindgen_ty_1),
            "::",
            stringify!(DATA_UM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATA_MU) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type__bindgen_ty_1),
            "::",
            stringify!(DATA_MU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATA_ML) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type__bindgen_ty_1),
            "::",
            stringify!(DATA_ML)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATA_LM) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type__bindgen_ty_1),
            "::",
            stringify!(DATA_LM)
        )
    );
}
#[test]
fn bindgen_test_layout_FMC_Type() {
    const UNINIT: ::std::mem::MaybeUninit<FMC_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FMC_Type>(),
        768usize,
        concat!("Size of: ", stringify!(FMC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<FMC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(FMC_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PFAPR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type),
            "::",
            stringify!(PFAPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PFB0CR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type),
            "::",
            stringify!(PFB0CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PFB1CR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type),
            "::",
            stringify!(PFB1CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TAGVDW0S) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type),
            "::",
            stringify!(TAGVDW0S)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TAGVDW1S) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type),
            "::",
            stringify!(TAGVDW1S)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TAGVDW2S) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type),
            "::",
            stringify!(TAGVDW2S)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TAGVDW3S) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type),
            "::",
            stringify!(TAGVDW3S)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SET) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(FMC_Type),
            "::",
            stringify!(SET)
        )
    );
}
pub const FMC_PFAPR_M0AP_MASK: u32 = 3;
pub const FMC_PFAPR_M0AP_SHIFT: u32 = 0;
pub const FMC_PFAPR_M1AP_MASK: u32 = 12;
pub const FMC_PFAPR_M1AP_SHIFT: u32 = 2;
pub const FMC_PFAPR_M2AP_MASK: u32 = 48;
pub const FMC_PFAPR_M2AP_SHIFT: u32 = 4;
pub const FMC_PFAPR_M3AP_MASK: u32 = 192;
pub const FMC_PFAPR_M3AP_SHIFT: u32 = 6;
pub const FMC_PFAPR_M4AP_MASK: u32 = 768;
pub const FMC_PFAPR_M4AP_SHIFT: u32 = 8;
pub const FMC_PFAPR_M5AP_MASK: u32 = 3072;
pub const FMC_PFAPR_M5AP_SHIFT: u32 = 10;
pub const FMC_PFAPR_M6AP_MASK: u32 = 12288;
pub const FMC_PFAPR_M6AP_SHIFT: u32 = 12;
pub const FMC_PFAPR_M7AP_MASK: u32 = 49152;
pub const FMC_PFAPR_M7AP_SHIFT: u32 = 14;
pub const FMC_PFAPR_M0PFD_MASK: u32 = 65536;
pub const FMC_PFAPR_M0PFD_SHIFT: u32 = 16;
pub const FMC_PFAPR_M1PFD_MASK: u32 = 131072;
pub const FMC_PFAPR_M1PFD_SHIFT: u32 = 17;
pub const FMC_PFAPR_M2PFD_MASK: u32 = 262144;
pub const FMC_PFAPR_M2PFD_SHIFT: u32 = 18;
pub const FMC_PFAPR_M3PFD_MASK: u32 = 524288;
pub const FMC_PFAPR_M3PFD_SHIFT: u32 = 19;
pub const FMC_PFAPR_M4PFD_MASK: u32 = 1048576;
pub const FMC_PFAPR_M4PFD_SHIFT: u32 = 20;
pub const FMC_PFAPR_M5PFD_MASK: u32 = 2097152;
pub const FMC_PFAPR_M5PFD_SHIFT: u32 = 21;
pub const FMC_PFAPR_M6PFD_MASK: u32 = 4194304;
pub const FMC_PFAPR_M6PFD_SHIFT: u32 = 22;
pub const FMC_PFAPR_M7PFD_MASK: u32 = 8388608;
pub const FMC_PFAPR_M7PFD_SHIFT: u32 = 23;
pub const FMC_PFB0CR_B0SEBE_MASK: u32 = 1;
pub const FMC_PFB0CR_B0SEBE_SHIFT: u32 = 0;
pub const FMC_PFB0CR_B0IPE_MASK: u32 = 2;
pub const FMC_PFB0CR_B0IPE_SHIFT: u32 = 1;
pub const FMC_PFB0CR_B0DPE_MASK: u32 = 4;
pub const FMC_PFB0CR_B0DPE_SHIFT: u32 = 2;
pub const FMC_PFB0CR_B0ICE_MASK: u32 = 8;
pub const FMC_PFB0CR_B0ICE_SHIFT: u32 = 3;
pub const FMC_PFB0CR_B0DCE_MASK: u32 = 16;
pub const FMC_PFB0CR_B0DCE_SHIFT: u32 = 4;
pub const FMC_PFB0CR_CRC_MASK: u32 = 224;
pub const FMC_PFB0CR_CRC_SHIFT: u32 = 5;
pub const FMC_PFB0CR_B0MW_MASK: u32 = 393216;
pub const FMC_PFB0CR_B0MW_SHIFT: u32 = 17;
pub const FMC_PFB0CR_S_B_INV_MASK: u32 = 524288;
pub const FMC_PFB0CR_S_B_INV_SHIFT: u32 = 19;
pub const FMC_PFB0CR_CINV_WAY_MASK: u32 = 15728640;
pub const FMC_PFB0CR_CINV_WAY_SHIFT: u32 = 20;
pub const FMC_PFB0CR_CLCK_WAY_MASK: u32 = 251658240;
pub const FMC_PFB0CR_CLCK_WAY_SHIFT: u32 = 24;
pub const FMC_PFB0CR_B0RWSC_MASK: u32 = 4026531840;
pub const FMC_PFB0CR_B0RWSC_SHIFT: u32 = 28;
pub const FMC_PFB1CR_B1SEBE_MASK: u32 = 1;
pub const FMC_PFB1CR_B1SEBE_SHIFT: u32 = 0;
pub const FMC_PFB1CR_B1IPE_MASK: u32 = 2;
pub const FMC_PFB1CR_B1IPE_SHIFT: u32 = 1;
pub const FMC_PFB1CR_B1DPE_MASK: u32 = 4;
pub const FMC_PFB1CR_B1DPE_SHIFT: u32 = 2;
pub const FMC_PFB1CR_B1ICE_MASK: u32 = 8;
pub const FMC_PFB1CR_B1ICE_SHIFT: u32 = 3;
pub const FMC_PFB1CR_B1DCE_MASK: u32 = 16;
pub const FMC_PFB1CR_B1DCE_SHIFT: u32 = 4;
pub const FMC_PFB1CR_B1MW_MASK: u32 = 393216;
pub const FMC_PFB1CR_B1MW_SHIFT: u32 = 17;
pub const FMC_PFB1CR_B1RWSC_MASK: u32 = 4026531840;
pub const FMC_PFB1CR_B1RWSC_SHIFT: u32 = 28;
pub const FMC_TAGVDW0S_valid_MASK: u32 = 1;
pub const FMC_TAGVDW0S_valid_SHIFT: u32 = 0;
pub const FMC_TAGVDW0S_tag_MASK: u32 = 1048512;
pub const FMC_TAGVDW0S_tag_SHIFT: u32 = 6;
pub const FMC_TAGVDW0S_COUNT: u32 = 4;
pub const FMC_TAGVDW1S_valid_MASK: u32 = 1;
pub const FMC_TAGVDW1S_valid_SHIFT: u32 = 0;
pub const FMC_TAGVDW1S_tag_MASK: u32 = 1048512;
pub const FMC_TAGVDW1S_tag_SHIFT: u32 = 6;
pub const FMC_TAGVDW1S_COUNT: u32 = 4;
pub const FMC_TAGVDW2S_valid_MASK: u32 = 1;
pub const FMC_TAGVDW2S_valid_SHIFT: u32 = 0;
pub const FMC_TAGVDW2S_tag_MASK: u32 = 1048512;
pub const FMC_TAGVDW2S_tag_SHIFT: u32 = 6;
pub const FMC_TAGVDW2S_COUNT: u32 = 4;
pub const FMC_TAGVDW3S_valid_MASK: u32 = 1;
pub const FMC_TAGVDW3S_valid_SHIFT: u32 = 0;
pub const FMC_TAGVDW3S_tag_MASK: u32 = 1048512;
pub const FMC_TAGVDW3S_tag_SHIFT: u32 = 6;
pub const FMC_TAGVDW3S_COUNT: u32 = 4;
pub const FMC_DATA_UM_data_MASK: u32 = 4294967295;
pub const FMC_DATA_UM_data_SHIFT: u32 = 0;
pub const FMC_DATA_UM_COUNT: u32 = 4;
pub const FMC_DATA_UM_COUNT2: u32 = 4;
pub const FMC_DATA_MU_data_MASK: u32 = 4294967295;
pub const FMC_DATA_MU_data_SHIFT: u32 = 0;
pub const FMC_DATA_MU_COUNT: u32 = 4;
pub const FMC_DATA_MU_COUNT2: u32 = 4;
pub const FMC_DATA_ML_data_MASK: u32 = 4294967295;
pub const FMC_DATA_ML_data_SHIFT: u32 = 0;
pub const FMC_DATA_ML_COUNT: u32 = 4;
pub const FMC_DATA_ML_COUNT2: u32 = 4;
pub const FMC_DATA_LM_data_MASK: u32 = 4294967295;
pub const FMC_DATA_LM_data_SHIFT: u32 = 0;
pub const FMC_DATA_LM_COUNT: u32 = 4;
pub const FMC_DATA_LM_COUNT2: u32 = 4;
pub const FMC_BASE: u32 = 1073868800;
#[doc = " FTFE - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FTFE_Type {
    #[doc = "< Flash Status Register, offset: 0x0"]
    pub FSTAT: u8,
    #[doc = "< Flash Configuration Register, offset: 0x1"]
    pub FCNFG: u8,
    #[doc = "< Flash Security Register, offset: 0x2"]
    pub FSEC: u8,
    #[doc = "< Flash Option Register, offset: 0x3"]
    pub FOPT: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0x4"]
    pub FCCOB3: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0x5"]
    pub FCCOB2: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0x6"]
    pub FCCOB1: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0x7"]
    pub FCCOB0: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0x8"]
    pub FCCOB7: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0x9"]
    pub FCCOB6: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0xA"]
    pub FCCOB5: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0xB"]
    pub FCCOB4: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0xC"]
    pub FCCOBB: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0xD"]
    pub FCCOBA: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0xE"]
    pub FCCOB9: u8,
    #[doc = "< Flash Common Command Object Registers, offset: 0xF"]
    pub FCCOB8: u8,
    #[doc = "< Program Flash Protection Registers, offset: 0x10"]
    pub FPROT3: u8,
    #[doc = "< Program Flash Protection Registers, offset: 0x11"]
    pub FPROT2: u8,
    #[doc = "< Program Flash Protection Registers, offset: 0x12"]
    pub FPROT1: u8,
    #[doc = "< Program Flash Protection Registers, offset: 0x13"]
    pub FPROT0: u8,
    pub RESERVED_0: [u8; 2usize],
    #[doc = "< EEPROM Protection Register, offset: 0x16"]
    pub FEPROT: u8,
    #[doc = "< Data Flash Protection Register, offset: 0x17"]
    pub FDPROT: u8,
}
#[test]
fn bindgen_test_layout_FTFE_Type() {
    const UNINIT: ::std::mem::MaybeUninit<FTFE_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FTFE_Type>(),
        24usize,
        concat!("Size of: ", stringify!(FTFE_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<FTFE_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(FTFE_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FSTAT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FSTAT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCNFG) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCNFG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FSEC) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FSEC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FOPT) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FOPT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOB3) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOB3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOB2) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOB2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOB1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOB1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOB0) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOB0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOB7) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOB7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOB6) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOB6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOB5) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOB5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOB4) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOB4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOBB) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOBB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOBA) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOBA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOB9) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOB9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCCOB8) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FCCOB8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPROT3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FPROT3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPROT2) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FPROT2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPROT1) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FPROT1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPROT0) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FPROT0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FEPROT) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FEPROT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FDPROT) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(FTFE_Type),
            "::",
            stringify!(FDPROT)
        )
    );
}
pub const FTFE_FSTAT_MGSTAT0_MASK: u32 = 1;
pub const FTFE_FSTAT_MGSTAT0_SHIFT: u32 = 0;
pub const FTFE_FSTAT_FPVIOL_MASK: u32 = 16;
pub const FTFE_FSTAT_FPVIOL_SHIFT: u32 = 4;
pub const FTFE_FSTAT_ACCERR_MASK: u32 = 32;
pub const FTFE_FSTAT_ACCERR_SHIFT: u32 = 5;
pub const FTFE_FSTAT_RDCOLERR_MASK: u32 = 64;
pub const FTFE_FSTAT_RDCOLERR_SHIFT: u32 = 6;
pub const FTFE_FSTAT_CCIF_MASK: u32 = 128;
pub const FTFE_FSTAT_CCIF_SHIFT: u32 = 7;
pub const FTFE_FCNFG_EEERDY_MASK: u32 = 1;
pub const FTFE_FCNFG_EEERDY_SHIFT: u32 = 0;
pub const FTFE_FCNFG_RAMRDY_MASK: u32 = 2;
pub const FTFE_FCNFG_RAMRDY_SHIFT: u32 = 1;
pub const FTFE_FCNFG_PFLSH_MASK: u32 = 4;
pub const FTFE_FCNFG_PFLSH_SHIFT: u32 = 2;
pub const FTFE_FCNFG_SWAP_MASK: u32 = 8;
pub const FTFE_FCNFG_SWAP_SHIFT: u32 = 3;
pub const FTFE_FCNFG_ERSSUSP_MASK: u32 = 16;
pub const FTFE_FCNFG_ERSSUSP_SHIFT: u32 = 4;
pub const FTFE_FCNFG_ERSAREQ_MASK: u32 = 32;
pub const FTFE_FCNFG_ERSAREQ_SHIFT: u32 = 5;
pub const FTFE_FCNFG_RDCOLLIE_MASK: u32 = 64;
pub const FTFE_FCNFG_RDCOLLIE_SHIFT: u32 = 6;
pub const FTFE_FCNFG_CCIE_MASK: u32 = 128;
pub const FTFE_FCNFG_CCIE_SHIFT: u32 = 7;
pub const FTFE_FSEC_SEC_MASK: u32 = 3;
pub const FTFE_FSEC_SEC_SHIFT: u32 = 0;
pub const FTFE_FSEC_FSLACC_MASK: u32 = 12;
pub const FTFE_FSEC_FSLACC_SHIFT: u32 = 2;
pub const FTFE_FSEC_MEEN_MASK: u32 = 48;
pub const FTFE_FSEC_MEEN_SHIFT: u32 = 4;
pub const FTFE_FSEC_KEYEN_MASK: u32 = 192;
pub const FTFE_FSEC_KEYEN_SHIFT: u32 = 6;
pub const FTFE_FOPT_OPT_MASK: u32 = 255;
pub const FTFE_FOPT_OPT_SHIFT: u32 = 0;
pub const FTFE_FCCOB3_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOB3_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FCCOB2_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOB2_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FCCOB1_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOB1_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FCCOB0_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOB0_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FCCOB7_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOB7_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FCCOB6_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOB6_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FCCOB5_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOB5_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FCCOB4_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOB4_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FCCOBB_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOBB_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FCCOBA_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOBA_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FCCOB9_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOB9_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FCCOB8_CCOBn_MASK: u32 = 255;
pub const FTFE_FCCOB8_CCOBn_SHIFT: u32 = 0;
pub const FTFE_FPROT3_PROT_MASK: u32 = 255;
pub const FTFE_FPROT3_PROT_SHIFT: u32 = 0;
pub const FTFE_FPROT2_PROT_MASK: u32 = 255;
pub const FTFE_FPROT2_PROT_SHIFT: u32 = 0;
pub const FTFE_FPROT1_PROT_MASK: u32 = 255;
pub const FTFE_FPROT1_PROT_SHIFT: u32 = 0;
pub const FTFE_FPROT0_PROT_MASK: u32 = 255;
pub const FTFE_FPROT0_PROT_SHIFT: u32 = 0;
pub const FTFE_FEPROT_EPROT_MASK: u32 = 255;
pub const FTFE_FEPROT_EPROT_SHIFT: u32 = 0;
pub const FTFE_FDPROT_DPROT_MASK: u32 = 255;
pub const FTFE_FDPROT_DPROT_SHIFT: u32 = 0;
pub const FTFE_BASE: u32 = 1073872896;
#[doc = " FTM - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FTM_Type {
    #[doc = "< Status And Control, offset: 0x0"]
    pub SC: u32,
    #[doc = "< Counter, offset: 0x4"]
    pub CNT: u32,
    #[doc = "< Modulo, offset: 0x8"]
    pub MOD: u32,
    pub CONTROLS: [FTM_Type__bindgen_ty_1; 8usize],
    #[doc = "< Counter Initial Value, offset: 0x4C"]
    pub CNTIN: u32,
    #[doc = "< Capture And Compare Status, offset: 0x50"]
    pub STATUS: u32,
    #[doc = "< Features Mode Selection, offset: 0x54"]
    pub MODE: u32,
    #[doc = "< Synchronization, offset: 0x58"]
    pub SYNC: u32,
    #[doc = "< Initial State For Channels Output, offset: 0x5C"]
    pub OUTINIT: u32,
    #[doc = "< Output Mask, offset: 0x60"]
    pub OUTMASK: u32,
    #[doc = "< Function For Linked Channels, offset: 0x64"]
    pub COMBINE: u32,
    #[doc = "< Deadtime Insertion Control, offset: 0x68"]
    pub DEADTIME: u32,
    #[doc = "< FTM External Trigger, offset: 0x6C"]
    pub EXTTRIG: u32,
    #[doc = "< Channels Polarity, offset: 0x70"]
    pub POL: u32,
    #[doc = "< Fault Mode Status, offset: 0x74"]
    pub FMS: u32,
    #[doc = "< Input Capture Filter Control, offset: 0x78"]
    pub FILTER: u32,
    #[doc = "< Fault Control, offset: 0x7C"]
    pub FLTCTRL: u32,
    #[doc = "< Quadrature Decoder Control And Status, offset: 0x80"]
    pub QDCTRL: u32,
    #[doc = "< Configuration, offset: 0x84"]
    pub CONF: u32,
    #[doc = "< FTM Fault Input Polarity, offset: 0x88"]
    pub FLTPOL: u32,
    #[doc = "< Synchronization Configuration, offset: 0x8C"]
    pub SYNCONF: u32,
    #[doc = "< FTM Inverting Control, offset: 0x90"]
    pub INVCTRL: u32,
    #[doc = "< FTM Software Output Control, offset: 0x94"]
    pub SWOCTRL: u32,
    #[doc = "< FTM PWM Load, offset: 0x98"]
    pub PWMLOAD: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FTM_Type__bindgen_ty_1 {
    #[doc = "< Channel (n) Status And Control, array offset: 0xC, array step: 0x8"]
    pub CnSC: u32,
    #[doc = "< Channel (n) Value, array offset: 0x10, array step: 0x8"]
    pub CnV: u32,
}
#[test]
fn bindgen_test_layout_FTM_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<FTM_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FTM_Type__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(FTM_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<FTM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(FTM_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CnSC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type__bindgen_ty_1),
            "::",
            stringify!(CnSC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CnV) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type__bindgen_ty_1),
            "::",
            stringify!(CnV)
        )
    );
}
#[test]
fn bindgen_test_layout_FTM_Type() {
    const UNINIT: ::std::mem::MaybeUninit<FTM_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FTM_Type>(),
        156usize,
        concat!("Size of: ", stringify!(FTM_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<FTM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(FTM_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(SC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CNT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(CNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MOD) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(MOD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CONTROLS) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(CONTROLS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CNTIN) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(CNTIN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STATUS) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(STATUS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MODE) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(MODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SYNC) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(SYNC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OUTINIT) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(OUTINIT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OUTMASK) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(OUTMASK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).COMBINE) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(COMBINE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DEADTIME) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(DEADTIME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EXTTRIG) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(EXTTRIG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POL) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(POL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FMS) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(FMS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FILTER) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(FILTER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FLTCTRL) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(FLTCTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QDCTRL) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(QDCTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CONF) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(CONF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FLTPOL) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(FLTPOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SYNCONF) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(SYNCONF)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INVCTRL) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(INVCTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SWOCTRL) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(SWOCTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PWMLOAD) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(FTM_Type),
            "::",
            stringify!(PWMLOAD)
        )
    );
}
pub const FTM_SC_PS_MASK: u32 = 7;
pub const FTM_SC_PS_SHIFT: u32 = 0;
pub const FTM_SC_CLKS_MASK: u32 = 24;
pub const FTM_SC_CLKS_SHIFT: u32 = 3;
pub const FTM_SC_CPWMS_MASK: u32 = 32;
pub const FTM_SC_CPWMS_SHIFT: u32 = 5;
pub const FTM_SC_TOIE_MASK: u32 = 64;
pub const FTM_SC_TOIE_SHIFT: u32 = 6;
pub const FTM_SC_TOF_MASK: u32 = 128;
pub const FTM_SC_TOF_SHIFT: u32 = 7;
pub const FTM_CNT_COUNT_MASK: u32 = 65535;
pub const FTM_CNT_COUNT_SHIFT: u32 = 0;
pub const FTM_MOD_MOD_MASK: u32 = 65535;
pub const FTM_MOD_MOD_SHIFT: u32 = 0;
pub const FTM_CnSC_DMA_MASK: u32 = 1;
pub const FTM_CnSC_DMA_SHIFT: u32 = 0;
pub const FTM_CnSC_ELSA_MASK: u32 = 4;
pub const FTM_CnSC_ELSA_SHIFT: u32 = 2;
pub const FTM_CnSC_ELSB_MASK: u32 = 8;
pub const FTM_CnSC_ELSB_SHIFT: u32 = 3;
pub const FTM_CnSC_MSA_MASK: u32 = 16;
pub const FTM_CnSC_MSA_SHIFT: u32 = 4;
pub const FTM_CnSC_MSB_MASK: u32 = 32;
pub const FTM_CnSC_MSB_SHIFT: u32 = 5;
pub const FTM_CnSC_CHIE_MASK: u32 = 64;
pub const FTM_CnSC_CHIE_SHIFT: u32 = 6;
pub const FTM_CnSC_CHF_MASK: u32 = 128;
pub const FTM_CnSC_CHF_SHIFT: u32 = 7;
pub const FTM_CnSC_COUNT: u32 = 8;
pub const FTM_CnV_VAL_MASK: u32 = 65535;
pub const FTM_CnV_VAL_SHIFT: u32 = 0;
pub const FTM_CnV_COUNT: u32 = 8;
pub const FTM_CNTIN_INIT_MASK: u32 = 65535;
pub const FTM_CNTIN_INIT_SHIFT: u32 = 0;
pub const FTM_STATUS_CH0F_MASK: u32 = 1;
pub const FTM_STATUS_CH0F_SHIFT: u32 = 0;
pub const FTM_STATUS_CH1F_MASK: u32 = 2;
pub const FTM_STATUS_CH1F_SHIFT: u32 = 1;
pub const FTM_STATUS_CH2F_MASK: u32 = 4;
pub const FTM_STATUS_CH2F_SHIFT: u32 = 2;
pub const FTM_STATUS_CH3F_MASK: u32 = 8;
pub const FTM_STATUS_CH3F_SHIFT: u32 = 3;
pub const FTM_STATUS_CH4F_MASK: u32 = 16;
pub const FTM_STATUS_CH4F_SHIFT: u32 = 4;
pub const FTM_STATUS_CH5F_MASK: u32 = 32;
pub const FTM_STATUS_CH5F_SHIFT: u32 = 5;
pub const FTM_STATUS_CH6F_MASK: u32 = 64;
pub const FTM_STATUS_CH6F_SHIFT: u32 = 6;
pub const FTM_STATUS_CH7F_MASK: u32 = 128;
pub const FTM_STATUS_CH7F_SHIFT: u32 = 7;
pub const FTM_MODE_FTMEN_MASK: u32 = 1;
pub const FTM_MODE_FTMEN_SHIFT: u32 = 0;
pub const FTM_MODE_INIT_MASK: u32 = 2;
pub const FTM_MODE_INIT_SHIFT: u32 = 1;
pub const FTM_MODE_WPDIS_MASK: u32 = 4;
pub const FTM_MODE_WPDIS_SHIFT: u32 = 2;
pub const FTM_MODE_PWMSYNC_MASK: u32 = 8;
pub const FTM_MODE_PWMSYNC_SHIFT: u32 = 3;
pub const FTM_MODE_CAPTEST_MASK: u32 = 16;
pub const FTM_MODE_CAPTEST_SHIFT: u32 = 4;
pub const FTM_MODE_FAULTM_MASK: u32 = 96;
pub const FTM_MODE_FAULTM_SHIFT: u32 = 5;
pub const FTM_MODE_FAULTIE_MASK: u32 = 128;
pub const FTM_MODE_FAULTIE_SHIFT: u32 = 7;
pub const FTM_SYNC_CNTMIN_MASK: u32 = 1;
pub const FTM_SYNC_CNTMIN_SHIFT: u32 = 0;
pub const FTM_SYNC_CNTMAX_MASK: u32 = 2;
pub const FTM_SYNC_CNTMAX_SHIFT: u32 = 1;
pub const FTM_SYNC_REINIT_MASK: u32 = 4;
pub const FTM_SYNC_REINIT_SHIFT: u32 = 2;
pub const FTM_SYNC_SYNCHOM_MASK: u32 = 8;
pub const FTM_SYNC_SYNCHOM_SHIFT: u32 = 3;
pub const FTM_SYNC_TRIG0_MASK: u32 = 16;
pub const FTM_SYNC_TRIG0_SHIFT: u32 = 4;
pub const FTM_SYNC_TRIG1_MASK: u32 = 32;
pub const FTM_SYNC_TRIG1_SHIFT: u32 = 5;
pub const FTM_SYNC_TRIG2_MASK: u32 = 64;
pub const FTM_SYNC_TRIG2_SHIFT: u32 = 6;
pub const FTM_SYNC_SWSYNC_MASK: u32 = 128;
pub const FTM_SYNC_SWSYNC_SHIFT: u32 = 7;
pub const FTM_OUTINIT_CH0OI_MASK: u32 = 1;
pub const FTM_OUTINIT_CH0OI_SHIFT: u32 = 0;
pub const FTM_OUTINIT_CH1OI_MASK: u32 = 2;
pub const FTM_OUTINIT_CH1OI_SHIFT: u32 = 1;
pub const FTM_OUTINIT_CH2OI_MASK: u32 = 4;
pub const FTM_OUTINIT_CH2OI_SHIFT: u32 = 2;
pub const FTM_OUTINIT_CH3OI_MASK: u32 = 8;
pub const FTM_OUTINIT_CH3OI_SHIFT: u32 = 3;
pub const FTM_OUTINIT_CH4OI_MASK: u32 = 16;
pub const FTM_OUTINIT_CH4OI_SHIFT: u32 = 4;
pub const FTM_OUTINIT_CH5OI_MASK: u32 = 32;
pub const FTM_OUTINIT_CH5OI_SHIFT: u32 = 5;
pub const FTM_OUTINIT_CH6OI_MASK: u32 = 64;
pub const FTM_OUTINIT_CH6OI_SHIFT: u32 = 6;
pub const FTM_OUTINIT_CH7OI_MASK: u32 = 128;
pub const FTM_OUTINIT_CH7OI_SHIFT: u32 = 7;
pub const FTM_OUTMASK_CH0OM_MASK: u32 = 1;
pub const FTM_OUTMASK_CH0OM_SHIFT: u32 = 0;
pub const FTM_OUTMASK_CH1OM_MASK: u32 = 2;
pub const FTM_OUTMASK_CH1OM_SHIFT: u32 = 1;
pub const FTM_OUTMASK_CH2OM_MASK: u32 = 4;
pub const FTM_OUTMASK_CH2OM_SHIFT: u32 = 2;
pub const FTM_OUTMASK_CH3OM_MASK: u32 = 8;
pub const FTM_OUTMASK_CH3OM_SHIFT: u32 = 3;
pub const FTM_OUTMASK_CH4OM_MASK: u32 = 16;
pub const FTM_OUTMASK_CH4OM_SHIFT: u32 = 4;
pub const FTM_OUTMASK_CH5OM_MASK: u32 = 32;
pub const FTM_OUTMASK_CH5OM_SHIFT: u32 = 5;
pub const FTM_OUTMASK_CH6OM_MASK: u32 = 64;
pub const FTM_OUTMASK_CH6OM_SHIFT: u32 = 6;
pub const FTM_OUTMASK_CH7OM_MASK: u32 = 128;
pub const FTM_OUTMASK_CH7OM_SHIFT: u32 = 7;
pub const FTM_COMBINE_COMBINE0_MASK: u32 = 1;
pub const FTM_COMBINE_COMBINE0_SHIFT: u32 = 0;
pub const FTM_COMBINE_COMP0_MASK: u32 = 2;
pub const FTM_COMBINE_COMP0_SHIFT: u32 = 1;
pub const FTM_COMBINE_DECAPEN0_MASK: u32 = 4;
pub const FTM_COMBINE_DECAPEN0_SHIFT: u32 = 2;
pub const FTM_COMBINE_DECAP0_MASK: u32 = 8;
pub const FTM_COMBINE_DECAP0_SHIFT: u32 = 3;
pub const FTM_COMBINE_DTEN0_MASK: u32 = 16;
pub const FTM_COMBINE_DTEN0_SHIFT: u32 = 4;
pub const FTM_COMBINE_SYNCEN0_MASK: u32 = 32;
pub const FTM_COMBINE_SYNCEN0_SHIFT: u32 = 5;
pub const FTM_COMBINE_FAULTEN0_MASK: u32 = 64;
pub const FTM_COMBINE_FAULTEN0_SHIFT: u32 = 6;
pub const FTM_COMBINE_COMBINE1_MASK: u32 = 256;
pub const FTM_COMBINE_COMBINE1_SHIFT: u32 = 8;
pub const FTM_COMBINE_COMP1_MASK: u32 = 512;
pub const FTM_COMBINE_COMP1_SHIFT: u32 = 9;
pub const FTM_COMBINE_DECAPEN1_MASK: u32 = 1024;
pub const FTM_COMBINE_DECAPEN1_SHIFT: u32 = 10;
pub const FTM_COMBINE_DECAP1_MASK: u32 = 2048;
pub const FTM_COMBINE_DECAP1_SHIFT: u32 = 11;
pub const FTM_COMBINE_DTEN1_MASK: u32 = 4096;
pub const FTM_COMBINE_DTEN1_SHIFT: u32 = 12;
pub const FTM_COMBINE_SYNCEN1_MASK: u32 = 8192;
pub const FTM_COMBINE_SYNCEN1_SHIFT: u32 = 13;
pub const FTM_COMBINE_FAULTEN1_MASK: u32 = 16384;
pub const FTM_COMBINE_FAULTEN1_SHIFT: u32 = 14;
pub const FTM_COMBINE_COMBINE2_MASK: u32 = 65536;
pub const FTM_COMBINE_COMBINE2_SHIFT: u32 = 16;
pub const FTM_COMBINE_COMP2_MASK: u32 = 131072;
pub const FTM_COMBINE_COMP2_SHIFT: u32 = 17;
pub const FTM_COMBINE_DECAPEN2_MASK: u32 = 262144;
pub const FTM_COMBINE_DECAPEN2_SHIFT: u32 = 18;
pub const FTM_COMBINE_DECAP2_MASK: u32 = 524288;
pub const FTM_COMBINE_DECAP2_SHIFT: u32 = 19;
pub const FTM_COMBINE_DTEN2_MASK: u32 = 1048576;
pub const FTM_COMBINE_DTEN2_SHIFT: u32 = 20;
pub const FTM_COMBINE_SYNCEN2_MASK: u32 = 2097152;
pub const FTM_COMBINE_SYNCEN2_SHIFT: u32 = 21;
pub const FTM_COMBINE_FAULTEN2_MASK: u32 = 4194304;
pub const FTM_COMBINE_FAULTEN2_SHIFT: u32 = 22;
pub const FTM_COMBINE_COMBINE3_MASK: u32 = 16777216;
pub const FTM_COMBINE_COMBINE3_SHIFT: u32 = 24;
pub const FTM_COMBINE_COMP3_MASK: u32 = 33554432;
pub const FTM_COMBINE_COMP3_SHIFT: u32 = 25;
pub const FTM_COMBINE_DECAPEN3_MASK: u32 = 67108864;
pub const FTM_COMBINE_DECAPEN3_SHIFT: u32 = 26;
pub const FTM_COMBINE_DECAP3_MASK: u32 = 134217728;
pub const FTM_COMBINE_DECAP3_SHIFT: u32 = 27;
pub const FTM_COMBINE_DTEN3_MASK: u32 = 268435456;
pub const FTM_COMBINE_DTEN3_SHIFT: u32 = 28;
pub const FTM_COMBINE_SYNCEN3_MASK: u32 = 536870912;
pub const FTM_COMBINE_SYNCEN3_SHIFT: u32 = 29;
pub const FTM_COMBINE_FAULTEN3_MASK: u32 = 1073741824;
pub const FTM_COMBINE_FAULTEN3_SHIFT: u32 = 30;
pub const FTM_DEADTIME_DTVAL_MASK: u32 = 63;
pub const FTM_DEADTIME_DTVAL_SHIFT: u32 = 0;
pub const FTM_DEADTIME_DTPS_MASK: u32 = 192;
pub const FTM_DEADTIME_DTPS_SHIFT: u32 = 6;
pub const FTM_EXTTRIG_CH2TRIG_MASK: u32 = 1;
pub const FTM_EXTTRIG_CH2TRIG_SHIFT: u32 = 0;
pub const FTM_EXTTRIG_CH3TRIG_MASK: u32 = 2;
pub const FTM_EXTTRIG_CH3TRIG_SHIFT: u32 = 1;
pub const FTM_EXTTRIG_CH4TRIG_MASK: u32 = 4;
pub const FTM_EXTTRIG_CH4TRIG_SHIFT: u32 = 2;
pub const FTM_EXTTRIG_CH5TRIG_MASK: u32 = 8;
pub const FTM_EXTTRIG_CH5TRIG_SHIFT: u32 = 3;
pub const FTM_EXTTRIG_CH0TRIG_MASK: u32 = 16;
pub const FTM_EXTTRIG_CH0TRIG_SHIFT: u32 = 4;
pub const FTM_EXTTRIG_CH1TRIG_MASK: u32 = 32;
pub const FTM_EXTTRIG_CH1TRIG_SHIFT: u32 = 5;
pub const FTM_EXTTRIG_INITTRIGEN_MASK: u32 = 64;
pub const FTM_EXTTRIG_INITTRIGEN_SHIFT: u32 = 6;
pub const FTM_EXTTRIG_TRIGF_MASK: u32 = 128;
pub const FTM_EXTTRIG_TRIGF_SHIFT: u32 = 7;
pub const FTM_POL_POL0_MASK: u32 = 1;
pub const FTM_POL_POL0_SHIFT: u32 = 0;
pub const FTM_POL_POL1_MASK: u32 = 2;
pub const FTM_POL_POL1_SHIFT: u32 = 1;
pub const FTM_POL_POL2_MASK: u32 = 4;
pub const FTM_POL_POL2_SHIFT: u32 = 2;
pub const FTM_POL_POL3_MASK: u32 = 8;
pub const FTM_POL_POL3_SHIFT: u32 = 3;
pub const FTM_POL_POL4_MASK: u32 = 16;
pub const FTM_POL_POL4_SHIFT: u32 = 4;
pub const FTM_POL_POL5_MASK: u32 = 32;
pub const FTM_POL_POL5_SHIFT: u32 = 5;
pub const FTM_POL_POL6_MASK: u32 = 64;
pub const FTM_POL_POL6_SHIFT: u32 = 6;
pub const FTM_POL_POL7_MASK: u32 = 128;
pub const FTM_POL_POL7_SHIFT: u32 = 7;
pub const FTM_FMS_FAULTF0_MASK: u32 = 1;
pub const FTM_FMS_FAULTF0_SHIFT: u32 = 0;
pub const FTM_FMS_FAULTF1_MASK: u32 = 2;
pub const FTM_FMS_FAULTF1_SHIFT: u32 = 1;
pub const FTM_FMS_FAULTF2_MASK: u32 = 4;
pub const FTM_FMS_FAULTF2_SHIFT: u32 = 2;
pub const FTM_FMS_FAULTF3_MASK: u32 = 8;
pub const FTM_FMS_FAULTF3_SHIFT: u32 = 3;
pub const FTM_FMS_FAULTIN_MASK: u32 = 32;
pub const FTM_FMS_FAULTIN_SHIFT: u32 = 5;
pub const FTM_FMS_WPEN_MASK: u32 = 64;
pub const FTM_FMS_WPEN_SHIFT: u32 = 6;
pub const FTM_FMS_FAULTF_MASK: u32 = 128;
pub const FTM_FMS_FAULTF_SHIFT: u32 = 7;
pub const FTM_FILTER_CH0FVAL_MASK: u32 = 15;
pub const FTM_FILTER_CH0FVAL_SHIFT: u32 = 0;
pub const FTM_FILTER_CH1FVAL_MASK: u32 = 240;
pub const FTM_FILTER_CH1FVAL_SHIFT: u32 = 4;
pub const FTM_FILTER_CH2FVAL_MASK: u32 = 3840;
pub const FTM_FILTER_CH2FVAL_SHIFT: u32 = 8;
pub const FTM_FILTER_CH3FVAL_MASK: u32 = 61440;
pub const FTM_FILTER_CH3FVAL_SHIFT: u32 = 12;
pub const FTM_FLTCTRL_FAULT0EN_MASK: u32 = 1;
pub const FTM_FLTCTRL_FAULT0EN_SHIFT: u32 = 0;
pub const FTM_FLTCTRL_FAULT1EN_MASK: u32 = 2;
pub const FTM_FLTCTRL_FAULT1EN_SHIFT: u32 = 1;
pub const FTM_FLTCTRL_FAULT2EN_MASK: u32 = 4;
pub const FTM_FLTCTRL_FAULT2EN_SHIFT: u32 = 2;
pub const FTM_FLTCTRL_FAULT3EN_MASK: u32 = 8;
pub const FTM_FLTCTRL_FAULT3EN_SHIFT: u32 = 3;
pub const FTM_FLTCTRL_FFLTR0EN_MASK: u32 = 16;
pub const FTM_FLTCTRL_FFLTR0EN_SHIFT: u32 = 4;
pub const FTM_FLTCTRL_FFLTR1EN_MASK: u32 = 32;
pub const FTM_FLTCTRL_FFLTR1EN_SHIFT: u32 = 5;
pub const FTM_FLTCTRL_FFLTR2EN_MASK: u32 = 64;
pub const FTM_FLTCTRL_FFLTR2EN_SHIFT: u32 = 6;
pub const FTM_FLTCTRL_FFLTR3EN_MASK: u32 = 128;
pub const FTM_FLTCTRL_FFLTR3EN_SHIFT: u32 = 7;
pub const FTM_FLTCTRL_FFVAL_MASK: u32 = 3840;
pub const FTM_FLTCTRL_FFVAL_SHIFT: u32 = 8;
pub const FTM_QDCTRL_QUADEN_MASK: u32 = 1;
pub const FTM_QDCTRL_QUADEN_SHIFT: u32 = 0;
pub const FTM_QDCTRL_TOFDIR_MASK: u32 = 2;
pub const FTM_QDCTRL_TOFDIR_SHIFT: u32 = 1;
pub const FTM_QDCTRL_QUADIR_MASK: u32 = 4;
pub const FTM_QDCTRL_QUADIR_SHIFT: u32 = 2;
pub const FTM_QDCTRL_QUADMODE_MASK: u32 = 8;
pub const FTM_QDCTRL_QUADMODE_SHIFT: u32 = 3;
pub const FTM_QDCTRL_PHBPOL_MASK: u32 = 16;
pub const FTM_QDCTRL_PHBPOL_SHIFT: u32 = 4;
pub const FTM_QDCTRL_PHAPOL_MASK: u32 = 32;
pub const FTM_QDCTRL_PHAPOL_SHIFT: u32 = 5;
pub const FTM_QDCTRL_PHBFLTREN_MASK: u32 = 64;
pub const FTM_QDCTRL_PHBFLTREN_SHIFT: u32 = 6;
pub const FTM_QDCTRL_PHAFLTREN_MASK: u32 = 128;
pub const FTM_QDCTRL_PHAFLTREN_SHIFT: u32 = 7;
pub const FTM_CONF_NUMTOF_MASK: u32 = 31;
pub const FTM_CONF_NUMTOF_SHIFT: u32 = 0;
pub const FTM_CONF_BDMMODE_MASK: u32 = 192;
pub const FTM_CONF_BDMMODE_SHIFT: u32 = 6;
pub const FTM_CONF_GTBEEN_MASK: u32 = 512;
pub const FTM_CONF_GTBEEN_SHIFT: u32 = 9;
pub const FTM_CONF_GTBEOUT_MASK: u32 = 1024;
pub const FTM_CONF_GTBEOUT_SHIFT: u32 = 10;
pub const FTM_FLTPOL_FLT0POL_MASK: u32 = 1;
pub const FTM_FLTPOL_FLT0POL_SHIFT: u32 = 0;
pub const FTM_FLTPOL_FLT1POL_MASK: u32 = 2;
pub const FTM_FLTPOL_FLT1POL_SHIFT: u32 = 1;
pub const FTM_FLTPOL_FLT2POL_MASK: u32 = 4;
pub const FTM_FLTPOL_FLT2POL_SHIFT: u32 = 2;
pub const FTM_FLTPOL_FLT3POL_MASK: u32 = 8;
pub const FTM_FLTPOL_FLT3POL_SHIFT: u32 = 3;
pub const FTM_SYNCONF_HWTRIGMODE_MASK: u32 = 1;
pub const FTM_SYNCONF_HWTRIGMODE_SHIFT: u32 = 0;
pub const FTM_SYNCONF_CNTINC_MASK: u32 = 4;
pub const FTM_SYNCONF_CNTINC_SHIFT: u32 = 2;
pub const FTM_SYNCONF_INVC_MASK: u32 = 16;
pub const FTM_SYNCONF_INVC_SHIFT: u32 = 4;
pub const FTM_SYNCONF_SWOC_MASK: u32 = 32;
pub const FTM_SYNCONF_SWOC_SHIFT: u32 = 5;
pub const FTM_SYNCONF_SYNCMODE_MASK: u32 = 128;
pub const FTM_SYNCONF_SYNCMODE_SHIFT: u32 = 7;
pub const FTM_SYNCONF_SWRSTCNT_MASK: u32 = 256;
pub const FTM_SYNCONF_SWRSTCNT_SHIFT: u32 = 8;
pub const FTM_SYNCONF_SWWRBUF_MASK: u32 = 512;
pub const FTM_SYNCONF_SWWRBUF_SHIFT: u32 = 9;
pub const FTM_SYNCONF_SWOM_MASK: u32 = 1024;
pub const FTM_SYNCONF_SWOM_SHIFT: u32 = 10;
pub const FTM_SYNCONF_SWINVC_MASK: u32 = 2048;
pub const FTM_SYNCONF_SWINVC_SHIFT: u32 = 11;
pub const FTM_SYNCONF_SWSOC_MASK: u32 = 4096;
pub const FTM_SYNCONF_SWSOC_SHIFT: u32 = 12;
pub const FTM_SYNCONF_HWRSTCNT_MASK: u32 = 65536;
pub const FTM_SYNCONF_HWRSTCNT_SHIFT: u32 = 16;
pub const FTM_SYNCONF_HWWRBUF_MASK: u32 = 131072;
pub const FTM_SYNCONF_HWWRBUF_SHIFT: u32 = 17;
pub const FTM_SYNCONF_HWOM_MASK: u32 = 262144;
pub const FTM_SYNCONF_HWOM_SHIFT: u32 = 18;
pub const FTM_SYNCONF_HWINVC_MASK: u32 = 524288;
pub const FTM_SYNCONF_HWINVC_SHIFT: u32 = 19;
pub const FTM_SYNCONF_HWSOC_MASK: u32 = 1048576;
pub const FTM_SYNCONF_HWSOC_SHIFT: u32 = 20;
pub const FTM_INVCTRL_INV0EN_MASK: u32 = 1;
pub const FTM_INVCTRL_INV0EN_SHIFT: u32 = 0;
pub const FTM_INVCTRL_INV1EN_MASK: u32 = 2;
pub const FTM_INVCTRL_INV1EN_SHIFT: u32 = 1;
pub const FTM_INVCTRL_INV2EN_MASK: u32 = 4;
pub const FTM_INVCTRL_INV2EN_SHIFT: u32 = 2;
pub const FTM_INVCTRL_INV3EN_MASK: u32 = 8;
pub const FTM_INVCTRL_INV3EN_SHIFT: u32 = 3;
pub const FTM_SWOCTRL_CH0OC_MASK: u32 = 1;
pub const FTM_SWOCTRL_CH0OC_SHIFT: u32 = 0;
pub const FTM_SWOCTRL_CH1OC_MASK: u32 = 2;
pub const FTM_SWOCTRL_CH1OC_SHIFT: u32 = 1;
pub const FTM_SWOCTRL_CH2OC_MASK: u32 = 4;
pub const FTM_SWOCTRL_CH2OC_SHIFT: u32 = 2;
pub const FTM_SWOCTRL_CH3OC_MASK: u32 = 8;
pub const FTM_SWOCTRL_CH3OC_SHIFT: u32 = 3;
pub const FTM_SWOCTRL_CH4OC_MASK: u32 = 16;
pub const FTM_SWOCTRL_CH4OC_SHIFT: u32 = 4;
pub const FTM_SWOCTRL_CH5OC_MASK: u32 = 32;
pub const FTM_SWOCTRL_CH5OC_SHIFT: u32 = 5;
pub const FTM_SWOCTRL_CH6OC_MASK: u32 = 64;
pub const FTM_SWOCTRL_CH6OC_SHIFT: u32 = 6;
pub const FTM_SWOCTRL_CH7OC_MASK: u32 = 128;
pub const FTM_SWOCTRL_CH7OC_SHIFT: u32 = 7;
pub const FTM_SWOCTRL_CH0OCV_MASK: u32 = 256;
pub const FTM_SWOCTRL_CH0OCV_SHIFT: u32 = 8;
pub const FTM_SWOCTRL_CH1OCV_MASK: u32 = 512;
pub const FTM_SWOCTRL_CH1OCV_SHIFT: u32 = 9;
pub const FTM_SWOCTRL_CH2OCV_MASK: u32 = 1024;
pub const FTM_SWOCTRL_CH2OCV_SHIFT: u32 = 10;
pub const FTM_SWOCTRL_CH3OCV_MASK: u32 = 2048;
pub const FTM_SWOCTRL_CH3OCV_SHIFT: u32 = 11;
pub const FTM_SWOCTRL_CH4OCV_MASK: u32 = 4096;
pub const FTM_SWOCTRL_CH4OCV_SHIFT: u32 = 12;
pub const FTM_SWOCTRL_CH5OCV_MASK: u32 = 8192;
pub const FTM_SWOCTRL_CH5OCV_SHIFT: u32 = 13;
pub const FTM_SWOCTRL_CH6OCV_MASK: u32 = 16384;
pub const FTM_SWOCTRL_CH6OCV_SHIFT: u32 = 14;
pub const FTM_SWOCTRL_CH7OCV_MASK: u32 = 32768;
pub const FTM_SWOCTRL_CH7OCV_SHIFT: u32 = 15;
pub const FTM_PWMLOAD_CH0SEL_MASK: u32 = 1;
pub const FTM_PWMLOAD_CH0SEL_SHIFT: u32 = 0;
pub const FTM_PWMLOAD_CH1SEL_MASK: u32 = 2;
pub const FTM_PWMLOAD_CH1SEL_SHIFT: u32 = 1;
pub const FTM_PWMLOAD_CH2SEL_MASK: u32 = 4;
pub const FTM_PWMLOAD_CH2SEL_SHIFT: u32 = 2;
pub const FTM_PWMLOAD_CH3SEL_MASK: u32 = 8;
pub const FTM_PWMLOAD_CH3SEL_SHIFT: u32 = 3;
pub const FTM_PWMLOAD_CH4SEL_MASK: u32 = 16;
pub const FTM_PWMLOAD_CH4SEL_SHIFT: u32 = 4;
pub const FTM_PWMLOAD_CH5SEL_MASK: u32 = 32;
pub const FTM_PWMLOAD_CH5SEL_SHIFT: u32 = 5;
pub const FTM_PWMLOAD_CH6SEL_MASK: u32 = 64;
pub const FTM_PWMLOAD_CH6SEL_SHIFT: u32 = 6;
pub const FTM_PWMLOAD_CH7SEL_MASK: u32 = 128;
pub const FTM_PWMLOAD_CH7SEL_SHIFT: u32 = 7;
pub const FTM_PWMLOAD_LDOK_MASK: u32 = 512;
pub const FTM_PWMLOAD_LDOK_SHIFT: u32 = 9;
pub const FTM0_BASE: u32 = 1073971200;
pub const FTM1_BASE: u32 = 1073975296;
pub const FTM2_BASE: u32 = 1074495488;
pub const FTM3_BASE: u32 = 1074499584;
#[doc = " GPIO - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GPIO_Type {
    #[doc = "< Port Data Output Register, offset: 0x0"]
    pub PDOR: u32,
    #[doc = "< Port Set Output Register, offset: 0x4"]
    pub PSOR: u32,
    #[doc = "< Port Clear Output Register, offset: 0x8"]
    pub PCOR: u32,
    #[doc = "< Port Toggle Output Register, offset: 0xC"]
    pub PTOR: u32,
    #[doc = "< Port Data Input Register, offset: 0x10"]
    pub PDIR: u32,
    #[doc = "< Port Data Direction Register, offset: 0x14"]
    pub PDDR: u32,
}
#[test]
fn bindgen_test_layout_GPIO_Type() {
    const UNINIT: ::std::mem::MaybeUninit<GPIO_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GPIO_Type>(),
        24usize,
        concat!("Size of: ", stringify!(GPIO_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<GPIO_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(GPIO_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PDOR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_Type),
            "::",
            stringify!(PDOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PSOR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_Type),
            "::",
            stringify!(PSOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PCOR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_Type),
            "::",
            stringify!(PCOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PTOR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_Type),
            "::",
            stringify!(PTOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PDIR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_Type),
            "::",
            stringify!(PDIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PDDR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GPIO_Type),
            "::",
            stringify!(PDDR)
        )
    );
}
pub const GPIO_PDOR_PDO_MASK: u32 = 4294967295;
pub const GPIO_PDOR_PDO_SHIFT: u32 = 0;
pub const GPIO_PSOR_PTSO_MASK: u32 = 4294967295;
pub const GPIO_PSOR_PTSO_SHIFT: u32 = 0;
pub const GPIO_PCOR_PTCO_MASK: u32 = 4294967295;
pub const GPIO_PCOR_PTCO_SHIFT: u32 = 0;
pub const GPIO_PTOR_PTTO_MASK: u32 = 4294967295;
pub const GPIO_PTOR_PTTO_SHIFT: u32 = 0;
pub const GPIO_PDIR_PDI_MASK: u32 = 4294967295;
pub const GPIO_PDIR_PDI_SHIFT: u32 = 0;
pub const GPIO_PDDR_PDD_MASK: u32 = 4294967295;
pub const GPIO_PDDR_PDD_SHIFT: u32 = 0;
pub const GPIOA_BASE: u32 = 1074786304;
pub const GPIOB_BASE: u32 = 1074786368;
pub const GPIOC_BASE: u32 = 1074786432;
pub const GPIOD_BASE: u32 = 1074786496;
pub const GPIOE_BASE: u32 = 1074786560;
#[doc = " I2C - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2C_Type {
    #[doc = "< I2C Address Register 1, offset: 0x0"]
    pub A1: u8,
    #[doc = "< I2C Frequency Divider register, offset: 0x1"]
    pub F: u8,
    #[doc = "< I2C Control Register 1, offset: 0x2"]
    pub C1: u8,
    #[doc = "< I2C Status register, offset: 0x3"]
    pub S: u8,
    #[doc = "< I2C Data I/O register, offset: 0x4"]
    pub D: u8,
    #[doc = "< I2C Control Register 2, offset: 0x5"]
    pub C2: u8,
    #[doc = "< I2C Programmable Input Glitch Filter register, offset: 0x6"]
    pub FLT: u8,
    #[doc = "< I2C Range Address register, offset: 0x7"]
    pub RA: u8,
    #[doc = "< I2C SMBus Control and Status register, offset: 0x8"]
    pub SMB: u8,
    #[doc = "< I2C Address Register 2, offset: 0x9"]
    pub A2: u8,
    #[doc = "< I2C SCL Low Timeout Register High, offset: 0xA"]
    pub SLTH: u8,
    #[doc = "< I2C SCL Low Timeout Register Low, offset: 0xB"]
    pub SLTL: u8,
}
#[test]
fn bindgen_test_layout_I2C_Type() {
    const UNINIT: ::std::mem::MaybeUninit<I2C_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<I2C_Type>(),
        12usize,
        concat!("Size of: ", stringify!(I2C_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<I2C_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(I2C_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).A1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(A1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).F) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(F)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(C1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).S) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(S)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).D) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C2) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(C2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FLT) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(FLT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RA) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(RA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SMB) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(SMB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).A2) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(A2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SLTH) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(SLTH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SLTL) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(I2C_Type),
            "::",
            stringify!(SLTL)
        )
    );
}
pub const I2C_A1_AD_MASK: u32 = 254;
pub const I2C_A1_AD_SHIFT: u32 = 1;
pub const I2C_F_ICR_MASK: u32 = 63;
pub const I2C_F_ICR_SHIFT: u32 = 0;
pub const I2C_F_MULT_MASK: u32 = 192;
pub const I2C_F_MULT_SHIFT: u32 = 6;
pub const I2C_C1_DMAEN_MASK: u32 = 1;
pub const I2C_C1_DMAEN_SHIFT: u32 = 0;
pub const I2C_C1_WUEN_MASK: u32 = 2;
pub const I2C_C1_WUEN_SHIFT: u32 = 1;
pub const I2C_C1_RSTA_MASK: u32 = 4;
pub const I2C_C1_RSTA_SHIFT: u32 = 2;
pub const I2C_C1_TXAK_MASK: u32 = 8;
pub const I2C_C1_TXAK_SHIFT: u32 = 3;
pub const I2C_C1_TX_MASK: u32 = 16;
pub const I2C_C1_TX_SHIFT: u32 = 4;
pub const I2C_C1_MST_MASK: u32 = 32;
pub const I2C_C1_MST_SHIFT: u32 = 5;
pub const I2C_C1_IICIE_MASK: u32 = 64;
pub const I2C_C1_IICIE_SHIFT: u32 = 6;
pub const I2C_C1_IICEN_MASK: u32 = 128;
pub const I2C_C1_IICEN_SHIFT: u32 = 7;
pub const I2C_S_RXAK_MASK: u32 = 1;
pub const I2C_S_RXAK_SHIFT: u32 = 0;
pub const I2C_S_IICIF_MASK: u32 = 2;
pub const I2C_S_IICIF_SHIFT: u32 = 1;
pub const I2C_S_SRW_MASK: u32 = 4;
pub const I2C_S_SRW_SHIFT: u32 = 2;
pub const I2C_S_RAM_MASK: u32 = 8;
pub const I2C_S_RAM_SHIFT: u32 = 3;
pub const I2C_S_ARBL_MASK: u32 = 16;
pub const I2C_S_ARBL_SHIFT: u32 = 4;
pub const I2C_S_BUSY_MASK: u32 = 32;
pub const I2C_S_BUSY_SHIFT: u32 = 5;
pub const I2C_S_IAAS_MASK: u32 = 64;
pub const I2C_S_IAAS_SHIFT: u32 = 6;
pub const I2C_S_TCF_MASK: u32 = 128;
pub const I2C_S_TCF_SHIFT: u32 = 7;
pub const I2C_D_DATA_MASK: u32 = 255;
pub const I2C_D_DATA_SHIFT: u32 = 0;
pub const I2C_C2_AD_MASK: u32 = 7;
pub const I2C_C2_AD_SHIFT: u32 = 0;
pub const I2C_C2_RMEN_MASK: u32 = 8;
pub const I2C_C2_RMEN_SHIFT: u32 = 3;
pub const I2C_C2_SBRC_MASK: u32 = 16;
pub const I2C_C2_SBRC_SHIFT: u32 = 4;
pub const I2C_C2_HDRS_MASK: u32 = 32;
pub const I2C_C2_HDRS_SHIFT: u32 = 5;
pub const I2C_C2_ADEXT_MASK: u32 = 64;
pub const I2C_C2_ADEXT_SHIFT: u32 = 6;
pub const I2C_C2_GCAEN_MASK: u32 = 128;
pub const I2C_C2_GCAEN_SHIFT: u32 = 7;
pub const I2C_FLT_FLT_MASK: u32 = 15;
pub const I2C_FLT_FLT_SHIFT: u32 = 0;
pub const I2C_FLT_STARTF_MASK: u32 = 16;
pub const I2C_FLT_STARTF_SHIFT: u32 = 4;
pub const I2C_FLT_SSIE_MASK: u32 = 32;
pub const I2C_FLT_SSIE_SHIFT: u32 = 5;
pub const I2C_FLT_STOPF_MASK: u32 = 64;
pub const I2C_FLT_STOPF_SHIFT: u32 = 6;
pub const I2C_FLT_SHEN_MASK: u32 = 128;
pub const I2C_FLT_SHEN_SHIFT: u32 = 7;
pub const I2C_RA_RAD_MASK: u32 = 254;
pub const I2C_RA_RAD_SHIFT: u32 = 1;
pub const I2C_SMB_SHTF2IE_MASK: u32 = 1;
pub const I2C_SMB_SHTF2IE_SHIFT: u32 = 0;
pub const I2C_SMB_SHTF2_MASK: u32 = 2;
pub const I2C_SMB_SHTF2_SHIFT: u32 = 1;
pub const I2C_SMB_SHTF1_MASK: u32 = 4;
pub const I2C_SMB_SHTF1_SHIFT: u32 = 2;
pub const I2C_SMB_SLTF_MASK: u32 = 8;
pub const I2C_SMB_SLTF_SHIFT: u32 = 3;
pub const I2C_SMB_TCKSEL_MASK: u32 = 16;
pub const I2C_SMB_TCKSEL_SHIFT: u32 = 4;
pub const I2C_SMB_SIICAEN_MASK: u32 = 32;
pub const I2C_SMB_SIICAEN_SHIFT: u32 = 5;
pub const I2C_SMB_ALERTEN_MASK: u32 = 64;
pub const I2C_SMB_ALERTEN_SHIFT: u32 = 6;
pub const I2C_SMB_FACK_MASK: u32 = 128;
pub const I2C_SMB_FACK_SHIFT: u32 = 7;
pub const I2C_A2_SAD_MASK: u32 = 254;
pub const I2C_A2_SAD_SHIFT: u32 = 1;
pub const I2C_SLTH_SSLT_MASK: u32 = 255;
pub const I2C_SLTH_SSLT_SHIFT: u32 = 0;
pub const I2C_SLTL_SSLT_MASK: u32 = 255;
pub const I2C_SLTL_SSLT_SHIFT: u32 = 0;
pub const I2C0_BASE: u32 = 1074159616;
pub const I2C1_BASE: u32 = 1074163712;
pub const I2C2_BASE: u32 = 1074683904;
#[doc = " I2S - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I2S_Type {
    #[doc = "< SAI Transmit Control Register, offset: 0x0"]
    pub TCSR: u32,
    #[doc = "< SAI Transmit Configuration 1 Register, offset: 0x4"]
    pub TCR1: u32,
    #[doc = "< SAI Transmit Configuration 2 Register, offset: 0x8"]
    pub TCR2: u32,
    #[doc = "< SAI Transmit Configuration 3 Register, offset: 0xC"]
    pub TCR3: u32,
    #[doc = "< SAI Transmit Configuration 4 Register, offset: 0x10"]
    pub TCR4: u32,
    #[doc = "< SAI Transmit Configuration 5 Register, offset: 0x14"]
    pub TCR5: u32,
    pub RESERVED_0: [u8; 8usize],
    #[doc = "< SAI Transmit Data Register, array offset: 0x20, array step: 0x4"]
    pub TDR: [u32; 2usize],
    pub RESERVED_1: [u8; 24usize],
    #[doc = "< SAI Transmit FIFO Register, array offset: 0x40, array step: 0x4"]
    pub TFR: [u32; 2usize],
    pub RESERVED_2: [u8; 24usize],
    #[doc = "< SAI Transmit Mask Register, offset: 0x60"]
    pub TMR: u32,
    pub RESERVED_3: [u8; 28usize],
    #[doc = "< SAI Receive Control Register, offset: 0x80"]
    pub RCSR: u32,
    #[doc = "< SAI Receive Configuration 1 Register, offset: 0x84"]
    pub RCR1: u32,
    #[doc = "< SAI Receive Configuration 2 Register, offset: 0x88"]
    pub RCR2: u32,
    #[doc = "< SAI Receive Configuration 3 Register, offset: 0x8C"]
    pub RCR3: u32,
    #[doc = "< SAI Receive Configuration 4 Register, offset: 0x90"]
    pub RCR4: u32,
    #[doc = "< SAI Receive Configuration 5 Register, offset: 0x94"]
    pub RCR5: u32,
    pub RESERVED_4: [u8; 8usize],
    #[doc = "< SAI Receive Data Register, array offset: 0xA0, array step: 0x4"]
    pub RDR: [u32; 2usize],
    pub RESERVED_5: [u8; 24usize],
    #[doc = "< SAI Receive FIFO Register, array offset: 0xC0, array step: 0x4"]
    pub RFR: [u32; 2usize],
    pub RESERVED_6: [u8; 24usize],
    #[doc = "< SAI Receive Mask Register, offset: 0xE0"]
    pub RMR: u32,
    pub RESERVED_7: [u8; 28usize],
    #[doc = "< SAI MCLK Control Register, offset: 0x100"]
    pub MCR: u32,
    #[doc = "< SAI MCLK Divide Register, offset: 0x104"]
    pub MDR: u32,
}
#[test]
fn bindgen_test_layout_I2S_Type() {
    const UNINIT: ::std::mem::MaybeUninit<I2S_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<I2S_Type>(),
        264usize,
        concat!("Size of: ", stringify!(I2S_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<I2S_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(I2S_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(TCSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCR1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(TCR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCR2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(TCR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCR3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(TCR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCR4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(TCR4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCR5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(TCR5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(TDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TFR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(TFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RESERVED_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TMR) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(TMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_3) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RESERVED_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RCSR) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RCSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RCR1) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RCR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RCR2) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RCR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RCR3) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RCR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RCR4) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RCR4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RCR5) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RCR5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_4) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RESERVED_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RDR) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_5) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RESERVED_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RFR) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_6) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RESERVED_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RMR) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_7) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(RESERVED_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCR) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(MCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MDR) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(I2S_Type),
            "::",
            stringify!(MDR)
        )
    );
}
pub const I2S_TCSR_FRDE_MASK: u32 = 1;
pub const I2S_TCSR_FRDE_SHIFT: u32 = 0;
pub const I2S_TCSR_FWDE_MASK: u32 = 2;
pub const I2S_TCSR_FWDE_SHIFT: u32 = 1;
pub const I2S_TCSR_FRIE_MASK: u32 = 256;
pub const I2S_TCSR_FRIE_SHIFT: u32 = 8;
pub const I2S_TCSR_FWIE_MASK: u32 = 512;
pub const I2S_TCSR_FWIE_SHIFT: u32 = 9;
pub const I2S_TCSR_FEIE_MASK: u32 = 1024;
pub const I2S_TCSR_FEIE_SHIFT: u32 = 10;
pub const I2S_TCSR_SEIE_MASK: u32 = 2048;
pub const I2S_TCSR_SEIE_SHIFT: u32 = 11;
pub const I2S_TCSR_WSIE_MASK: u32 = 4096;
pub const I2S_TCSR_WSIE_SHIFT: u32 = 12;
pub const I2S_TCSR_FRF_MASK: u32 = 65536;
pub const I2S_TCSR_FRF_SHIFT: u32 = 16;
pub const I2S_TCSR_FWF_MASK: u32 = 131072;
pub const I2S_TCSR_FWF_SHIFT: u32 = 17;
pub const I2S_TCSR_FEF_MASK: u32 = 262144;
pub const I2S_TCSR_FEF_SHIFT: u32 = 18;
pub const I2S_TCSR_SEF_MASK: u32 = 524288;
pub const I2S_TCSR_SEF_SHIFT: u32 = 19;
pub const I2S_TCSR_WSF_MASK: u32 = 1048576;
pub const I2S_TCSR_WSF_SHIFT: u32 = 20;
pub const I2S_TCSR_SR_MASK: u32 = 16777216;
pub const I2S_TCSR_SR_SHIFT: u32 = 24;
pub const I2S_TCSR_FR_MASK: u32 = 33554432;
pub const I2S_TCSR_FR_SHIFT: u32 = 25;
pub const I2S_TCSR_BCE_MASK: u32 = 268435456;
pub const I2S_TCSR_BCE_SHIFT: u32 = 28;
pub const I2S_TCSR_DBGE_MASK: u32 = 536870912;
pub const I2S_TCSR_DBGE_SHIFT: u32 = 29;
pub const I2S_TCSR_STOPE_MASK: u32 = 1073741824;
pub const I2S_TCSR_STOPE_SHIFT: u32 = 30;
pub const I2S_TCSR_TE_MASK: u32 = 2147483648;
pub const I2S_TCSR_TE_SHIFT: u32 = 31;
pub const I2S_TCR1_TFW_MASK: u32 = 7;
pub const I2S_TCR1_TFW_SHIFT: u32 = 0;
pub const I2S_TCR2_DIV_MASK: u32 = 255;
pub const I2S_TCR2_DIV_SHIFT: u32 = 0;
pub const I2S_TCR2_BCD_MASK: u32 = 16777216;
pub const I2S_TCR2_BCD_SHIFT: u32 = 24;
pub const I2S_TCR2_BCP_MASK: u32 = 33554432;
pub const I2S_TCR2_BCP_SHIFT: u32 = 25;
pub const I2S_TCR2_MSEL_MASK: u32 = 201326592;
pub const I2S_TCR2_MSEL_SHIFT: u32 = 26;
pub const I2S_TCR2_BCI_MASK: u32 = 268435456;
pub const I2S_TCR2_BCI_SHIFT: u32 = 28;
pub const I2S_TCR2_BCS_MASK: u32 = 536870912;
pub const I2S_TCR2_BCS_SHIFT: u32 = 29;
pub const I2S_TCR2_SYNC_MASK: u32 = 3221225472;
pub const I2S_TCR2_SYNC_SHIFT: u32 = 30;
pub const I2S_TCR3_WDFL_MASK: u32 = 31;
pub const I2S_TCR3_WDFL_SHIFT: u32 = 0;
pub const I2S_TCR3_TCE_MASK: u32 = 196608;
pub const I2S_TCR3_TCE_SHIFT: u32 = 16;
pub const I2S_TCR4_FSD_MASK: u32 = 1;
pub const I2S_TCR4_FSD_SHIFT: u32 = 0;
pub const I2S_TCR4_FSP_MASK: u32 = 2;
pub const I2S_TCR4_FSP_SHIFT: u32 = 1;
pub const I2S_TCR4_FSE_MASK: u32 = 8;
pub const I2S_TCR4_FSE_SHIFT: u32 = 3;
pub const I2S_TCR4_MF_MASK: u32 = 16;
pub const I2S_TCR4_MF_SHIFT: u32 = 4;
pub const I2S_TCR4_SYWD_MASK: u32 = 7936;
pub const I2S_TCR4_SYWD_SHIFT: u32 = 8;
pub const I2S_TCR4_FRSZ_MASK: u32 = 2031616;
pub const I2S_TCR4_FRSZ_SHIFT: u32 = 16;
pub const I2S_TCR5_FBT_MASK: u32 = 7936;
pub const I2S_TCR5_FBT_SHIFT: u32 = 8;
pub const I2S_TCR5_W0W_MASK: u32 = 2031616;
pub const I2S_TCR5_W0W_SHIFT: u32 = 16;
pub const I2S_TCR5_WNW_MASK: u32 = 520093696;
pub const I2S_TCR5_WNW_SHIFT: u32 = 24;
pub const I2S_TDR_TDR_MASK: u32 = 4294967295;
pub const I2S_TDR_TDR_SHIFT: u32 = 0;
pub const I2S_TDR_COUNT: u32 = 2;
pub const I2S_TFR_RFP_MASK: u32 = 15;
pub const I2S_TFR_RFP_SHIFT: u32 = 0;
pub const I2S_TFR_WFP_MASK: u32 = 983040;
pub const I2S_TFR_WFP_SHIFT: u32 = 16;
pub const I2S_TFR_COUNT: u32 = 2;
pub const I2S_TMR_TWM_MASK: u32 = 4294967295;
pub const I2S_TMR_TWM_SHIFT: u32 = 0;
pub const I2S_RCSR_FRDE_MASK: u32 = 1;
pub const I2S_RCSR_FRDE_SHIFT: u32 = 0;
pub const I2S_RCSR_FWDE_MASK: u32 = 2;
pub const I2S_RCSR_FWDE_SHIFT: u32 = 1;
pub const I2S_RCSR_FRIE_MASK: u32 = 256;
pub const I2S_RCSR_FRIE_SHIFT: u32 = 8;
pub const I2S_RCSR_FWIE_MASK: u32 = 512;
pub const I2S_RCSR_FWIE_SHIFT: u32 = 9;
pub const I2S_RCSR_FEIE_MASK: u32 = 1024;
pub const I2S_RCSR_FEIE_SHIFT: u32 = 10;
pub const I2S_RCSR_SEIE_MASK: u32 = 2048;
pub const I2S_RCSR_SEIE_SHIFT: u32 = 11;
pub const I2S_RCSR_WSIE_MASK: u32 = 4096;
pub const I2S_RCSR_WSIE_SHIFT: u32 = 12;
pub const I2S_RCSR_FRF_MASK: u32 = 65536;
pub const I2S_RCSR_FRF_SHIFT: u32 = 16;
pub const I2S_RCSR_FWF_MASK: u32 = 131072;
pub const I2S_RCSR_FWF_SHIFT: u32 = 17;
pub const I2S_RCSR_FEF_MASK: u32 = 262144;
pub const I2S_RCSR_FEF_SHIFT: u32 = 18;
pub const I2S_RCSR_SEF_MASK: u32 = 524288;
pub const I2S_RCSR_SEF_SHIFT: u32 = 19;
pub const I2S_RCSR_WSF_MASK: u32 = 1048576;
pub const I2S_RCSR_WSF_SHIFT: u32 = 20;
pub const I2S_RCSR_SR_MASK: u32 = 16777216;
pub const I2S_RCSR_SR_SHIFT: u32 = 24;
pub const I2S_RCSR_FR_MASK: u32 = 33554432;
pub const I2S_RCSR_FR_SHIFT: u32 = 25;
pub const I2S_RCSR_BCE_MASK: u32 = 268435456;
pub const I2S_RCSR_BCE_SHIFT: u32 = 28;
pub const I2S_RCSR_DBGE_MASK: u32 = 536870912;
pub const I2S_RCSR_DBGE_SHIFT: u32 = 29;
pub const I2S_RCSR_STOPE_MASK: u32 = 1073741824;
pub const I2S_RCSR_STOPE_SHIFT: u32 = 30;
pub const I2S_RCSR_RE_MASK: u32 = 2147483648;
pub const I2S_RCSR_RE_SHIFT: u32 = 31;
pub const I2S_RCR1_RFW_MASK: u32 = 7;
pub const I2S_RCR1_RFW_SHIFT: u32 = 0;
pub const I2S_RCR2_DIV_MASK: u32 = 255;
pub const I2S_RCR2_DIV_SHIFT: u32 = 0;
pub const I2S_RCR2_BCD_MASK: u32 = 16777216;
pub const I2S_RCR2_BCD_SHIFT: u32 = 24;
pub const I2S_RCR2_BCP_MASK: u32 = 33554432;
pub const I2S_RCR2_BCP_SHIFT: u32 = 25;
pub const I2S_RCR2_MSEL_MASK: u32 = 201326592;
pub const I2S_RCR2_MSEL_SHIFT: u32 = 26;
pub const I2S_RCR2_BCI_MASK: u32 = 268435456;
pub const I2S_RCR2_BCI_SHIFT: u32 = 28;
pub const I2S_RCR2_BCS_MASK: u32 = 536870912;
pub const I2S_RCR2_BCS_SHIFT: u32 = 29;
pub const I2S_RCR2_SYNC_MASK: u32 = 3221225472;
pub const I2S_RCR2_SYNC_SHIFT: u32 = 30;
pub const I2S_RCR3_WDFL_MASK: u32 = 31;
pub const I2S_RCR3_WDFL_SHIFT: u32 = 0;
pub const I2S_RCR3_RCE_MASK: u32 = 196608;
pub const I2S_RCR3_RCE_SHIFT: u32 = 16;
pub const I2S_RCR4_FSD_MASK: u32 = 1;
pub const I2S_RCR4_FSD_SHIFT: u32 = 0;
pub const I2S_RCR4_FSP_MASK: u32 = 2;
pub const I2S_RCR4_FSP_SHIFT: u32 = 1;
pub const I2S_RCR4_FSE_MASK: u32 = 8;
pub const I2S_RCR4_FSE_SHIFT: u32 = 3;
pub const I2S_RCR4_MF_MASK: u32 = 16;
pub const I2S_RCR4_MF_SHIFT: u32 = 4;
pub const I2S_RCR4_SYWD_MASK: u32 = 7936;
pub const I2S_RCR4_SYWD_SHIFT: u32 = 8;
pub const I2S_RCR4_FRSZ_MASK: u32 = 2031616;
pub const I2S_RCR4_FRSZ_SHIFT: u32 = 16;
pub const I2S_RCR5_FBT_MASK: u32 = 7936;
pub const I2S_RCR5_FBT_SHIFT: u32 = 8;
pub const I2S_RCR5_W0W_MASK: u32 = 2031616;
pub const I2S_RCR5_W0W_SHIFT: u32 = 16;
pub const I2S_RCR5_WNW_MASK: u32 = 520093696;
pub const I2S_RCR5_WNW_SHIFT: u32 = 24;
pub const I2S_RDR_RDR_MASK: u32 = 4294967295;
pub const I2S_RDR_RDR_SHIFT: u32 = 0;
pub const I2S_RDR_COUNT: u32 = 2;
pub const I2S_RFR_RFP_MASK: u32 = 15;
pub const I2S_RFR_RFP_SHIFT: u32 = 0;
pub const I2S_RFR_WFP_MASK: u32 = 983040;
pub const I2S_RFR_WFP_SHIFT: u32 = 16;
pub const I2S_RFR_COUNT: u32 = 2;
pub const I2S_RMR_RWM_MASK: u32 = 4294967295;
pub const I2S_RMR_RWM_SHIFT: u32 = 0;
pub const I2S_MCR_MICS_MASK: u32 = 50331648;
pub const I2S_MCR_MICS_SHIFT: u32 = 24;
pub const I2S_MCR_MOE_MASK: u32 = 1073741824;
pub const I2S_MCR_MOE_SHIFT: u32 = 30;
pub const I2S_MCR_DUF_MASK: u32 = 2147483648;
pub const I2S_MCR_DUF_SHIFT: u32 = 31;
pub const I2S_MDR_DIVIDE_MASK: u32 = 4095;
pub const I2S_MDR_DIVIDE_SHIFT: u32 = 0;
pub const I2S_MDR_FRACT_MASK: u32 = 1044480;
pub const I2S_MDR_FRACT_SHIFT: u32 = 12;
pub const I2S0_BASE: u32 = 1073934336;
#[doc = " LLWU - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LLWU_Type {
    #[doc = "< LLWU Pin Enable 1 register, offset: 0x0"]
    pub PE1: u8,
    #[doc = "< LLWU Pin Enable 2 register, offset: 0x1"]
    pub PE2: u8,
    #[doc = "< LLWU Pin Enable 3 register, offset: 0x2"]
    pub PE3: u8,
    #[doc = "< LLWU Pin Enable 4 register, offset: 0x3"]
    pub PE4: u8,
    #[doc = "< LLWU Module Enable register, offset: 0x4"]
    pub ME: u8,
    #[doc = "< LLWU Flag 1 register, offset: 0x5"]
    pub F1: u8,
    #[doc = "< LLWU Flag 2 register, offset: 0x6"]
    pub F2: u8,
    #[doc = "< LLWU Flag 3 register, offset: 0x7"]
    pub F3: u8,
    #[doc = "< LLWU Pin Filter 1 register, offset: 0x8"]
    pub FILT1: u8,
    #[doc = "< LLWU Pin Filter 2 register, offset: 0x9"]
    pub FILT2: u8,
    #[doc = "< LLWU Reset Enable register, offset: 0xA"]
    pub RST: u8,
}
#[test]
fn bindgen_test_layout_LLWU_Type() {
    const UNINIT: ::std::mem::MaybeUninit<LLWU_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LLWU_Type>(),
        11usize,
        concat!("Size of: ", stringify!(LLWU_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<LLWU_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(LLWU_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PE1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LLWU_Type),
            "::",
            stringify!(PE1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PE2) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(LLWU_Type),
            "::",
            stringify!(PE2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PE3) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(LLWU_Type),
            "::",
            stringify!(PE3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PE4) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(LLWU_Type),
            "::",
            stringify!(PE4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ME) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LLWU_Type),
            "::",
            stringify!(ME)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).F1) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(LLWU_Type),
            "::",
            stringify!(F1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).F2) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(LLWU_Type),
            "::",
            stringify!(F2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).F3) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(LLWU_Type),
            "::",
            stringify!(F3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FILT1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LLWU_Type),
            "::",
            stringify!(FILT1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FILT2) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(LLWU_Type),
            "::",
            stringify!(FILT2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RST) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(LLWU_Type),
            "::",
            stringify!(RST)
        )
    );
}
pub const LLWU_PE1_WUPE0_MASK: u32 = 3;
pub const LLWU_PE1_WUPE0_SHIFT: u32 = 0;
pub const LLWU_PE1_WUPE1_MASK: u32 = 12;
pub const LLWU_PE1_WUPE1_SHIFT: u32 = 2;
pub const LLWU_PE1_WUPE2_MASK: u32 = 48;
pub const LLWU_PE1_WUPE2_SHIFT: u32 = 4;
pub const LLWU_PE1_WUPE3_MASK: u32 = 192;
pub const LLWU_PE1_WUPE3_SHIFT: u32 = 6;
pub const LLWU_PE2_WUPE4_MASK: u32 = 3;
pub const LLWU_PE2_WUPE4_SHIFT: u32 = 0;
pub const LLWU_PE2_WUPE5_MASK: u32 = 12;
pub const LLWU_PE2_WUPE5_SHIFT: u32 = 2;
pub const LLWU_PE2_WUPE6_MASK: u32 = 48;
pub const LLWU_PE2_WUPE6_SHIFT: u32 = 4;
pub const LLWU_PE2_WUPE7_MASK: u32 = 192;
pub const LLWU_PE2_WUPE7_SHIFT: u32 = 6;
pub const LLWU_PE3_WUPE8_MASK: u32 = 3;
pub const LLWU_PE3_WUPE8_SHIFT: u32 = 0;
pub const LLWU_PE3_WUPE9_MASK: u32 = 12;
pub const LLWU_PE3_WUPE9_SHIFT: u32 = 2;
pub const LLWU_PE3_WUPE10_MASK: u32 = 48;
pub const LLWU_PE3_WUPE10_SHIFT: u32 = 4;
pub const LLWU_PE3_WUPE11_MASK: u32 = 192;
pub const LLWU_PE3_WUPE11_SHIFT: u32 = 6;
pub const LLWU_PE4_WUPE12_MASK: u32 = 3;
pub const LLWU_PE4_WUPE12_SHIFT: u32 = 0;
pub const LLWU_PE4_WUPE13_MASK: u32 = 12;
pub const LLWU_PE4_WUPE13_SHIFT: u32 = 2;
pub const LLWU_PE4_WUPE14_MASK: u32 = 48;
pub const LLWU_PE4_WUPE14_SHIFT: u32 = 4;
pub const LLWU_PE4_WUPE15_MASK: u32 = 192;
pub const LLWU_PE4_WUPE15_SHIFT: u32 = 6;
pub const LLWU_ME_WUME0_MASK: u32 = 1;
pub const LLWU_ME_WUME0_SHIFT: u32 = 0;
pub const LLWU_ME_WUME1_MASK: u32 = 2;
pub const LLWU_ME_WUME1_SHIFT: u32 = 1;
pub const LLWU_ME_WUME2_MASK: u32 = 4;
pub const LLWU_ME_WUME2_SHIFT: u32 = 2;
pub const LLWU_ME_WUME3_MASK: u32 = 8;
pub const LLWU_ME_WUME3_SHIFT: u32 = 3;
pub const LLWU_ME_WUME4_MASK: u32 = 16;
pub const LLWU_ME_WUME4_SHIFT: u32 = 4;
pub const LLWU_ME_WUME5_MASK: u32 = 32;
pub const LLWU_ME_WUME5_SHIFT: u32 = 5;
pub const LLWU_ME_WUME6_MASK: u32 = 64;
pub const LLWU_ME_WUME6_SHIFT: u32 = 6;
pub const LLWU_ME_WUME7_MASK: u32 = 128;
pub const LLWU_ME_WUME7_SHIFT: u32 = 7;
pub const LLWU_F1_WUF0_MASK: u32 = 1;
pub const LLWU_F1_WUF0_SHIFT: u32 = 0;
pub const LLWU_F1_WUF1_MASK: u32 = 2;
pub const LLWU_F1_WUF1_SHIFT: u32 = 1;
pub const LLWU_F1_WUF2_MASK: u32 = 4;
pub const LLWU_F1_WUF2_SHIFT: u32 = 2;
pub const LLWU_F1_WUF3_MASK: u32 = 8;
pub const LLWU_F1_WUF3_SHIFT: u32 = 3;
pub const LLWU_F1_WUF4_MASK: u32 = 16;
pub const LLWU_F1_WUF4_SHIFT: u32 = 4;
pub const LLWU_F1_WUF5_MASK: u32 = 32;
pub const LLWU_F1_WUF5_SHIFT: u32 = 5;
pub const LLWU_F1_WUF6_MASK: u32 = 64;
pub const LLWU_F1_WUF6_SHIFT: u32 = 6;
pub const LLWU_F1_WUF7_MASK: u32 = 128;
pub const LLWU_F1_WUF7_SHIFT: u32 = 7;
pub const LLWU_F2_WUF8_MASK: u32 = 1;
pub const LLWU_F2_WUF8_SHIFT: u32 = 0;
pub const LLWU_F2_WUF9_MASK: u32 = 2;
pub const LLWU_F2_WUF9_SHIFT: u32 = 1;
pub const LLWU_F2_WUF10_MASK: u32 = 4;
pub const LLWU_F2_WUF10_SHIFT: u32 = 2;
pub const LLWU_F2_WUF11_MASK: u32 = 8;
pub const LLWU_F2_WUF11_SHIFT: u32 = 3;
pub const LLWU_F2_WUF12_MASK: u32 = 16;
pub const LLWU_F2_WUF12_SHIFT: u32 = 4;
pub const LLWU_F2_WUF13_MASK: u32 = 32;
pub const LLWU_F2_WUF13_SHIFT: u32 = 5;
pub const LLWU_F2_WUF14_MASK: u32 = 64;
pub const LLWU_F2_WUF14_SHIFT: u32 = 6;
pub const LLWU_F2_WUF15_MASK: u32 = 128;
pub const LLWU_F2_WUF15_SHIFT: u32 = 7;
pub const LLWU_F3_MWUF0_MASK: u32 = 1;
pub const LLWU_F3_MWUF0_SHIFT: u32 = 0;
pub const LLWU_F3_MWUF1_MASK: u32 = 2;
pub const LLWU_F3_MWUF1_SHIFT: u32 = 1;
pub const LLWU_F3_MWUF2_MASK: u32 = 4;
pub const LLWU_F3_MWUF2_SHIFT: u32 = 2;
pub const LLWU_F3_MWUF3_MASK: u32 = 8;
pub const LLWU_F3_MWUF3_SHIFT: u32 = 3;
pub const LLWU_F3_MWUF4_MASK: u32 = 16;
pub const LLWU_F3_MWUF4_SHIFT: u32 = 4;
pub const LLWU_F3_MWUF5_MASK: u32 = 32;
pub const LLWU_F3_MWUF5_SHIFT: u32 = 5;
pub const LLWU_F3_MWUF6_MASK: u32 = 64;
pub const LLWU_F3_MWUF6_SHIFT: u32 = 6;
pub const LLWU_F3_MWUF7_MASK: u32 = 128;
pub const LLWU_F3_MWUF7_SHIFT: u32 = 7;
pub const LLWU_FILT1_FILTSEL_MASK: u32 = 15;
pub const LLWU_FILT1_FILTSEL_SHIFT: u32 = 0;
pub const LLWU_FILT1_FILTE_MASK: u32 = 96;
pub const LLWU_FILT1_FILTE_SHIFT: u32 = 5;
pub const LLWU_FILT1_FILTF_MASK: u32 = 128;
pub const LLWU_FILT1_FILTF_SHIFT: u32 = 7;
pub const LLWU_FILT2_FILTSEL_MASK: u32 = 15;
pub const LLWU_FILT2_FILTSEL_SHIFT: u32 = 0;
pub const LLWU_FILT2_FILTE_MASK: u32 = 96;
pub const LLWU_FILT2_FILTE_SHIFT: u32 = 5;
pub const LLWU_FILT2_FILTF_MASK: u32 = 128;
pub const LLWU_FILT2_FILTF_SHIFT: u32 = 7;
pub const LLWU_RST_RSTFILT_MASK: u32 = 1;
pub const LLWU_RST_RSTFILT_SHIFT: u32 = 0;
pub const LLWU_RST_LLRSTE_MASK: u32 = 2;
pub const LLWU_RST_LLRSTE_SHIFT: u32 = 1;
pub const LLWU_BASE: u32 = 1074249728;
#[doc = " LPTMR - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LPTMR_Type {
    #[doc = "< Low Power Timer Control Status Register, offset: 0x0"]
    pub CSR: u32,
    #[doc = "< Low Power Timer Prescale Register, offset: 0x4"]
    pub PSR: u32,
    #[doc = "< Low Power Timer Compare Register, offset: 0x8"]
    pub CMR: u32,
    #[doc = "< Low Power Timer Counter Register, offset: 0xC"]
    pub CNR: u32,
}
#[test]
fn bindgen_test_layout_LPTMR_Type() {
    const UNINIT: ::std::mem::MaybeUninit<LPTMR_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LPTMR_Type>(),
        16usize,
        concat!("Size of: ", stringify!(LPTMR_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<LPTMR_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(LPTMR_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTMR_Type),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTMR_Type),
            "::",
            stringify!(PSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTMR_Type),
            "::",
            stringify!(CMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CNR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LPTMR_Type),
            "::",
            stringify!(CNR)
        )
    );
}
pub const LPTMR_CSR_TEN_MASK: u32 = 1;
pub const LPTMR_CSR_TEN_SHIFT: u32 = 0;
pub const LPTMR_CSR_TMS_MASK: u32 = 2;
pub const LPTMR_CSR_TMS_SHIFT: u32 = 1;
pub const LPTMR_CSR_TFC_MASK: u32 = 4;
pub const LPTMR_CSR_TFC_SHIFT: u32 = 2;
pub const LPTMR_CSR_TPP_MASK: u32 = 8;
pub const LPTMR_CSR_TPP_SHIFT: u32 = 3;
pub const LPTMR_CSR_TPS_MASK: u32 = 48;
pub const LPTMR_CSR_TPS_SHIFT: u32 = 4;
pub const LPTMR_CSR_TIE_MASK: u32 = 64;
pub const LPTMR_CSR_TIE_SHIFT: u32 = 6;
pub const LPTMR_CSR_TCF_MASK: u32 = 128;
pub const LPTMR_CSR_TCF_SHIFT: u32 = 7;
pub const LPTMR_PSR_PCS_MASK: u32 = 3;
pub const LPTMR_PSR_PCS_SHIFT: u32 = 0;
pub const LPTMR_PSR_PBYP_MASK: u32 = 4;
pub const LPTMR_PSR_PBYP_SHIFT: u32 = 2;
pub const LPTMR_PSR_PRESCALE_MASK: u32 = 120;
pub const LPTMR_PSR_PRESCALE_SHIFT: u32 = 3;
pub const LPTMR_CMR_COMPARE_MASK: u32 = 65535;
pub const LPTMR_CMR_COMPARE_SHIFT: u32 = 0;
pub const LPTMR_CNR_COUNTER_MASK: u32 = 65535;
pub const LPTMR_CNR_COUNTER_SHIFT: u32 = 0;
pub const LPTMR0_BASE: u32 = 1074003968;
#[doc = " MCG - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MCG_Type {
    #[doc = "< MCG Control 1 Register, offset: 0x0"]
    pub C1: u8,
    #[doc = "< MCG Control 2 Register, offset: 0x1"]
    pub C2: u8,
    #[doc = "< MCG Control 3 Register, offset: 0x2"]
    pub C3: u8,
    #[doc = "< MCG Control 4 Register, offset: 0x3"]
    pub C4: u8,
    #[doc = "< MCG Control 5 Register, offset: 0x4"]
    pub C5: u8,
    #[doc = "< MCG Control 6 Register, offset: 0x5"]
    pub C6: u8,
    #[doc = "< MCG Status Register, offset: 0x6"]
    pub S: u8,
    pub RESERVED_0: [u8; 1usize],
    #[doc = "< MCG Status and Control Register, offset: 0x8"]
    pub SC: u8,
    pub RESERVED_1: [u8; 1usize],
    #[doc = "< MCG Auto Trim Compare Value High Register, offset: 0xA"]
    pub ATCVH: u8,
    #[doc = "< MCG Auto Trim Compare Value Low Register, offset: 0xB"]
    pub ATCVL: u8,
    #[doc = "< MCG Control 7 Register, offset: 0xC"]
    pub C7: u8,
    #[doc = "< MCG Control 8 Register, offset: 0xD"]
    pub C8: u8,
}
#[test]
fn bindgen_test_layout_MCG_Type() {
    const UNINIT: ::std::mem::MaybeUninit<MCG_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MCG_Type>(),
        14usize,
        concat!("Size of: ", stringify!(MCG_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<MCG_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(MCG_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(C1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C2) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(C2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C3) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(C3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C4) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(C4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C5) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(C5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C6) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(C6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).S) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(S)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SC) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(SC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ATCVH) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(ATCVH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ATCVL) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(ATCVL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C7) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(C7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C8) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(MCG_Type),
            "::",
            stringify!(C8)
        )
    );
}
pub const MCG_C1_IREFSTEN_MASK: u32 = 1;
pub const MCG_C1_IREFSTEN_SHIFT: u32 = 0;
pub const MCG_C1_IRCLKEN_MASK: u32 = 2;
pub const MCG_C1_IRCLKEN_SHIFT: u32 = 1;
pub const MCG_C1_IREFS_MASK: u32 = 4;
pub const MCG_C1_IREFS_SHIFT: u32 = 2;
pub const MCG_C1_FRDIV_MASK: u32 = 56;
pub const MCG_C1_FRDIV_SHIFT: u32 = 3;
pub const MCG_C1_CLKS_MASK: u32 = 192;
pub const MCG_C1_CLKS_SHIFT: u32 = 6;
pub const MCG_C2_IRCS_MASK: u32 = 1;
pub const MCG_C2_IRCS_SHIFT: u32 = 0;
pub const MCG_C2_LP_MASK: u32 = 2;
pub const MCG_C2_LP_SHIFT: u32 = 1;
pub const MCG_C2_EREFS0_MASK: u32 = 4;
pub const MCG_C2_EREFS0_SHIFT: u32 = 2;
pub const MCG_C2_HGO0_MASK: u32 = 8;
pub const MCG_C2_HGO0_SHIFT: u32 = 3;
pub const MCG_C2_RANGE0_MASK: u32 = 48;
pub const MCG_C2_RANGE0_SHIFT: u32 = 4;
pub const MCG_C2_LOCRE0_MASK: u32 = 128;
pub const MCG_C2_LOCRE0_SHIFT: u32 = 7;
pub const MCG_C3_SCTRIM_MASK: u32 = 255;
pub const MCG_C3_SCTRIM_SHIFT: u32 = 0;
pub const MCG_C4_SCFTRIM_MASK: u32 = 1;
pub const MCG_C4_SCFTRIM_SHIFT: u32 = 0;
pub const MCG_C4_FCTRIM_MASK: u32 = 30;
pub const MCG_C4_FCTRIM_SHIFT: u32 = 1;
pub const MCG_C4_DRST_DRS_MASK: u32 = 96;
pub const MCG_C4_DRST_DRS_SHIFT: u32 = 5;
pub const MCG_C4_DMX32_MASK: u32 = 128;
pub const MCG_C4_DMX32_SHIFT: u32 = 7;
pub const MCG_C5_PRDIV0_MASK: u32 = 31;
pub const MCG_C5_PRDIV0_SHIFT: u32 = 0;
pub const MCG_C5_PLLSTEN0_MASK: u32 = 32;
pub const MCG_C5_PLLSTEN0_SHIFT: u32 = 5;
pub const MCG_C5_PLLCLKEN0_MASK: u32 = 64;
pub const MCG_C5_PLLCLKEN0_SHIFT: u32 = 6;
pub const MCG_C6_VDIV0_MASK: u32 = 31;
pub const MCG_C6_VDIV0_SHIFT: u32 = 0;
pub const MCG_C6_CME0_MASK: u32 = 32;
pub const MCG_C6_CME0_SHIFT: u32 = 5;
pub const MCG_C6_PLLS_MASK: u32 = 64;
pub const MCG_C6_PLLS_SHIFT: u32 = 6;
pub const MCG_C6_LOLIE0_MASK: u32 = 128;
pub const MCG_C6_LOLIE0_SHIFT: u32 = 7;
pub const MCG_S_IRCST_MASK: u32 = 1;
pub const MCG_S_IRCST_SHIFT: u32 = 0;
pub const MCG_S_OSCINIT0_MASK: u32 = 2;
pub const MCG_S_OSCINIT0_SHIFT: u32 = 1;
pub const MCG_S_CLKST_MASK: u32 = 12;
pub const MCG_S_CLKST_SHIFT: u32 = 2;
pub const MCG_S_IREFST_MASK: u32 = 16;
pub const MCG_S_IREFST_SHIFT: u32 = 4;
pub const MCG_S_PLLST_MASK: u32 = 32;
pub const MCG_S_PLLST_SHIFT: u32 = 5;
pub const MCG_S_LOCK0_MASK: u32 = 64;
pub const MCG_S_LOCK0_SHIFT: u32 = 6;
pub const MCG_S_LOLS_MASK: u32 = 128;
pub const MCG_S_LOLS_SHIFT: u32 = 7;
pub const MCG_SC_LOCS0_MASK: u32 = 1;
pub const MCG_SC_LOCS0_SHIFT: u32 = 0;
pub const MCG_SC_FCRDIV_MASK: u32 = 14;
pub const MCG_SC_FCRDIV_SHIFT: u32 = 1;
pub const MCG_SC_FLTPRSRV_MASK: u32 = 16;
pub const MCG_SC_FLTPRSRV_SHIFT: u32 = 4;
pub const MCG_SC_ATMF_MASK: u32 = 32;
pub const MCG_SC_ATMF_SHIFT: u32 = 5;
pub const MCG_SC_ATMS_MASK: u32 = 64;
pub const MCG_SC_ATMS_SHIFT: u32 = 6;
pub const MCG_SC_ATME_MASK: u32 = 128;
pub const MCG_SC_ATME_SHIFT: u32 = 7;
pub const MCG_ATCVH_ATCVH_MASK: u32 = 255;
pub const MCG_ATCVH_ATCVH_SHIFT: u32 = 0;
pub const MCG_ATCVL_ATCVL_MASK: u32 = 255;
pub const MCG_ATCVL_ATCVL_SHIFT: u32 = 0;
pub const MCG_C7_OSCSEL_MASK: u32 = 1;
pub const MCG_C7_OSCSEL_SHIFT: u32 = 0;
pub const MCG_C8_LOCS1_MASK: u32 = 1;
pub const MCG_C8_LOCS1_SHIFT: u32 = 0;
pub const MCG_C8_CME1_MASK: u32 = 32;
pub const MCG_C8_CME1_SHIFT: u32 = 5;
pub const MCG_C8_LOLRE_MASK: u32 = 64;
pub const MCG_C8_LOLRE_SHIFT: u32 = 6;
pub const MCG_C8_LOCRE1_MASK: u32 = 128;
pub const MCG_C8_LOCRE1_SHIFT: u32 = 7;
pub const MCG_BASE: u32 = 1074151424;
pub const MCG_C2_EREFS_MASK: u32 = 4;
pub const MCG_C2_EREFS_SHIFT: u32 = 2;
pub const MCG_C2_HGO_MASK: u32 = 8;
pub const MCG_C2_HGO_SHIFT: u32 = 3;
pub const MCG_C2_RANGE_MASK: u32 = 48;
pub const MCG_C2_RANGE_SHIFT: u32 = 4;
pub const MCG_S_LOLS0_MASK: u32 = 128;
pub const MCG_S_LOLS0_SHIFT: u32 = 7;
#[doc = " MCM - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MCM_Type {
    pub RESERVED_0: [u8; 8usize],
    #[doc = "< Crossbar Switch (AXBS) Slave Configuration, offset: 0x8"]
    pub PLASC: u16,
    #[doc = "< Crossbar Switch (AXBS) Master Configuration, offset: 0xA"]
    pub PLAMC: u16,
    #[doc = "< Control Register, offset: 0xC"]
    pub CR: u32,
    #[doc = "< Interrupt Status Register, offset: 0x10"]
    pub ISCR: u32,
    #[doc = "< ETB Counter Control register, offset: 0x14"]
    pub ETBCC: u32,
    #[doc = "< ETB Reload register, offset: 0x18"]
    pub ETBRL: u32,
    #[doc = "< ETB Counter Value register, offset: 0x1C"]
    pub ETBCNT: u32,
    pub RESERVED_1: [u8; 16usize],
    #[doc = "< Process ID register, offset: 0x30"]
    pub PID: u32,
}
#[test]
fn bindgen_test_layout_MCM_Type() {
    const UNINIT: ::std::mem::MaybeUninit<MCM_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MCM_Type>(),
        52usize,
        concat!("Size of: ", stringify!(MCM_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<MCM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(MCM_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MCM_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PLASC) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MCM_Type),
            "::",
            stringify!(PLASC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PLAMC) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(MCM_Type),
            "::",
            stringify!(PLAMC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MCM_Type),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ISCR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MCM_Type),
            "::",
            stringify!(ISCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ETBCC) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MCM_Type),
            "::",
            stringify!(ETBCC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ETBRL) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MCM_Type),
            "::",
            stringify!(ETBRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ETBCNT) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MCM_Type),
            "::",
            stringify!(ETBCNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MCM_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MCM_Type),
            "::",
            stringify!(PID)
        )
    );
}
pub const MCM_PLASC_ASC_MASK: u32 = 255;
pub const MCM_PLASC_ASC_SHIFT: u32 = 0;
pub const MCM_PLAMC_AMC_MASK: u32 = 255;
pub const MCM_PLAMC_AMC_SHIFT: u32 = 0;
pub const MCM_CR_SRAMUAP_MASK: u32 = 50331648;
pub const MCM_CR_SRAMUAP_SHIFT: u32 = 24;
pub const MCM_CR_SRAMUWP_MASK: u32 = 67108864;
pub const MCM_CR_SRAMUWP_SHIFT: u32 = 26;
pub const MCM_CR_SRAMLAP_MASK: u32 = 805306368;
pub const MCM_CR_SRAMLAP_SHIFT: u32 = 28;
pub const MCM_CR_SRAMLWP_MASK: u32 = 1073741824;
pub const MCM_CR_SRAMLWP_SHIFT: u32 = 30;
pub const MCM_ISCR_IRQ_MASK: u32 = 2;
pub const MCM_ISCR_IRQ_SHIFT: u32 = 1;
pub const MCM_ISCR_NMI_MASK: u32 = 4;
pub const MCM_ISCR_NMI_SHIFT: u32 = 2;
pub const MCM_ISCR_DHREQ_MASK: u32 = 8;
pub const MCM_ISCR_DHREQ_SHIFT: u32 = 3;
pub const MCM_ISCR_FIOC_MASK: u32 = 256;
pub const MCM_ISCR_FIOC_SHIFT: u32 = 8;
pub const MCM_ISCR_FDZC_MASK: u32 = 512;
pub const MCM_ISCR_FDZC_SHIFT: u32 = 9;
pub const MCM_ISCR_FOFC_MASK: u32 = 1024;
pub const MCM_ISCR_FOFC_SHIFT: u32 = 10;
pub const MCM_ISCR_FUFC_MASK: u32 = 2048;
pub const MCM_ISCR_FUFC_SHIFT: u32 = 11;
pub const MCM_ISCR_FIXC_MASK: u32 = 4096;
pub const MCM_ISCR_FIXC_SHIFT: u32 = 12;
pub const MCM_ISCR_FIDC_MASK: u32 = 32768;
pub const MCM_ISCR_FIDC_SHIFT: u32 = 15;
pub const MCM_ISCR_FIOCE_MASK: u32 = 16777216;
pub const MCM_ISCR_FIOCE_SHIFT: u32 = 24;
pub const MCM_ISCR_FDZCE_MASK: u32 = 33554432;
pub const MCM_ISCR_FDZCE_SHIFT: u32 = 25;
pub const MCM_ISCR_FOFCE_MASK: u32 = 67108864;
pub const MCM_ISCR_FOFCE_SHIFT: u32 = 26;
pub const MCM_ISCR_FUFCE_MASK: u32 = 134217728;
pub const MCM_ISCR_FUFCE_SHIFT: u32 = 27;
pub const MCM_ISCR_FIXCE_MASK: u32 = 268435456;
pub const MCM_ISCR_FIXCE_SHIFT: u32 = 28;
pub const MCM_ISCR_FIDCE_MASK: u32 = 2147483648;
pub const MCM_ISCR_FIDCE_SHIFT: u32 = 31;
pub const MCM_ETBCC_CNTEN_MASK: u32 = 1;
pub const MCM_ETBCC_CNTEN_SHIFT: u32 = 0;
pub const MCM_ETBCC_RSPT_MASK: u32 = 6;
pub const MCM_ETBCC_RSPT_SHIFT: u32 = 1;
pub const MCM_ETBCC_RLRQ_MASK: u32 = 8;
pub const MCM_ETBCC_RLRQ_SHIFT: u32 = 3;
pub const MCM_ETBCC_ETDIS_MASK: u32 = 16;
pub const MCM_ETBCC_ETDIS_SHIFT: u32 = 4;
pub const MCM_ETBCC_ITDIS_MASK: u32 = 32;
pub const MCM_ETBCC_ITDIS_SHIFT: u32 = 5;
pub const MCM_ETBRL_RELOAD_MASK: u32 = 2047;
pub const MCM_ETBRL_RELOAD_SHIFT: u32 = 0;
pub const MCM_ETBCNT_COUNTER_MASK: u32 = 2047;
pub const MCM_ETBCNT_COUNTER_SHIFT: u32 = 0;
pub const MCM_PID_PID_MASK: u32 = 255;
pub const MCM_PID_PID_SHIFT: u32 = 0;
pub const MCM_BASE: u32 = 3758620672;
#[doc = " NV - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NV_Type {
    #[doc = "< Backdoor Comparison Key 3., offset: 0x0"]
    pub BACKKEY3: u8,
    #[doc = "< Backdoor Comparison Key 2., offset: 0x1"]
    pub BACKKEY2: u8,
    #[doc = "< Backdoor Comparison Key 1., offset: 0x2"]
    pub BACKKEY1: u8,
    #[doc = "< Backdoor Comparison Key 0., offset: 0x3"]
    pub BACKKEY0: u8,
    #[doc = "< Backdoor Comparison Key 7., offset: 0x4"]
    pub BACKKEY7: u8,
    #[doc = "< Backdoor Comparison Key 6., offset: 0x5"]
    pub BACKKEY6: u8,
    #[doc = "< Backdoor Comparison Key 5., offset: 0x6"]
    pub BACKKEY5: u8,
    #[doc = "< Backdoor Comparison Key 4., offset: 0x7"]
    pub BACKKEY4: u8,
    #[doc = "< Non-volatile P-Flash Protection 1 - Low Register, offset: 0x8"]
    pub FPROT3: u8,
    #[doc = "< Non-volatile P-Flash Protection 1 - High Register, offset: 0x9"]
    pub FPROT2: u8,
    #[doc = "< Non-volatile P-Flash Protection 0 - Low Register, offset: 0xA"]
    pub FPROT1: u8,
    #[doc = "< Non-volatile P-Flash Protection 0 - High Register, offset: 0xB"]
    pub FPROT0: u8,
    #[doc = "< Non-volatile Flash Security Register, offset: 0xC"]
    pub FSEC: u8,
    #[doc = "< Non-volatile Flash Option Register, offset: 0xD"]
    pub FOPT: u8,
    #[doc = "< Non-volatile EERAM Protection Register, offset: 0xE"]
    pub FEPROT: u8,
    #[doc = "< Non-volatile D-Flash Protection Register, offset: 0xF"]
    pub FDPROT: u8,
}
#[test]
fn bindgen_test_layout_NV_Type() {
    const UNINIT: ::std::mem::MaybeUninit<NV_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NV_Type>(),
        16usize,
        concat!("Size of: ", stringify!(NV_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<NV_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(NV_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BACKKEY3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(BACKKEY3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BACKKEY2) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(BACKKEY2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BACKKEY1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(BACKKEY1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BACKKEY0) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(BACKKEY0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BACKKEY7) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(BACKKEY7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BACKKEY6) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(BACKKEY6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BACKKEY5) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(BACKKEY5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BACKKEY4) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(BACKKEY4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPROT3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(FPROT3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPROT2) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(FPROT2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPROT1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(FPROT1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FPROT0) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(FPROT0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FSEC) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(FSEC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FOPT) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(FOPT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FEPROT) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(FEPROT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FDPROT) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(NV_Type),
            "::",
            stringify!(FDPROT)
        )
    );
}
pub const NV_BACKKEY3_KEY_MASK: u32 = 255;
pub const NV_BACKKEY3_KEY_SHIFT: u32 = 0;
pub const NV_BACKKEY2_KEY_MASK: u32 = 255;
pub const NV_BACKKEY2_KEY_SHIFT: u32 = 0;
pub const NV_BACKKEY1_KEY_MASK: u32 = 255;
pub const NV_BACKKEY1_KEY_SHIFT: u32 = 0;
pub const NV_BACKKEY0_KEY_MASK: u32 = 255;
pub const NV_BACKKEY0_KEY_SHIFT: u32 = 0;
pub const NV_BACKKEY7_KEY_MASK: u32 = 255;
pub const NV_BACKKEY7_KEY_SHIFT: u32 = 0;
pub const NV_BACKKEY6_KEY_MASK: u32 = 255;
pub const NV_BACKKEY6_KEY_SHIFT: u32 = 0;
pub const NV_BACKKEY5_KEY_MASK: u32 = 255;
pub const NV_BACKKEY5_KEY_SHIFT: u32 = 0;
pub const NV_BACKKEY4_KEY_MASK: u32 = 255;
pub const NV_BACKKEY4_KEY_SHIFT: u32 = 0;
pub const NV_FPROT3_PROT_MASK: u32 = 255;
pub const NV_FPROT3_PROT_SHIFT: u32 = 0;
pub const NV_FPROT2_PROT_MASK: u32 = 255;
pub const NV_FPROT2_PROT_SHIFT: u32 = 0;
pub const NV_FPROT1_PROT_MASK: u32 = 255;
pub const NV_FPROT1_PROT_SHIFT: u32 = 0;
pub const NV_FPROT0_PROT_MASK: u32 = 255;
pub const NV_FPROT0_PROT_SHIFT: u32 = 0;
pub const NV_FSEC_SEC_MASK: u32 = 3;
pub const NV_FSEC_SEC_SHIFT: u32 = 0;
pub const NV_FSEC_FSLACC_MASK: u32 = 12;
pub const NV_FSEC_FSLACC_SHIFT: u32 = 2;
pub const NV_FSEC_MEEN_MASK: u32 = 48;
pub const NV_FSEC_MEEN_SHIFT: u32 = 4;
pub const NV_FSEC_KEYEN_MASK: u32 = 192;
pub const NV_FSEC_KEYEN_SHIFT: u32 = 6;
pub const NV_FOPT_LPBOOT_MASK: u32 = 1;
pub const NV_FOPT_LPBOOT_SHIFT: u32 = 0;
pub const NV_FOPT_EZPORT_DIS_MASK: u32 = 2;
pub const NV_FOPT_EZPORT_DIS_SHIFT: u32 = 1;
pub const NV_FOPT_NMI_DIS_MASK: u32 = 4;
pub const NV_FOPT_NMI_DIS_SHIFT: u32 = 2;
pub const NV_FEPROT_EPROT_MASK: u32 = 255;
pub const NV_FEPROT_EPROT_SHIFT: u32 = 0;
pub const NV_FDPROT_DPROT_MASK: u32 = 255;
pub const NV_FDPROT_DPROT_SHIFT: u32 = 0;
pub const FTFE_FlashConfig_BASE: u32 = 1024;
#[doc = " OSC - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OSC_Type {
    #[doc = "< OSC Control Register, offset: 0x0"]
    pub CR: u8,
}
#[test]
fn bindgen_test_layout_OSC_Type() {
    const UNINIT: ::std::mem::MaybeUninit<OSC_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OSC_Type>(),
        1usize,
        concat!("Size of: ", stringify!(OSC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<OSC_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(OSC_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OSC_Type),
            "::",
            stringify!(CR)
        )
    );
}
pub const OSC_CR_SC16P_MASK: u32 = 1;
pub const OSC_CR_SC16P_SHIFT: u32 = 0;
pub const OSC_CR_SC8P_MASK: u32 = 2;
pub const OSC_CR_SC8P_SHIFT: u32 = 1;
pub const OSC_CR_SC4P_MASK: u32 = 4;
pub const OSC_CR_SC4P_SHIFT: u32 = 2;
pub const OSC_CR_SC2P_MASK: u32 = 8;
pub const OSC_CR_SC2P_SHIFT: u32 = 3;
pub const OSC_CR_EREFSTEN_MASK: u32 = 32;
pub const OSC_CR_EREFSTEN_SHIFT: u32 = 5;
pub const OSC_CR_ERCLKEN_MASK: u32 = 128;
pub const OSC_CR_ERCLKEN_SHIFT: u32 = 7;
pub const OSC_BASE: u32 = 1074155520;
#[doc = " PDB - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDB_Type {
    #[doc = "< Status and Control register, offset: 0x0"]
    pub SC: u32,
    #[doc = "< Modulus register, offset: 0x4"]
    pub MOD: u32,
    #[doc = "< Counter register, offset: 0x8"]
    pub CNT: u32,
    #[doc = "< Interrupt Delay register, offset: 0xC"]
    pub IDLY: u32,
    pub CH: [PDB_Type__bindgen_ty_1; 2usize],
    pub RESERVED_0: [u8; 240usize],
    pub DAC: [PDB_Type__bindgen_ty_2; 2usize],
    pub RESERVED_1: [u8; 48usize],
    #[doc = "< Pulse-Out n Enable register, offset: 0x190"]
    pub POEN: u32,
    #[doc = "< Pulse-Out n Delay register, array offset: 0x194, array step: 0x4"]
    pub PODLY: [u32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDB_Type__bindgen_ty_1 {
    #[doc = "< Channel n Control register 1, array offset: 0x10, array step: 0x28"]
    pub C1: u32,
    #[doc = "< Channel n Status register, array offset: 0x14, array step: 0x28"]
    pub S: u32,
    #[doc = "< Channel n Delay 0 register..Channel n Delay 1 register, array offset: 0x18, array step: index*0x28, index2*0x4"]
    pub DLY: [u32; 2usize],
    pub RESERVED_0: [u8; 24usize],
}
#[test]
fn bindgen_test_layout_PDB_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<PDB_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PDB_Type__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(PDB_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<PDB_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(PDB_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type__bindgen_ty_1),
            "::",
            stringify!(C1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).S) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type__bindgen_ty_1),
            "::",
            stringify!(S)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DLY) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type__bindgen_ty_1),
            "::",
            stringify!(DLY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type__bindgen_ty_1),
            "::",
            stringify!(RESERVED_0)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PDB_Type__bindgen_ty_2 {
    #[doc = "< DAC Interval Trigger n Control register, array offset: 0x150, array step: 0x8"]
    pub INTC: u32,
    #[doc = "< DAC Interval n register, array offset: 0x154, array step: 0x8"]
    pub INT: u32,
}
#[test]
fn bindgen_test_layout_PDB_Type__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<PDB_Type__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PDB_Type__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(PDB_Type__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<PDB_Type__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(PDB_Type__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INTC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type__bindgen_ty_2),
            "::",
            stringify!(INTC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INT) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type__bindgen_ty_2),
            "::",
            stringify!(INT)
        )
    );
}
#[test]
fn bindgen_test_layout_PDB_Type() {
    const UNINIT: ::std::mem::MaybeUninit<PDB_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PDB_Type>(),
        416usize,
        concat!("Size of: ", stringify!(PDB_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<PDB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(PDB_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SC) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type),
            "::",
            stringify!(SC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MOD) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type),
            "::",
            stringify!(MOD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CNT) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type),
            "::",
            stringify!(CNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IDLY) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type),
            "::",
            stringify!(IDLY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CH) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type),
            "::",
            stringify!(CH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DAC) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type),
            "::",
            stringify!(DAC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POEN) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type),
            "::",
            stringify!(POEN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PODLY) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(PDB_Type),
            "::",
            stringify!(PODLY)
        )
    );
}
pub const PDB_SC_LDOK_MASK: u32 = 1;
pub const PDB_SC_LDOK_SHIFT: u32 = 0;
pub const PDB_SC_CONT_MASK: u32 = 2;
pub const PDB_SC_CONT_SHIFT: u32 = 1;
pub const PDB_SC_MULT_MASK: u32 = 12;
pub const PDB_SC_MULT_SHIFT: u32 = 2;
pub const PDB_SC_PDBIE_MASK: u32 = 32;
pub const PDB_SC_PDBIE_SHIFT: u32 = 5;
pub const PDB_SC_PDBIF_MASK: u32 = 64;
pub const PDB_SC_PDBIF_SHIFT: u32 = 6;
pub const PDB_SC_PDBEN_MASK: u32 = 128;
pub const PDB_SC_PDBEN_SHIFT: u32 = 7;
pub const PDB_SC_TRGSEL_MASK: u32 = 3840;
pub const PDB_SC_TRGSEL_SHIFT: u32 = 8;
pub const PDB_SC_PRESCALER_MASK: u32 = 28672;
pub const PDB_SC_PRESCALER_SHIFT: u32 = 12;
pub const PDB_SC_DMAEN_MASK: u32 = 32768;
pub const PDB_SC_DMAEN_SHIFT: u32 = 15;
pub const PDB_SC_SWTRIG_MASK: u32 = 65536;
pub const PDB_SC_SWTRIG_SHIFT: u32 = 16;
pub const PDB_SC_PDBEIE_MASK: u32 = 131072;
pub const PDB_SC_PDBEIE_SHIFT: u32 = 17;
pub const PDB_SC_LDMOD_MASK: u32 = 786432;
pub const PDB_SC_LDMOD_SHIFT: u32 = 18;
pub const PDB_MOD_MOD_MASK: u32 = 65535;
pub const PDB_MOD_MOD_SHIFT: u32 = 0;
pub const PDB_CNT_CNT_MASK: u32 = 65535;
pub const PDB_CNT_CNT_SHIFT: u32 = 0;
pub const PDB_IDLY_IDLY_MASK: u32 = 65535;
pub const PDB_IDLY_IDLY_SHIFT: u32 = 0;
pub const PDB_C1_EN_MASK: u32 = 255;
pub const PDB_C1_EN_SHIFT: u32 = 0;
pub const PDB_C1_TOS_MASK: u32 = 65280;
pub const PDB_C1_TOS_SHIFT: u32 = 8;
pub const PDB_C1_BB_MASK: u32 = 16711680;
pub const PDB_C1_BB_SHIFT: u32 = 16;
pub const PDB_C1_COUNT: u32 = 2;
pub const PDB_S_ERR_MASK: u32 = 255;
pub const PDB_S_ERR_SHIFT: u32 = 0;
pub const PDB_S_CF_MASK: u32 = 16711680;
pub const PDB_S_CF_SHIFT: u32 = 16;
pub const PDB_S_COUNT: u32 = 2;
pub const PDB_DLY_DLY_MASK: u32 = 65535;
pub const PDB_DLY_DLY_SHIFT: u32 = 0;
pub const PDB_DLY_COUNT: u32 = 2;
pub const PDB_DLY_COUNT2: u32 = 2;
pub const PDB_INTC_TOE_MASK: u32 = 1;
pub const PDB_INTC_TOE_SHIFT: u32 = 0;
pub const PDB_INTC_EXT_MASK: u32 = 2;
pub const PDB_INTC_EXT_SHIFT: u32 = 1;
pub const PDB_INTC_COUNT: u32 = 2;
pub const PDB_INT_INT_MASK: u32 = 65535;
pub const PDB_INT_INT_SHIFT: u32 = 0;
pub const PDB_INT_COUNT: u32 = 2;
pub const PDB_POEN_POEN_MASK: u32 = 255;
pub const PDB_POEN_POEN_SHIFT: u32 = 0;
pub const PDB_PODLY_DLY2_MASK: u32 = 65535;
pub const PDB_PODLY_DLY2_SHIFT: u32 = 0;
pub const PDB_PODLY_DLY1_MASK: u32 = 4294901760;
pub const PDB_PODLY_DLY1_SHIFT: u32 = 16;
pub const PDB_PODLY_COUNT: u32 = 3;
pub const PDB0_BASE: u32 = 1073963008;
#[doc = " PIT - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PIT_Type {
    #[doc = "< PIT Module Control Register, offset: 0x0"]
    pub MCR: u32,
    pub RESERVED_0: [u8; 252usize],
    pub CHANNEL: [PIT_Type__bindgen_ty_1; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PIT_Type__bindgen_ty_1 {
    #[doc = "< Timer Load Value Register, array offset: 0x100, array step: 0x10"]
    pub LDVAL: u32,
    #[doc = "< Current Timer Value Register, array offset: 0x104, array step: 0x10"]
    pub CVAL: u32,
    #[doc = "< Timer Control Register, array offset: 0x108, array step: 0x10"]
    pub TCTRL: u32,
    #[doc = "< Timer Flag Register, array offset: 0x10C, array step: 0x10"]
    pub TFLG: u32,
}
#[test]
fn bindgen_test_layout_PIT_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<PIT_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PIT_Type__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(PIT_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<PIT_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(PIT_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LDVAL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PIT_Type__bindgen_ty_1),
            "::",
            stringify!(LDVAL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CVAL) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PIT_Type__bindgen_ty_1),
            "::",
            stringify!(CVAL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCTRL) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PIT_Type__bindgen_ty_1),
            "::",
            stringify!(TCTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TFLG) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PIT_Type__bindgen_ty_1),
            "::",
            stringify!(TFLG)
        )
    );
}
#[test]
fn bindgen_test_layout_PIT_Type() {
    const UNINIT: ::std::mem::MaybeUninit<PIT_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PIT_Type>(),
        320usize,
        concat!("Size of: ", stringify!(PIT_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<PIT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(PIT_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PIT_Type),
            "::",
            stringify!(MCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PIT_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CHANNEL) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(PIT_Type),
            "::",
            stringify!(CHANNEL)
        )
    );
}
pub const PIT_MCR_FRZ_MASK: u32 = 1;
pub const PIT_MCR_FRZ_SHIFT: u32 = 0;
pub const PIT_MCR_MDIS_MASK: u32 = 2;
pub const PIT_MCR_MDIS_SHIFT: u32 = 1;
pub const PIT_LDVAL_TSV_MASK: u32 = 4294967295;
pub const PIT_LDVAL_TSV_SHIFT: u32 = 0;
pub const PIT_LDVAL_COUNT: u32 = 4;
pub const PIT_CVAL_TVL_MASK: u32 = 4294967295;
pub const PIT_CVAL_TVL_SHIFT: u32 = 0;
pub const PIT_CVAL_COUNT: u32 = 4;
pub const PIT_TCTRL_TEN_MASK: u32 = 1;
pub const PIT_TCTRL_TEN_SHIFT: u32 = 0;
pub const PIT_TCTRL_TIE_MASK: u32 = 2;
pub const PIT_TCTRL_TIE_SHIFT: u32 = 1;
pub const PIT_TCTRL_CHN_MASK: u32 = 4;
pub const PIT_TCTRL_CHN_SHIFT: u32 = 2;
pub const PIT_TCTRL_COUNT: u32 = 4;
pub const PIT_TFLG_TIF_MASK: u32 = 1;
pub const PIT_TFLG_TIF_SHIFT: u32 = 0;
pub const PIT_TFLG_COUNT: u32 = 4;
pub const PIT_BASE: u32 = 1073967104;
#[doc = " PMC - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PMC_Type {
    #[doc = "< Low Voltage Detect Status And Control 1 register, offset: 0x0"]
    pub LVDSC1: u8,
    #[doc = "< Low Voltage Detect Status And Control 2 register, offset: 0x1"]
    pub LVDSC2: u8,
    #[doc = "< Regulator Status And Control register, offset: 0x2"]
    pub REGSC: u8,
}
#[test]
fn bindgen_test_layout_PMC_Type() {
    const UNINIT: ::std::mem::MaybeUninit<PMC_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PMC_Type>(),
        3usize,
        concat!("Size of: ", stringify!(PMC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<PMC_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(PMC_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LVDSC1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PMC_Type),
            "::",
            stringify!(LVDSC1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LVDSC2) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(PMC_Type),
            "::",
            stringify!(LVDSC2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REGSC) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PMC_Type),
            "::",
            stringify!(REGSC)
        )
    );
}
pub const PMC_LVDSC1_LVDV_MASK: u32 = 3;
pub const PMC_LVDSC1_LVDV_SHIFT: u32 = 0;
pub const PMC_LVDSC1_LVDRE_MASK: u32 = 16;
pub const PMC_LVDSC1_LVDRE_SHIFT: u32 = 4;
pub const PMC_LVDSC1_LVDIE_MASK: u32 = 32;
pub const PMC_LVDSC1_LVDIE_SHIFT: u32 = 5;
pub const PMC_LVDSC1_LVDACK_MASK: u32 = 64;
pub const PMC_LVDSC1_LVDACK_SHIFT: u32 = 6;
pub const PMC_LVDSC1_LVDF_MASK: u32 = 128;
pub const PMC_LVDSC1_LVDF_SHIFT: u32 = 7;
pub const PMC_LVDSC2_LVWV_MASK: u32 = 3;
pub const PMC_LVDSC2_LVWV_SHIFT: u32 = 0;
pub const PMC_LVDSC2_LVWIE_MASK: u32 = 32;
pub const PMC_LVDSC2_LVWIE_SHIFT: u32 = 5;
pub const PMC_LVDSC2_LVWACK_MASK: u32 = 64;
pub const PMC_LVDSC2_LVWACK_SHIFT: u32 = 6;
pub const PMC_LVDSC2_LVWF_MASK: u32 = 128;
pub const PMC_LVDSC2_LVWF_SHIFT: u32 = 7;
pub const PMC_REGSC_BGBE_MASK: u32 = 1;
pub const PMC_REGSC_BGBE_SHIFT: u32 = 0;
pub const PMC_REGSC_REGONS_MASK: u32 = 4;
pub const PMC_REGSC_REGONS_SHIFT: u32 = 2;
pub const PMC_REGSC_ACKISO_MASK: u32 = 8;
pub const PMC_REGSC_ACKISO_SHIFT: u32 = 3;
pub const PMC_REGSC_BGEN_MASK: u32 = 16;
pub const PMC_REGSC_BGEN_SHIFT: u32 = 4;
pub const PMC_BASE: u32 = 1074253824;
#[doc = " PORT - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PORT_Type {
    #[doc = "< Pin Control Register n, array offset: 0x0, array step: 0x4"]
    pub PCR: [u32; 32usize],
    #[doc = "< Global Pin Control Low Register, offset: 0x80"]
    pub GPCLR: u32,
    #[doc = "< Global Pin Control High Register, offset: 0x84"]
    pub GPCHR: u32,
    pub RESERVED_0: [u8; 24usize],
    #[doc = "< Interrupt Status Flag Register, offset: 0xA0"]
    pub ISFR: u32,
    pub RESERVED_1: [u8; 28usize],
    #[doc = "< Digital Filter Enable Register, offset: 0xC0"]
    pub DFER: u32,
    #[doc = "< Digital Filter Clock Register, offset: 0xC4"]
    pub DFCR: u32,
    #[doc = "< Digital Filter Width Register, offset: 0xC8"]
    pub DFWR: u32,
}
#[test]
fn bindgen_test_layout_PORT_Type() {
    const UNINIT: ::std::mem::MaybeUninit<PORT_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PORT_Type>(),
        204usize,
        concat!("Size of: ", stringify!(PORT_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<PORT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(PORT_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PORT_Type),
            "::",
            stringify!(PCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPCLR) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(PORT_Type),
            "::",
            stringify!(GPCLR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GPCHR) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(PORT_Type),
            "::",
            stringify!(GPCHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(PORT_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ISFR) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(PORT_Type),
            "::",
            stringify!(ISFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(PORT_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DFER) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(PORT_Type),
            "::",
            stringify!(DFER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DFCR) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(PORT_Type),
            "::",
            stringify!(DFCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DFWR) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(PORT_Type),
            "::",
            stringify!(DFWR)
        )
    );
}
pub const PORT_PCR_PS_MASK: u32 = 1;
pub const PORT_PCR_PS_SHIFT: u32 = 0;
pub const PORT_PCR_PE_MASK: u32 = 2;
pub const PORT_PCR_PE_SHIFT: u32 = 1;
pub const PORT_PCR_SRE_MASK: u32 = 4;
pub const PORT_PCR_SRE_SHIFT: u32 = 2;
pub const PORT_PCR_PFE_MASK: u32 = 16;
pub const PORT_PCR_PFE_SHIFT: u32 = 4;
pub const PORT_PCR_ODE_MASK: u32 = 32;
pub const PORT_PCR_ODE_SHIFT: u32 = 5;
pub const PORT_PCR_DSE_MASK: u32 = 64;
pub const PORT_PCR_DSE_SHIFT: u32 = 6;
pub const PORT_PCR_MUX_MASK: u32 = 1792;
pub const PORT_PCR_MUX_SHIFT: u32 = 8;
pub const PORT_PCR_LK_MASK: u32 = 32768;
pub const PORT_PCR_LK_SHIFT: u32 = 15;
pub const PORT_PCR_IRQC_MASK: u32 = 983040;
pub const PORT_PCR_IRQC_SHIFT: u32 = 16;
pub const PORT_PCR_ISF_MASK: u32 = 16777216;
pub const PORT_PCR_ISF_SHIFT: u32 = 24;
pub const PORT_PCR_COUNT: u32 = 32;
pub const PORT_GPCLR_GPWD_MASK: u32 = 65535;
pub const PORT_GPCLR_GPWD_SHIFT: u32 = 0;
pub const PORT_GPCLR_GPWE_MASK: u32 = 4294901760;
pub const PORT_GPCLR_GPWE_SHIFT: u32 = 16;
pub const PORT_GPCHR_GPWD_MASK: u32 = 65535;
pub const PORT_GPCHR_GPWD_SHIFT: u32 = 0;
pub const PORT_GPCHR_GPWE_MASK: u32 = 4294901760;
pub const PORT_GPCHR_GPWE_SHIFT: u32 = 16;
pub const PORT_ISFR_ISF_MASK: u32 = 4294967295;
pub const PORT_ISFR_ISF_SHIFT: u32 = 0;
pub const PORT_DFER_DFE_MASK: u32 = 4294967295;
pub const PORT_DFER_DFE_SHIFT: u32 = 0;
pub const PORT_DFCR_CS_MASK: u32 = 1;
pub const PORT_DFCR_CS_SHIFT: u32 = 0;
pub const PORT_DFWR_FILT_MASK: u32 = 31;
pub const PORT_DFWR_FILT_SHIFT: u32 = 0;
pub const PORTA_BASE: u32 = 1074040832;
pub const PORTB_BASE: u32 = 1074044928;
pub const PORTC_BASE: u32 = 1074049024;
pub const PORTD_BASE: u32 = 1074053120;
pub const PORTE_BASE: u32 = 1074057216;
#[doc = " RCM - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RCM_Type {
    #[doc = "< System Reset Status Register 0, offset: 0x0"]
    pub SRS0: u8,
    #[doc = "< System Reset Status Register 1, offset: 0x1"]
    pub SRS1: u8,
    pub RESERVED_0: [u8; 2usize],
    #[doc = "< Reset Pin Filter Control register, offset: 0x4"]
    pub RPFC: u8,
    #[doc = "< Reset Pin Filter Width register, offset: 0x5"]
    pub RPFW: u8,
    pub RESERVED_1: [u8; 1usize],
    #[doc = "< Mode Register, offset: 0x7"]
    pub MR: u8,
}
#[test]
fn bindgen_test_layout_RCM_Type() {
    const UNINIT: ::std::mem::MaybeUninit<RCM_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RCM_Type>(),
        8usize,
        concat!("Size of: ", stringify!(RCM_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<RCM_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(RCM_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SRS0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RCM_Type),
            "::",
            stringify!(SRS0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SRS1) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(RCM_Type),
            "::",
            stringify!(SRS1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(RCM_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RPFC) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RCM_Type),
            "::",
            stringify!(RPFC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RPFW) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(RCM_Type),
            "::",
            stringify!(RPFW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(RCM_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MR) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(RCM_Type),
            "::",
            stringify!(MR)
        )
    );
}
pub const RCM_SRS0_WAKEUP_MASK: u32 = 1;
pub const RCM_SRS0_WAKEUP_SHIFT: u32 = 0;
pub const RCM_SRS0_LVD_MASK: u32 = 2;
pub const RCM_SRS0_LVD_SHIFT: u32 = 1;
pub const RCM_SRS0_LOC_MASK: u32 = 4;
pub const RCM_SRS0_LOC_SHIFT: u32 = 2;
pub const RCM_SRS0_LOL_MASK: u32 = 8;
pub const RCM_SRS0_LOL_SHIFT: u32 = 3;
pub const RCM_SRS0_WDOG_MASK: u32 = 32;
pub const RCM_SRS0_WDOG_SHIFT: u32 = 5;
pub const RCM_SRS0_PIN_MASK: u32 = 64;
pub const RCM_SRS0_PIN_SHIFT: u32 = 6;
pub const RCM_SRS0_POR_MASK: u32 = 128;
pub const RCM_SRS0_POR_SHIFT: u32 = 7;
pub const RCM_SRS1_JTAG_MASK: u32 = 1;
pub const RCM_SRS1_JTAG_SHIFT: u32 = 0;
pub const RCM_SRS1_LOCKUP_MASK: u32 = 2;
pub const RCM_SRS1_LOCKUP_SHIFT: u32 = 1;
pub const RCM_SRS1_SW_MASK: u32 = 4;
pub const RCM_SRS1_SW_SHIFT: u32 = 2;
pub const RCM_SRS1_MDM_AP_MASK: u32 = 8;
pub const RCM_SRS1_MDM_AP_SHIFT: u32 = 3;
pub const RCM_SRS1_EZPT_MASK: u32 = 16;
pub const RCM_SRS1_EZPT_SHIFT: u32 = 4;
pub const RCM_SRS1_SACKERR_MASK: u32 = 32;
pub const RCM_SRS1_SACKERR_SHIFT: u32 = 5;
pub const RCM_RPFC_RSTFLTSRW_MASK: u32 = 3;
pub const RCM_RPFC_RSTFLTSRW_SHIFT: u32 = 0;
pub const RCM_RPFC_RSTFLTSS_MASK: u32 = 4;
pub const RCM_RPFC_RSTFLTSS_SHIFT: u32 = 2;
pub const RCM_RPFW_RSTFLTSEL_MASK: u32 = 31;
pub const RCM_RPFW_RSTFLTSEL_SHIFT: u32 = 0;
pub const RCM_MR_EZP_MS_MASK: u32 = 2;
pub const RCM_MR_EZP_MS_SHIFT: u32 = 1;
pub const RCM_BASE: u32 = 1074262016;
#[doc = " RFSYS - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RFSYS_Type {
    #[doc = "< Register file register, array offset: 0x0, array step: 0x4"]
    pub REG: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_RFSYS_Type() {
    const UNINIT: ::std::mem::MaybeUninit<RFSYS_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RFSYS_Type>(),
        32usize,
        concat!("Size of: ", stringify!(RFSYS_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<RFSYS_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(RFSYS_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REG) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RFSYS_Type),
            "::",
            stringify!(REG)
        )
    );
}
pub const RFSYS_REG_LL_MASK: u32 = 255;
pub const RFSYS_REG_LL_SHIFT: u32 = 0;
pub const RFSYS_REG_LH_MASK: u32 = 65280;
pub const RFSYS_REG_LH_SHIFT: u32 = 8;
pub const RFSYS_REG_HL_MASK: u32 = 16711680;
pub const RFSYS_REG_HL_SHIFT: u32 = 16;
pub const RFSYS_REG_HH_MASK: u32 = 4278190080;
pub const RFSYS_REG_HH_SHIFT: u32 = 24;
pub const RFSYS_REG_COUNT: u32 = 8;
pub const RFSYS_BASE: u32 = 1074008064;
#[doc = " RFVBAT - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RFVBAT_Type {
    #[doc = "< VBAT register file register, array offset: 0x0, array step: 0x4"]
    pub REG: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_RFVBAT_Type() {
    const UNINIT: ::std::mem::MaybeUninit<RFVBAT_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RFVBAT_Type>(),
        32usize,
        concat!("Size of: ", stringify!(RFVBAT_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<RFVBAT_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(RFVBAT_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REG) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RFVBAT_Type),
            "::",
            stringify!(REG)
        )
    );
}
pub const RFVBAT_REG_LL_MASK: u32 = 255;
pub const RFVBAT_REG_LL_SHIFT: u32 = 0;
pub const RFVBAT_REG_LH_MASK: u32 = 65280;
pub const RFVBAT_REG_LH_SHIFT: u32 = 8;
pub const RFVBAT_REG_HL_MASK: u32 = 16711680;
pub const RFVBAT_REG_HL_SHIFT: u32 = 16;
pub const RFVBAT_REG_HH_MASK: u32 = 4278190080;
pub const RFVBAT_REG_HH_SHIFT: u32 = 24;
pub const RFVBAT_REG_COUNT: u32 = 8;
pub const RFVBAT_BASE: u32 = 1073995776;
#[doc = " RNG - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RNG_Type {
    #[doc = "< RNGA Control Register, offset: 0x0"]
    pub CR: u32,
    #[doc = "< RNGA Status Register, offset: 0x4"]
    pub SR: u32,
    #[doc = "< RNGA Entropy Register, offset: 0x8"]
    pub ER: u32,
    #[doc = "< RNGA Output Register, offset: 0xC"]
    pub OR: u32,
}
#[test]
fn bindgen_test_layout_RNG_Type() {
    const UNINIT: ::std::mem::MaybeUninit<RNG_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RNG_Type>(),
        16usize,
        concat!("Size of: ", stringify!(RNG_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<RNG_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(RNG_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RNG_Type),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RNG_Type),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ER) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RNG_Type),
            "::",
            stringify!(ER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RNG_Type),
            "::",
            stringify!(OR)
        )
    );
}
pub const RNG_CR_GO_MASK: u32 = 1;
pub const RNG_CR_GO_SHIFT: u32 = 0;
pub const RNG_CR_HA_MASK: u32 = 2;
pub const RNG_CR_HA_SHIFT: u32 = 1;
pub const RNG_CR_INTM_MASK: u32 = 4;
pub const RNG_CR_INTM_SHIFT: u32 = 2;
pub const RNG_CR_CLRI_MASK: u32 = 8;
pub const RNG_CR_CLRI_SHIFT: u32 = 3;
pub const RNG_CR_SLP_MASK: u32 = 16;
pub const RNG_CR_SLP_SHIFT: u32 = 4;
pub const RNG_SR_SECV_MASK: u32 = 1;
pub const RNG_SR_SECV_SHIFT: u32 = 0;
pub const RNG_SR_LRS_MASK: u32 = 2;
pub const RNG_SR_LRS_SHIFT: u32 = 1;
pub const RNG_SR_ORU_MASK: u32 = 4;
pub const RNG_SR_ORU_SHIFT: u32 = 2;
pub const RNG_SR_ERRI_MASK: u32 = 8;
pub const RNG_SR_ERRI_SHIFT: u32 = 3;
pub const RNG_SR_SLP_MASK: u32 = 16;
pub const RNG_SR_SLP_SHIFT: u32 = 4;
pub const RNG_SR_OREG_LVL_MASK: u32 = 65280;
pub const RNG_SR_OREG_LVL_SHIFT: u32 = 8;
pub const RNG_SR_OREG_SIZE_MASK: u32 = 16711680;
pub const RNG_SR_OREG_SIZE_SHIFT: u32 = 16;
pub const RNG_ER_EXT_ENT_MASK: u32 = 4294967295;
pub const RNG_ER_EXT_ENT_SHIFT: u32 = 0;
pub const RNG_OR_RANDOUT_MASK: u32 = 4294967295;
pub const RNG_OR_RANDOUT_SHIFT: u32 = 0;
pub const RNG_BASE: u32 = 1073909760;
#[doc = " RTC - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTC_Type {
    #[doc = "< RTC Time Seconds Register, offset: 0x0"]
    pub TSR: u32,
    #[doc = "< RTC Time Prescaler Register, offset: 0x4"]
    pub TPR: u32,
    #[doc = "< RTC Time Alarm Register, offset: 0x8"]
    pub TAR: u32,
    #[doc = "< RTC Time Compensation Register, offset: 0xC"]
    pub TCR: u32,
    #[doc = "< RTC Control Register, offset: 0x10"]
    pub CR: u32,
    #[doc = "< RTC Status Register, offset: 0x14"]
    pub SR: u32,
    #[doc = "< RTC Lock Register, offset: 0x18"]
    pub LR: u32,
    #[doc = "< RTC Interrupt Enable Register, offset: 0x1C"]
    pub IER: u32,
    #[doc = "< RTC Tamper Time Seconds Register, offset: 0x20"]
    pub TTSR: u32,
    #[doc = "< RTC Monotonic Enable Register, offset: 0x24"]
    pub MER: u32,
    #[doc = "< RTC Monotonic Counter Low Register, offset: 0x28"]
    pub MCLR: u32,
    #[doc = "< RTC Monotonic Counter High Register, offset: 0x2C"]
    pub MCHR: u32,
    pub RESERVED_0: [u8; 2000usize],
    #[doc = "< RTC Write Access Register, offset: 0x800"]
    pub WAR: u32,
    #[doc = "< RTC Read Access Register, offset: 0x804"]
    pub RAR: u32,
}
#[test]
fn bindgen_test_layout_RTC_Type() {
    const UNINIT: ::std::mem::MaybeUninit<RTC_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTC_Type>(),
        2056usize,
        concat!("Size of: ", stringify!(RTC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<RTC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(RTC_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(TSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TPR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(TPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TAR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(TAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(TCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(LR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TTSR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(TTSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MER) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(MER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCLR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(MCLR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCHR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(MCHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WAR) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(WAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RAR) as usize - ptr as usize },
        2052usize,
        concat!(
            "Offset of field: ",
            stringify!(RTC_Type),
            "::",
            stringify!(RAR)
        )
    );
}
pub const RTC_TSR_TSR_MASK: u32 = 4294967295;
pub const RTC_TSR_TSR_SHIFT: u32 = 0;
pub const RTC_TPR_TPR_MASK: u32 = 65535;
pub const RTC_TPR_TPR_SHIFT: u32 = 0;
pub const RTC_TAR_TAR_MASK: u32 = 4294967295;
pub const RTC_TAR_TAR_SHIFT: u32 = 0;
pub const RTC_TCR_TCR_MASK: u32 = 255;
pub const RTC_TCR_TCR_SHIFT: u32 = 0;
pub const RTC_TCR_CIR_MASK: u32 = 65280;
pub const RTC_TCR_CIR_SHIFT: u32 = 8;
pub const RTC_TCR_TCV_MASK: u32 = 16711680;
pub const RTC_TCR_TCV_SHIFT: u32 = 16;
pub const RTC_TCR_CIC_MASK: u32 = 4278190080;
pub const RTC_TCR_CIC_SHIFT: u32 = 24;
pub const RTC_CR_SWR_MASK: u32 = 1;
pub const RTC_CR_SWR_SHIFT: u32 = 0;
pub const RTC_CR_WPE_MASK: u32 = 2;
pub const RTC_CR_WPE_SHIFT: u32 = 1;
pub const RTC_CR_SUP_MASK: u32 = 4;
pub const RTC_CR_SUP_SHIFT: u32 = 2;
pub const RTC_CR_UM_MASK: u32 = 8;
pub const RTC_CR_UM_SHIFT: u32 = 3;
pub const RTC_CR_WPS_MASK: u32 = 16;
pub const RTC_CR_WPS_SHIFT: u32 = 4;
pub const RTC_CR_OSCE_MASK: u32 = 256;
pub const RTC_CR_OSCE_SHIFT: u32 = 8;
pub const RTC_CR_CLKO_MASK: u32 = 512;
pub const RTC_CR_CLKO_SHIFT: u32 = 9;
pub const RTC_CR_SC16P_MASK: u32 = 1024;
pub const RTC_CR_SC16P_SHIFT: u32 = 10;
pub const RTC_CR_SC8P_MASK: u32 = 2048;
pub const RTC_CR_SC8P_SHIFT: u32 = 11;
pub const RTC_CR_SC4P_MASK: u32 = 4096;
pub const RTC_CR_SC4P_SHIFT: u32 = 12;
pub const RTC_CR_SC2P_MASK: u32 = 8192;
pub const RTC_CR_SC2P_SHIFT: u32 = 13;
pub const RTC_SR_TIF_MASK: u32 = 1;
pub const RTC_SR_TIF_SHIFT: u32 = 0;
pub const RTC_SR_TOF_MASK: u32 = 2;
pub const RTC_SR_TOF_SHIFT: u32 = 1;
pub const RTC_SR_TAF_MASK: u32 = 4;
pub const RTC_SR_TAF_SHIFT: u32 = 2;
pub const RTC_SR_MOF_MASK: u32 = 8;
pub const RTC_SR_MOF_SHIFT: u32 = 3;
pub const RTC_SR_TCE_MASK: u32 = 16;
pub const RTC_SR_TCE_SHIFT: u32 = 4;
pub const RTC_LR_TCL_MASK: u32 = 8;
pub const RTC_LR_TCL_SHIFT: u32 = 3;
pub const RTC_LR_CRL_MASK: u32 = 16;
pub const RTC_LR_CRL_SHIFT: u32 = 4;
pub const RTC_LR_SRL_MASK: u32 = 32;
pub const RTC_LR_SRL_SHIFT: u32 = 5;
pub const RTC_LR_LRL_MASK: u32 = 64;
pub const RTC_LR_LRL_SHIFT: u32 = 6;
pub const RTC_LR_TTSL_MASK: u32 = 256;
pub const RTC_LR_TTSL_SHIFT: u32 = 8;
pub const RTC_LR_MEL_MASK: u32 = 512;
pub const RTC_LR_MEL_SHIFT: u32 = 9;
pub const RTC_LR_MCLL_MASK: u32 = 1024;
pub const RTC_LR_MCLL_SHIFT: u32 = 10;
pub const RTC_LR_MCHL_MASK: u32 = 2048;
pub const RTC_LR_MCHL_SHIFT: u32 = 11;
pub const RTC_IER_TIIE_MASK: u32 = 1;
pub const RTC_IER_TIIE_SHIFT: u32 = 0;
pub const RTC_IER_TOIE_MASK: u32 = 2;
pub const RTC_IER_TOIE_SHIFT: u32 = 1;
pub const RTC_IER_TAIE_MASK: u32 = 4;
pub const RTC_IER_TAIE_SHIFT: u32 = 2;
pub const RTC_IER_MOIE_MASK: u32 = 8;
pub const RTC_IER_MOIE_SHIFT: u32 = 3;
pub const RTC_IER_TSIE_MASK: u32 = 16;
pub const RTC_IER_TSIE_SHIFT: u32 = 4;
pub const RTC_IER_WPON_MASK: u32 = 128;
pub const RTC_IER_WPON_SHIFT: u32 = 7;
pub const RTC_TTSR_TTS_MASK: u32 = 4294967295;
pub const RTC_TTSR_TTS_SHIFT: u32 = 0;
pub const RTC_MER_MCE_MASK: u32 = 16;
pub const RTC_MER_MCE_SHIFT: u32 = 4;
pub const RTC_MCLR_MCL_MASK: u32 = 4294967295;
pub const RTC_MCLR_MCL_SHIFT: u32 = 0;
pub const RTC_MCHR_MCH_MASK: u32 = 4294967295;
pub const RTC_MCHR_MCH_SHIFT: u32 = 0;
pub const RTC_WAR_TSRW_MASK: u32 = 1;
pub const RTC_WAR_TSRW_SHIFT: u32 = 0;
pub const RTC_WAR_TPRW_MASK: u32 = 2;
pub const RTC_WAR_TPRW_SHIFT: u32 = 1;
pub const RTC_WAR_TARW_MASK: u32 = 4;
pub const RTC_WAR_TARW_SHIFT: u32 = 2;
pub const RTC_WAR_TCRW_MASK: u32 = 8;
pub const RTC_WAR_TCRW_SHIFT: u32 = 3;
pub const RTC_WAR_CRW_MASK: u32 = 16;
pub const RTC_WAR_CRW_SHIFT: u32 = 4;
pub const RTC_WAR_SRW_MASK: u32 = 32;
pub const RTC_WAR_SRW_SHIFT: u32 = 5;
pub const RTC_WAR_LRW_MASK: u32 = 64;
pub const RTC_WAR_LRW_SHIFT: u32 = 6;
pub const RTC_WAR_IERW_MASK: u32 = 128;
pub const RTC_WAR_IERW_SHIFT: u32 = 7;
pub const RTC_WAR_TTSW_MASK: u32 = 256;
pub const RTC_WAR_TTSW_SHIFT: u32 = 8;
pub const RTC_WAR_MERW_MASK: u32 = 512;
pub const RTC_WAR_MERW_SHIFT: u32 = 9;
pub const RTC_WAR_MCLW_MASK: u32 = 1024;
pub const RTC_WAR_MCLW_SHIFT: u32 = 10;
pub const RTC_WAR_MCHW_MASK: u32 = 2048;
pub const RTC_WAR_MCHW_SHIFT: u32 = 11;
pub const RTC_RAR_TSRR_MASK: u32 = 1;
pub const RTC_RAR_TSRR_SHIFT: u32 = 0;
pub const RTC_RAR_TPRR_MASK: u32 = 2;
pub const RTC_RAR_TPRR_SHIFT: u32 = 1;
pub const RTC_RAR_TARR_MASK: u32 = 4;
pub const RTC_RAR_TARR_SHIFT: u32 = 2;
pub const RTC_RAR_TCRR_MASK: u32 = 8;
pub const RTC_RAR_TCRR_SHIFT: u32 = 3;
pub const RTC_RAR_CRR_MASK: u32 = 16;
pub const RTC_RAR_CRR_SHIFT: u32 = 4;
pub const RTC_RAR_SRR_MASK: u32 = 32;
pub const RTC_RAR_SRR_SHIFT: u32 = 5;
pub const RTC_RAR_LRR_MASK: u32 = 64;
pub const RTC_RAR_LRR_SHIFT: u32 = 6;
pub const RTC_RAR_IERR_MASK: u32 = 128;
pub const RTC_RAR_IERR_SHIFT: u32 = 7;
pub const RTC_RAR_TTSR_MASK: u32 = 256;
pub const RTC_RAR_TTSR_SHIFT: u32 = 8;
pub const RTC_RAR_MERR_MASK: u32 = 512;
pub const RTC_RAR_MERR_SHIFT: u32 = 9;
pub const RTC_RAR_MCLR_MASK: u32 = 1024;
pub const RTC_RAR_MCLR_SHIFT: u32 = 10;
pub const RTC_RAR_MCHR_MASK: u32 = 2048;
pub const RTC_RAR_MCHR_SHIFT: u32 = 11;
pub const RTC_BASE: u32 = 1073991680;
#[doc = " SDHC - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDHC_Type {
    #[doc = "< DMA System Address register, offset: 0x0"]
    pub DSADDR: u32,
    #[doc = "< Block Attributes register, offset: 0x4"]
    pub BLKATTR: u32,
    #[doc = "< Command Argument register, offset: 0x8"]
    pub CMDARG: u32,
    #[doc = "< Transfer Type register, offset: 0xC"]
    pub XFERTYP: u32,
    #[doc = "< Command Response 0..Command Response 3, array offset: 0x10, array step: 0x4"]
    pub CMDRSP: [u32; 4usize],
    #[doc = "< Buffer Data Port register, offset: 0x20"]
    pub DATPORT: u32,
    #[doc = "< Present State register, offset: 0x24"]
    pub PRSSTAT: u32,
    #[doc = "< Protocol Control register, offset: 0x28"]
    pub PROCTL: u32,
    #[doc = "< System Control register, offset: 0x2C"]
    pub SYSCTL: u32,
    #[doc = "< Interrupt Status register, offset: 0x30"]
    pub IRQSTAT: u32,
    #[doc = "< Interrupt Status Enable register, offset: 0x34"]
    pub IRQSTATEN: u32,
    #[doc = "< Interrupt Signal Enable register, offset: 0x38"]
    pub IRQSIGEN: u32,
    #[doc = "< Auto CMD12 Error Status Register, offset: 0x3C"]
    pub AC12ERR: u32,
    #[doc = "< Host Controller Capabilities, offset: 0x40"]
    pub HTCAPBLT: u32,
    #[doc = "< Watermark Level Register, offset: 0x44"]
    pub WML: u32,
    pub RESERVED_0: [u8; 8usize],
    #[doc = "< Force Event register, offset: 0x50"]
    pub FEVT: u32,
    #[doc = "< ADMA Error Status register, offset: 0x54"]
    pub ADMAES: u32,
    #[doc = "< ADMA System Addressregister, offset: 0x58"]
    pub ADSADDR: u32,
    pub RESERVED_1: [u8; 100usize],
    #[doc = "< Vendor Specific register, offset: 0xC0"]
    pub VENDOR: u32,
    #[doc = "< MMC Boot register, offset: 0xC4"]
    pub MMCBOOT: u32,
    pub RESERVED_2: [u8; 52usize],
    #[doc = "< Host Controller Version, offset: 0xFC"]
    pub HOSTVER: u32,
}
#[test]
fn bindgen_test_layout_SDHC_Type() {
    const UNINIT: ::std::mem::MaybeUninit<SDHC_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SDHC_Type>(),
        256usize,
        concat!("Size of: ", stringify!(SDHC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<SDHC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SDHC_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DSADDR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(DSADDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BLKATTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(BLKATTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMDARG) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(CMDARG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).XFERTYP) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(XFERTYP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMDRSP) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(CMDRSP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DATPORT) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(DATPORT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PRSSTAT) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(PRSSTAT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PROCTL) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(PROCTL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SYSCTL) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(SYSCTL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IRQSTAT) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(IRQSTAT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IRQSTATEN) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(IRQSTATEN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IRQSIGEN) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(IRQSIGEN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AC12ERR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(AC12ERR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HTCAPBLT) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(HTCAPBLT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WML) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(WML)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FEVT) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(FEVT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ADMAES) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(ADMAES)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ADSADDR) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(ADSADDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VENDOR) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(VENDOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCBOOT) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(MMCBOOT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(RESERVED_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HOSTVER) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(SDHC_Type),
            "::",
            stringify!(HOSTVER)
        )
    );
}
pub const SDHC_DSADDR_DSADDR_MASK: u32 = 4294967292;
pub const SDHC_DSADDR_DSADDR_SHIFT: u32 = 2;
pub const SDHC_BLKATTR_BLKSIZE_MASK: u32 = 8191;
pub const SDHC_BLKATTR_BLKSIZE_SHIFT: u32 = 0;
pub const SDHC_BLKATTR_BLKCNT_MASK: u32 = 4294901760;
pub const SDHC_BLKATTR_BLKCNT_SHIFT: u32 = 16;
pub const SDHC_CMDARG_CMDARG_MASK: u32 = 4294967295;
pub const SDHC_CMDARG_CMDARG_SHIFT: u32 = 0;
pub const SDHC_XFERTYP_DMAEN_MASK: u32 = 1;
pub const SDHC_XFERTYP_DMAEN_SHIFT: u32 = 0;
pub const SDHC_XFERTYP_BCEN_MASK: u32 = 2;
pub const SDHC_XFERTYP_BCEN_SHIFT: u32 = 1;
pub const SDHC_XFERTYP_AC12EN_MASK: u32 = 4;
pub const SDHC_XFERTYP_AC12EN_SHIFT: u32 = 2;
pub const SDHC_XFERTYP_DTDSEL_MASK: u32 = 16;
pub const SDHC_XFERTYP_DTDSEL_SHIFT: u32 = 4;
pub const SDHC_XFERTYP_MSBSEL_MASK: u32 = 32;
pub const SDHC_XFERTYP_MSBSEL_SHIFT: u32 = 5;
pub const SDHC_XFERTYP_RSPTYP_MASK: u32 = 196608;
pub const SDHC_XFERTYP_RSPTYP_SHIFT: u32 = 16;
pub const SDHC_XFERTYP_CCCEN_MASK: u32 = 524288;
pub const SDHC_XFERTYP_CCCEN_SHIFT: u32 = 19;
pub const SDHC_XFERTYP_CICEN_MASK: u32 = 1048576;
pub const SDHC_XFERTYP_CICEN_SHIFT: u32 = 20;
pub const SDHC_XFERTYP_DPSEL_MASK: u32 = 2097152;
pub const SDHC_XFERTYP_DPSEL_SHIFT: u32 = 21;
pub const SDHC_XFERTYP_CMDTYP_MASK: u32 = 12582912;
pub const SDHC_XFERTYP_CMDTYP_SHIFT: u32 = 22;
pub const SDHC_XFERTYP_CMDINX_MASK: u32 = 1056964608;
pub const SDHC_XFERTYP_CMDINX_SHIFT: u32 = 24;
pub const SDHC_CMDRSP_CMDRSP0_MASK: u32 = 4294967295;
pub const SDHC_CMDRSP_CMDRSP0_SHIFT: u32 = 0;
pub const SDHC_CMDRSP_CMDRSP1_MASK: u32 = 4294967295;
pub const SDHC_CMDRSP_CMDRSP1_SHIFT: u32 = 0;
pub const SDHC_CMDRSP_CMDRSP2_MASK: u32 = 4294967295;
pub const SDHC_CMDRSP_CMDRSP2_SHIFT: u32 = 0;
pub const SDHC_CMDRSP_CMDRSP3_MASK: u32 = 4294967295;
pub const SDHC_CMDRSP_CMDRSP3_SHIFT: u32 = 0;
pub const SDHC_CMDRSP_COUNT: u32 = 4;
pub const SDHC_DATPORT_DATCONT_MASK: u32 = 4294967295;
pub const SDHC_DATPORT_DATCONT_SHIFT: u32 = 0;
pub const SDHC_PRSSTAT_CIHB_MASK: u32 = 1;
pub const SDHC_PRSSTAT_CIHB_SHIFT: u32 = 0;
pub const SDHC_PRSSTAT_CDIHB_MASK: u32 = 2;
pub const SDHC_PRSSTAT_CDIHB_SHIFT: u32 = 1;
pub const SDHC_PRSSTAT_DLA_MASK: u32 = 4;
pub const SDHC_PRSSTAT_DLA_SHIFT: u32 = 2;
pub const SDHC_PRSSTAT_SDSTB_MASK: u32 = 8;
pub const SDHC_PRSSTAT_SDSTB_SHIFT: u32 = 3;
pub const SDHC_PRSSTAT_IPGOFF_MASK: u32 = 16;
pub const SDHC_PRSSTAT_IPGOFF_SHIFT: u32 = 4;
pub const SDHC_PRSSTAT_HCKOFF_MASK: u32 = 32;
pub const SDHC_PRSSTAT_HCKOFF_SHIFT: u32 = 5;
pub const SDHC_PRSSTAT_PEROFF_MASK: u32 = 64;
pub const SDHC_PRSSTAT_PEROFF_SHIFT: u32 = 6;
pub const SDHC_PRSSTAT_SDOFF_MASK: u32 = 128;
pub const SDHC_PRSSTAT_SDOFF_SHIFT: u32 = 7;
pub const SDHC_PRSSTAT_WTA_MASK: u32 = 256;
pub const SDHC_PRSSTAT_WTA_SHIFT: u32 = 8;
pub const SDHC_PRSSTAT_RTA_MASK: u32 = 512;
pub const SDHC_PRSSTAT_RTA_SHIFT: u32 = 9;
pub const SDHC_PRSSTAT_BWEN_MASK: u32 = 1024;
pub const SDHC_PRSSTAT_BWEN_SHIFT: u32 = 10;
pub const SDHC_PRSSTAT_BREN_MASK: u32 = 2048;
pub const SDHC_PRSSTAT_BREN_SHIFT: u32 = 11;
pub const SDHC_PRSSTAT_CINS_MASK: u32 = 65536;
pub const SDHC_PRSSTAT_CINS_SHIFT: u32 = 16;
pub const SDHC_PRSSTAT_CLSL_MASK: u32 = 8388608;
pub const SDHC_PRSSTAT_CLSL_SHIFT: u32 = 23;
pub const SDHC_PRSSTAT_DLSL_MASK: u32 = 4278190080;
pub const SDHC_PRSSTAT_DLSL_SHIFT: u32 = 24;
pub const SDHC_PROCTL_LCTL_MASK: u32 = 1;
pub const SDHC_PROCTL_LCTL_SHIFT: u32 = 0;
pub const SDHC_PROCTL_DTW_MASK: u32 = 6;
pub const SDHC_PROCTL_DTW_SHIFT: u32 = 1;
pub const SDHC_PROCTL_D3CD_MASK: u32 = 8;
pub const SDHC_PROCTL_D3CD_SHIFT: u32 = 3;
pub const SDHC_PROCTL_EMODE_MASK: u32 = 48;
pub const SDHC_PROCTL_EMODE_SHIFT: u32 = 4;
pub const SDHC_PROCTL_CDTL_MASK: u32 = 64;
pub const SDHC_PROCTL_CDTL_SHIFT: u32 = 6;
pub const SDHC_PROCTL_CDSS_MASK: u32 = 128;
pub const SDHC_PROCTL_CDSS_SHIFT: u32 = 7;
pub const SDHC_PROCTL_DMAS_MASK: u32 = 768;
pub const SDHC_PROCTL_DMAS_SHIFT: u32 = 8;
pub const SDHC_PROCTL_SABGREQ_MASK: u32 = 65536;
pub const SDHC_PROCTL_SABGREQ_SHIFT: u32 = 16;
pub const SDHC_PROCTL_CREQ_MASK: u32 = 131072;
pub const SDHC_PROCTL_CREQ_SHIFT: u32 = 17;
pub const SDHC_PROCTL_RWCTL_MASK: u32 = 262144;
pub const SDHC_PROCTL_RWCTL_SHIFT: u32 = 18;
pub const SDHC_PROCTL_IABG_MASK: u32 = 524288;
pub const SDHC_PROCTL_IABG_SHIFT: u32 = 19;
pub const SDHC_PROCTL_WECINT_MASK: u32 = 16777216;
pub const SDHC_PROCTL_WECINT_SHIFT: u32 = 24;
pub const SDHC_PROCTL_WECINS_MASK: u32 = 33554432;
pub const SDHC_PROCTL_WECINS_SHIFT: u32 = 25;
pub const SDHC_PROCTL_WECRM_MASK: u32 = 67108864;
pub const SDHC_PROCTL_WECRM_SHIFT: u32 = 26;
pub const SDHC_SYSCTL_IPGEN_MASK: u32 = 1;
pub const SDHC_SYSCTL_IPGEN_SHIFT: u32 = 0;
pub const SDHC_SYSCTL_HCKEN_MASK: u32 = 2;
pub const SDHC_SYSCTL_HCKEN_SHIFT: u32 = 1;
pub const SDHC_SYSCTL_PEREN_MASK: u32 = 4;
pub const SDHC_SYSCTL_PEREN_SHIFT: u32 = 2;
pub const SDHC_SYSCTL_SDCLKEN_MASK: u32 = 8;
pub const SDHC_SYSCTL_SDCLKEN_SHIFT: u32 = 3;
pub const SDHC_SYSCTL_DVS_MASK: u32 = 240;
pub const SDHC_SYSCTL_DVS_SHIFT: u32 = 4;
pub const SDHC_SYSCTL_SDCLKFS_MASK: u32 = 65280;
pub const SDHC_SYSCTL_SDCLKFS_SHIFT: u32 = 8;
pub const SDHC_SYSCTL_DTOCV_MASK: u32 = 983040;
pub const SDHC_SYSCTL_DTOCV_SHIFT: u32 = 16;
pub const SDHC_SYSCTL_RSTA_MASK: u32 = 16777216;
pub const SDHC_SYSCTL_RSTA_SHIFT: u32 = 24;
pub const SDHC_SYSCTL_RSTC_MASK: u32 = 33554432;
pub const SDHC_SYSCTL_RSTC_SHIFT: u32 = 25;
pub const SDHC_SYSCTL_RSTD_MASK: u32 = 67108864;
pub const SDHC_SYSCTL_RSTD_SHIFT: u32 = 26;
pub const SDHC_SYSCTL_INITA_MASK: u32 = 134217728;
pub const SDHC_SYSCTL_INITA_SHIFT: u32 = 27;
pub const SDHC_IRQSTAT_CC_MASK: u32 = 1;
pub const SDHC_IRQSTAT_CC_SHIFT: u32 = 0;
pub const SDHC_IRQSTAT_TC_MASK: u32 = 2;
pub const SDHC_IRQSTAT_TC_SHIFT: u32 = 1;
pub const SDHC_IRQSTAT_BGE_MASK: u32 = 4;
pub const SDHC_IRQSTAT_BGE_SHIFT: u32 = 2;
pub const SDHC_IRQSTAT_DINT_MASK: u32 = 8;
pub const SDHC_IRQSTAT_DINT_SHIFT: u32 = 3;
pub const SDHC_IRQSTAT_BWR_MASK: u32 = 16;
pub const SDHC_IRQSTAT_BWR_SHIFT: u32 = 4;
pub const SDHC_IRQSTAT_BRR_MASK: u32 = 32;
pub const SDHC_IRQSTAT_BRR_SHIFT: u32 = 5;
pub const SDHC_IRQSTAT_CINS_MASK: u32 = 64;
pub const SDHC_IRQSTAT_CINS_SHIFT: u32 = 6;
pub const SDHC_IRQSTAT_CRM_MASK: u32 = 128;
pub const SDHC_IRQSTAT_CRM_SHIFT: u32 = 7;
pub const SDHC_IRQSTAT_CINT_MASK: u32 = 256;
pub const SDHC_IRQSTAT_CINT_SHIFT: u32 = 8;
pub const SDHC_IRQSTAT_CTOE_MASK: u32 = 65536;
pub const SDHC_IRQSTAT_CTOE_SHIFT: u32 = 16;
pub const SDHC_IRQSTAT_CCE_MASK: u32 = 131072;
pub const SDHC_IRQSTAT_CCE_SHIFT: u32 = 17;
pub const SDHC_IRQSTAT_CEBE_MASK: u32 = 262144;
pub const SDHC_IRQSTAT_CEBE_SHIFT: u32 = 18;
pub const SDHC_IRQSTAT_CIE_MASK: u32 = 524288;
pub const SDHC_IRQSTAT_CIE_SHIFT: u32 = 19;
pub const SDHC_IRQSTAT_DTOE_MASK: u32 = 1048576;
pub const SDHC_IRQSTAT_DTOE_SHIFT: u32 = 20;
pub const SDHC_IRQSTAT_DCE_MASK: u32 = 2097152;
pub const SDHC_IRQSTAT_DCE_SHIFT: u32 = 21;
pub const SDHC_IRQSTAT_DEBE_MASK: u32 = 4194304;
pub const SDHC_IRQSTAT_DEBE_SHIFT: u32 = 22;
pub const SDHC_IRQSTAT_AC12E_MASK: u32 = 16777216;
pub const SDHC_IRQSTAT_AC12E_SHIFT: u32 = 24;
pub const SDHC_IRQSTAT_DMAE_MASK: u32 = 268435456;
pub const SDHC_IRQSTAT_DMAE_SHIFT: u32 = 28;
pub const SDHC_IRQSTATEN_CCSEN_MASK: u32 = 1;
pub const SDHC_IRQSTATEN_CCSEN_SHIFT: u32 = 0;
pub const SDHC_IRQSTATEN_TCSEN_MASK: u32 = 2;
pub const SDHC_IRQSTATEN_TCSEN_SHIFT: u32 = 1;
pub const SDHC_IRQSTATEN_BGESEN_MASK: u32 = 4;
pub const SDHC_IRQSTATEN_BGESEN_SHIFT: u32 = 2;
pub const SDHC_IRQSTATEN_DINTSEN_MASK: u32 = 8;
pub const SDHC_IRQSTATEN_DINTSEN_SHIFT: u32 = 3;
pub const SDHC_IRQSTATEN_BWRSEN_MASK: u32 = 16;
pub const SDHC_IRQSTATEN_BWRSEN_SHIFT: u32 = 4;
pub const SDHC_IRQSTATEN_BRRSEN_MASK: u32 = 32;
pub const SDHC_IRQSTATEN_BRRSEN_SHIFT: u32 = 5;
pub const SDHC_IRQSTATEN_CINSEN_MASK: u32 = 64;
pub const SDHC_IRQSTATEN_CINSEN_SHIFT: u32 = 6;
pub const SDHC_IRQSTATEN_CRMSEN_MASK: u32 = 128;
pub const SDHC_IRQSTATEN_CRMSEN_SHIFT: u32 = 7;
pub const SDHC_IRQSTATEN_CINTSEN_MASK: u32 = 256;
pub const SDHC_IRQSTATEN_CINTSEN_SHIFT: u32 = 8;
pub const SDHC_IRQSTATEN_CTOESEN_MASK: u32 = 65536;
pub const SDHC_IRQSTATEN_CTOESEN_SHIFT: u32 = 16;
pub const SDHC_IRQSTATEN_CCESEN_MASK: u32 = 131072;
pub const SDHC_IRQSTATEN_CCESEN_SHIFT: u32 = 17;
pub const SDHC_IRQSTATEN_CEBESEN_MASK: u32 = 262144;
pub const SDHC_IRQSTATEN_CEBESEN_SHIFT: u32 = 18;
pub const SDHC_IRQSTATEN_CIESEN_MASK: u32 = 524288;
pub const SDHC_IRQSTATEN_CIESEN_SHIFT: u32 = 19;
pub const SDHC_IRQSTATEN_DTOESEN_MASK: u32 = 1048576;
pub const SDHC_IRQSTATEN_DTOESEN_SHIFT: u32 = 20;
pub const SDHC_IRQSTATEN_DCESEN_MASK: u32 = 2097152;
pub const SDHC_IRQSTATEN_DCESEN_SHIFT: u32 = 21;
pub const SDHC_IRQSTATEN_DEBESEN_MASK: u32 = 4194304;
pub const SDHC_IRQSTATEN_DEBESEN_SHIFT: u32 = 22;
pub const SDHC_IRQSTATEN_AC12ESEN_MASK: u32 = 16777216;
pub const SDHC_IRQSTATEN_AC12ESEN_SHIFT: u32 = 24;
pub const SDHC_IRQSTATEN_DMAESEN_MASK: u32 = 268435456;
pub const SDHC_IRQSTATEN_DMAESEN_SHIFT: u32 = 28;
pub const SDHC_IRQSIGEN_CCIEN_MASK: u32 = 1;
pub const SDHC_IRQSIGEN_CCIEN_SHIFT: u32 = 0;
pub const SDHC_IRQSIGEN_TCIEN_MASK: u32 = 2;
pub const SDHC_IRQSIGEN_TCIEN_SHIFT: u32 = 1;
pub const SDHC_IRQSIGEN_BGEIEN_MASK: u32 = 4;
pub const SDHC_IRQSIGEN_BGEIEN_SHIFT: u32 = 2;
pub const SDHC_IRQSIGEN_DINTIEN_MASK: u32 = 8;
pub const SDHC_IRQSIGEN_DINTIEN_SHIFT: u32 = 3;
pub const SDHC_IRQSIGEN_BWRIEN_MASK: u32 = 16;
pub const SDHC_IRQSIGEN_BWRIEN_SHIFT: u32 = 4;
pub const SDHC_IRQSIGEN_BRRIEN_MASK: u32 = 32;
pub const SDHC_IRQSIGEN_BRRIEN_SHIFT: u32 = 5;
pub const SDHC_IRQSIGEN_CINSIEN_MASK: u32 = 64;
pub const SDHC_IRQSIGEN_CINSIEN_SHIFT: u32 = 6;
pub const SDHC_IRQSIGEN_CRMIEN_MASK: u32 = 128;
pub const SDHC_IRQSIGEN_CRMIEN_SHIFT: u32 = 7;
pub const SDHC_IRQSIGEN_CINTIEN_MASK: u32 = 256;
pub const SDHC_IRQSIGEN_CINTIEN_SHIFT: u32 = 8;
pub const SDHC_IRQSIGEN_CTOEIEN_MASK: u32 = 65536;
pub const SDHC_IRQSIGEN_CTOEIEN_SHIFT: u32 = 16;
pub const SDHC_IRQSIGEN_CCEIEN_MASK: u32 = 131072;
pub const SDHC_IRQSIGEN_CCEIEN_SHIFT: u32 = 17;
pub const SDHC_IRQSIGEN_CEBEIEN_MASK: u32 = 262144;
pub const SDHC_IRQSIGEN_CEBEIEN_SHIFT: u32 = 18;
pub const SDHC_IRQSIGEN_CIEIEN_MASK: u32 = 524288;
pub const SDHC_IRQSIGEN_CIEIEN_SHIFT: u32 = 19;
pub const SDHC_IRQSIGEN_DTOEIEN_MASK: u32 = 1048576;
pub const SDHC_IRQSIGEN_DTOEIEN_SHIFT: u32 = 20;
pub const SDHC_IRQSIGEN_DCEIEN_MASK: u32 = 2097152;
pub const SDHC_IRQSIGEN_DCEIEN_SHIFT: u32 = 21;
pub const SDHC_IRQSIGEN_DEBEIEN_MASK: u32 = 4194304;
pub const SDHC_IRQSIGEN_DEBEIEN_SHIFT: u32 = 22;
pub const SDHC_IRQSIGEN_AC12EIEN_MASK: u32 = 16777216;
pub const SDHC_IRQSIGEN_AC12EIEN_SHIFT: u32 = 24;
pub const SDHC_IRQSIGEN_DMAEIEN_MASK: u32 = 268435456;
pub const SDHC_IRQSIGEN_DMAEIEN_SHIFT: u32 = 28;
pub const SDHC_AC12ERR_AC12NE_MASK: u32 = 1;
pub const SDHC_AC12ERR_AC12NE_SHIFT: u32 = 0;
pub const SDHC_AC12ERR_AC12TOE_MASK: u32 = 2;
pub const SDHC_AC12ERR_AC12TOE_SHIFT: u32 = 1;
pub const SDHC_AC12ERR_AC12EBE_MASK: u32 = 4;
pub const SDHC_AC12ERR_AC12EBE_SHIFT: u32 = 2;
pub const SDHC_AC12ERR_AC12CE_MASK: u32 = 8;
pub const SDHC_AC12ERR_AC12CE_SHIFT: u32 = 3;
pub const SDHC_AC12ERR_AC12IE_MASK: u32 = 16;
pub const SDHC_AC12ERR_AC12IE_SHIFT: u32 = 4;
pub const SDHC_AC12ERR_CNIBAC12E_MASK: u32 = 128;
pub const SDHC_AC12ERR_CNIBAC12E_SHIFT: u32 = 7;
pub const SDHC_HTCAPBLT_MBL_MASK: u32 = 458752;
pub const SDHC_HTCAPBLT_MBL_SHIFT: u32 = 16;
pub const SDHC_HTCAPBLT_ADMAS_MASK: u32 = 1048576;
pub const SDHC_HTCAPBLT_ADMAS_SHIFT: u32 = 20;
pub const SDHC_HTCAPBLT_HSS_MASK: u32 = 2097152;
pub const SDHC_HTCAPBLT_HSS_SHIFT: u32 = 21;
pub const SDHC_HTCAPBLT_DMAS_MASK: u32 = 4194304;
pub const SDHC_HTCAPBLT_DMAS_SHIFT: u32 = 22;
pub const SDHC_HTCAPBLT_SRS_MASK: u32 = 8388608;
pub const SDHC_HTCAPBLT_SRS_SHIFT: u32 = 23;
pub const SDHC_HTCAPBLT_VS33_MASK: u32 = 16777216;
pub const SDHC_HTCAPBLT_VS33_SHIFT: u32 = 24;
pub const SDHC_WML_RDWML_MASK: u32 = 255;
pub const SDHC_WML_RDWML_SHIFT: u32 = 0;
pub const SDHC_WML_WRWML_MASK: u32 = 16711680;
pub const SDHC_WML_WRWML_SHIFT: u32 = 16;
pub const SDHC_FEVT_AC12NE_MASK: u32 = 1;
pub const SDHC_FEVT_AC12NE_SHIFT: u32 = 0;
pub const SDHC_FEVT_AC12TOE_MASK: u32 = 2;
pub const SDHC_FEVT_AC12TOE_SHIFT: u32 = 1;
pub const SDHC_FEVT_AC12CE_MASK: u32 = 4;
pub const SDHC_FEVT_AC12CE_SHIFT: u32 = 2;
pub const SDHC_FEVT_AC12EBE_MASK: u32 = 8;
pub const SDHC_FEVT_AC12EBE_SHIFT: u32 = 3;
pub const SDHC_FEVT_AC12IE_MASK: u32 = 16;
pub const SDHC_FEVT_AC12IE_SHIFT: u32 = 4;
pub const SDHC_FEVT_CNIBAC12E_MASK: u32 = 128;
pub const SDHC_FEVT_CNIBAC12E_SHIFT: u32 = 7;
pub const SDHC_FEVT_CTOE_MASK: u32 = 65536;
pub const SDHC_FEVT_CTOE_SHIFT: u32 = 16;
pub const SDHC_FEVT_CCE_MASK: u32 = 131072;
pub const SDHC_FEVT_CCE_SHIFT: u32 = 17;
pub const SDHC_FEVT_CEBE_MASK: u32 = 262144;
pub const SDHC_FEVT_CEBE_SHIFT: u32 = 18;
pub const SDHC_FEVT_CIE_MASK: u32 = 524288;
pub const SDHC_FEVT_CIE_SHIFT: u32 = 19;
pub const SDHC_FEVT_DTOE_MASK: u32 = 1048576;
pub const SDHC_FEVT_DTOE_SHIFT: u32 = 20;
pub const SDHC_FEVT_DCE_MASK: u32 = 2097152;
pub const SDHC_FEVT_DCE_SHIFT: u32 = 21;
pub const SDHC_FEVT_DEBE_MASK: u32 = 4194304;
pub const SDHC_FEVT_DEBE_SHIFT: u32 = 22;
pub const SDHC_FEVT_AC12E_MASK: u32 = 16777216;
pub const SDHC_FEVT_AC12E_SHIFT: u32 = 24;
pub const SDHC_FEVT_DMAE_MASK: u32 = 268435456;
pub const SDHC_FEVT_DMAE_SHIFT: u32 = 28;
pub const SDHC_FEVT_CINT_MASK: u32 = 2147483648;
pub const SDHC_FEVT_CINT_SHIFT: u32 = 31;
pub const SDHC_ADMAES_ADMAES_MASK: u32 = 3;
pub const SDHC_ADMAES_ADMAES_SHIFT: u32 = 0;
pub const SDHC_ADMAES_ADMALME_MASK: u32 = 4;
pub const SDHC_ADMAES_ADMALME_SHIFT: u32 = 2;
pub const SDHC_ADMAES_ADMADCE_MASK: u32 = 8;
pub const SDHC_ADMAES_ADMADCE_SHIFT: u32 = 3;
pub const SDHC_ADSADDR_ADSADDR_MASK: u32 = 4294967292;
pub const SDHC_ADSADDR_ADSADDR_SHIFT: u32 = 2;
pub const SDHC_VENDOR_EXTDMAEN_MASK: u32 = 1;
pub const SDHC_VENDOR_EXTDMAEN_SHIFT: u32 = 0;
pub const SDHC_VENDOR_EXBLKNU_MASK: u32 = 2;
pub const SDHC_VENDOR_EXBLKNU_SHIFT: u32 = 1;
pub const SDHC_VENDOR_INTSTVAL_MASK: u32 = 16711680;
pub const SDHC_VENDOR_INTSTVAL_SHIFT: u32 = 16;
pub const SDHC_MMCBOOT_DTOCVACK_MASK: u32 = 15;
pub const SDHC_MMCBOOT_DTOCVACK_SHIFT: u32 = 0;
pub const SDHC_MMCBOOT_BOOTACK_MASK: u32 = 16;
pub const SDHC_MMCBOOT_BOOTACK_SHIFT: u32 = 4;
pub const SDHC_MMCBOOT_BOOTMODE_MASK: u32 = 32;
pub const SDHC_MMCBOOT_BOOTMODE_SHIFT: u32 = 5;
pub const SDHC_MMCBOOT_BOOTEN_MASK: u32 = 64;
pub const SDHC_MMCBOOT_BOOTEN_SHIFT: u32 = 6;
pub const SDHC_MMCBOOT_AUTOSABGEN_MASK: u32 = 128;
pub const SDHC_MMCBOOT_AUTOSABGEN_SHIFT: u32 = 7;
pub const SDHC_MMCBOOT_BOOTBLKCNT_MASK: u32 = 4294901760;
pub const SDHC_MMCBOOT_BOOTBLKCNT_SHIFT: u32 = 16;
pub const SDHC_HOSTVER_SVN_MASK: u32 = 255;
pub const SDHC_HOSTVER_SVN_SHIFT: u32 = 0;
pub const SDHC_HOSTVER_VVN_MASK: u32 = 65280;
pub const SDHC_HOSTVER_VVN_SHIFT: u32 = 8;
pub const SDHC_BASE: u32 = 1074466816;
#[doc = " SIM - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIM_Type {
    #[doc = "< System Options Register 1, offset: 0x0"]
    pub SOPT1: u32,
    #[doc = "< SOPT1 Configuration Register, offset: 0x4"]
    pub SOPT1CFG: u32,
    pub RESERVED_0: [u8; 4092usize],
    #[doc = "< System Options Register 2, offset: 0x1004"]
    pub SOPT2: u32,
    pub RESERVED_1: [u8; 4usize],
    #[doc = "< System Options Register 4, offset: 0x100C"]
    pub SOPT4: u32,
    #[doc = "< System Options Register 5, offset: 0x1010"]
    pub SOPT5: u32,
    pub RESERVED_2: [u8; 4usize],
    #[doc = "< System Options Register 7, offset: 0x1018"]
    pub SOPT7: u32,
    pub RESERVED_3: [u8; 8usize],
    #[doc = "< System Device Identification Register, offset: 0x1024"]
    pub SDID: u32,
    #[doc = "< System Clock Gating Control Register 1, offset: 0x1028"]
    pub SCGC1: u32,
    #[doc = "< System Clock Gating Control Register 2, offset: 0x102C"]
    pub SCGC2: u32,
    #[doc = "< System Clock Gating Control Register 3, offset: 0x1030"]
    pub SCGC3: u32,
    #[doc = "< System Clock Gating Control Register 4, offset: 0x1034"]
    pub SCGC4: u32,
    #[doc = "< System Clock Gating Control Register 5, offset: 0x1038"]
    pub SCGC5: u32,
    #[doc = "< System Clock Gating Control Register 6, offset: 0x103C"]
    pub SCGC6: u32,
    #[doc = "< System Clock Gating Control Register 7, offset: 0x1040"]
    pub SCGC7: u32,
    #[doc = "< System Clock Divider Register 1, offset: 0x1044"]
    pub CLKDIV1: u32,
    #[doc = "< System Clock Divider Register 2, offset: 0x1048"]
    pub CLKDIV2: u32,
    #[doc = "< Flash Configuration Register 1, offset: 0x104C"]
    pub FCFG1: u32,
    #[doc = "< Flash Configuration Register 2, offset: 0x1050"]
    pub FCFG2: u32,
    #[doc = "< Unique Identification Register High, offset: 0x1054"]
    pub UIDH: u32,
    #[doc = "< Unique Identification Register Mid-High, offset: 0x1058"]
    pub UIDMH: u32,
    #[doc = "< Unique Identification Register Mid Low, offset: 0x105C"]
    pub UIDML: u32,
    #[doc = "< Unique Identification Register Low, offset: 0x1060"]
    pub UIDL: u32,
}
#[test]
fn bindgen_test_layout_SIM_Type() {
    const UNINIT: ::std::mem::MaybeUninit<SIM_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SIM_Type>(),
        4196usize,
        concat!("Size of: ", stringify!(SIM_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<SIM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SIM_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SOPT1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SOPT1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SOPT1CFG) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SOPT1CFG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SOPT2) as usize - ptr as usize },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SOPT2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SOPT4) as usize - ptr as usize },
        4108usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SOPT4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SOPT5) as usize - ptr as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SOPT5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_2) as usize - ptr as usize },
        4116usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(RESERVED_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SOPT7) as usize - ptr as usize },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SOPT7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_3) as usize - ptr as usize },
        4124usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(RESERVED_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SDID) as usize - ptr as usize },
        4132usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SDID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SCGC1) as usize - ptr as usize },
        4136usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SCGC1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SCGC2) as usize - ptr as usize },
        4140usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SCGC2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SCGC3) as usize - ptr as usize },
        4144usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SCGC3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SCGC4) as usize - ptr as usize },
        4148usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SCGC4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SCGC5) as usize - ptr as usize },
        4152usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SCGC5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SCGC6) as usize - ptr as usize },
        4156usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SCGC6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SCGC7) as usize - ptr as usize },
        4160usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(SCGC7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLKDIV1) as usize - ptr as usize },
        4164usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(CLKDIV1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLKDIV2) as usize - ptr as usize },
        4168usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(CLKDIV2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCFG1) as usize - ptr as usize },
        4172usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(FCFG1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FCFG2) as usize - ptr as usize },
        4176usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(FCFG2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UIDH) as usize - ptr as usize },
        4180usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(UIDH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UIDMH) as usize - ptr as usize },
        4184usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(UIDMH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UIDML) as usize - ptr as usize },
        4188usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(UIDML)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UIDL) as usize - ptr as usize },
        4192usize,
        concat!(
            "Offset of field: ",
            stringify!(SIM_Type),
            "::",
            stringify!(UIDL)
        )
    );
}
pub const SIM_SOPT1_RAMSIZE_MASK: u32 = 61440;
pub const SIM_SOPT1_RAMSIZE_SHIFT: u32 = 12;
pub const SIM_SOPT1_OSC32KSEL_MASK: u32 = 786432;
pub const SIM_SOPT1_OSC32KSEL_SHIFT: u32 = 18;
pub const SIM_SOPT1_USBVSTBY_MASK: u32 = 536870912;
pub const SIM_SOPT1_USBVSTBY_SHIFT: u32 = 29;
pub const SIM_SOPT1_USBSSTBY_MASK: u32 = 1073741824;
pub const SIM_SOPT1_USBSSTBY_SHIFT: u32 = 30;
pub const SIM_SOPT1_USBREGEN_MASK: u32 = 2147483648;
pub const SIM_SOPT1_USBREGEN_SHIFT: u32 = 31;
pub const SIM_SOPT1CFG_URWE_MASK: u32 = 16777216;
pub const SIM_SOPT1CFG_URWE_SHIFT: u32 = 24;
pub const SIM_SOPT1CFG_UVSWE_MASK: u32 = 33554432;
pub const SIM_SOPT1CFG_UVSWE_SHIFT: u32 = 25;
pub const SIM_SOPT1CFG_USSWE_MASK: u32 = 67108864;
pub const SIM_SOPT1CFG_USSWE_SHIFT: u32 = 26;
pub const SIM_SOPT2_RTCCLKOUTSEL_MASK: u32 = 16;
pub const SIM_SOPT2_RTCCLKOUTSEL_SHIFT: u32 = 4;
pub const SIM_SOPT2_CLKOUTSEL_MASK: u32 = 224;
pub const SIM_SOPT2_CLKOUTSEL_SHIFT: u32 = 5;
pub const SIM_SOPT2_FBSL_MASK: u32 = 768;
pub const SIM_SOPT2_FBSL_SHIFT: u32 = 8;
pub const SIM_SOPT2_PTD7PAD_MASK: u32 = 2048;
pub const SIM_SOPT2_PTD7PAD_SHIFT: u32 = 11;
pub const SIM_SOPT2_TRACECLKSEL_MASK: u32 = 4096;
pub const SIM_SOPT2_TRACECLKSEL_SHIFT: u32 = 12;
pub const SIM_SOPT2_PLLFLLSEL_MASK: u32 = 65536;
pub const SIM_SOPT2_PLLFLLSEL_SHIFT: u32 = 16;
pub const SIM_SOPT2_USBSRC_MASK: u32 = 262144;
pub const SIM_SOPT2_USBSRC_SHIFT: u32 = 18;
pub const SIM_SOPT2_SDHCSRC_MASK: u32 = 805306368;
pub const SIM_SOPT2_SDHCSRC_SHIFT: u32 = 28;
pub const SIM_SOPT4_FTM0FLT0_MASK: u32 = 1;
pub const SIM_SOPT4_FTM0FLT0_SHIFT: u32 = 0;
pub const SIM_SOPT4_FTM0FLT1_MASK: u32 = 2;
pub const SIM_SOPT4_FTM0FLT1_SHIFT: u32 = 1;
pub const SIM_SOPT4_FTM0FLT2_MASK: u32 = 4;
pub const SIM_SOPT4_FTM0FLT2_SHIFT: u32 = 2;
pub const SIM_SOPT4_FTM1FLT0_MASK: u32 = 16;
pub const SIM_SOPT4_FTM1FLT0_SHIFT: u32 = 4;
pub const SIM_SOPT4_FTM2FLT0_MASK: u32 = 256;
pub const SIM_SOPT4_FTM2FLT0_SHIFT: u32 = 8;
pub const SIM_SOPT4_FTM3FLT0_MASK: u32 = 4096;
pub const SIM_SOPT4_FTM3FLT0_SHIFT: u32 = 12;
pub const SIM_SOPT4_FTM1CH0SRC_MASK: u32 = 786432;
pub const SIM_SOPT4_FTM1CH0SRC_SHIFT: u32 = 18;
pub const SIM_SOPT4_FTM2CH0SRC_MASK: u32 = 3145728;
pub const SIM_SOPT4_FTM2CH0SRC_SHIFT: u32 = 20;
pub const SIM_SOPT4_FTM0CLKSEL_MASK: u32 = 16777216;
pub const SIM_SOPT4_FTM0CLKSEL_SHIFT: u32 = 24;
pub const SIM_SOPT4_FTM1CLKSEL_MASK: u32 = 33554432;
pub const SIM_SOPT4_FTM1CLKSEL_SHIFT: u32 = 25;
pub const SIM_SOPT4_FTM2CLKSEL_MASK: u32 = 67108864;
pub const SIM_SOPT4_FTM2CLKSEL_SHIFT: u32 = 26;
pub const SIM_SOPT4_FTM3CLKSEL_MASK: u32 = 134217728;
pub const SIM_SOPT4_FTM3CLKSEL_SHIFT: u32 = 27;
pub const SIM_SOPT4_FTM0TRG0SRC_MASK: u32 = 268435456;
pub const SIM_SOPT4_FTM0TRG0SRC_SHIFT: u32 = 28;
pub const SIM_SOPT4_FTM0TRG1SRC_MASK: u32 = 536870912;
pub const SIM_SOPT4_FTM0TRG1SRC_SHIFT: u32 = 29;
pub const SIM_SOPT4_FTM3TRG0SRC_MASK: u32 = 1073741824;
pub const SIM_SOPT4_FTM3TRG0SRC_SHIFT: u32 = 30;
pub const SIM_SOPT4_FTM3TRG1SRC_MASK: u32 = 2147483648;
pub const SIM_SOPT4_FTM3TRG1SRC_SHIFT: u32 = 31;
pub const SIM_SOPT5_UART0TXSRC_MASK: u32 = 3;
pub const SIM_SOPT5_UART0TXSRC_SHIFT: u32 = 0;
pub const SIM_SOPT5_UART0RXSRC_MASK: u32 = 12;
pub const SIM_SOPT5_UART0RXSRC_SHIFT: u32 = 2;
pub const SIM_SOPT5_UART1TXSRC_MASK: u32 = 48;
pub const SIM_SOPT5_UART1TXSRC_SHIFT: u32 = 4;
pub const SIM_SOPT5_UART1RXSRC_MASK: u32 = 192;
pub const SIM_SOPT5_UART1RXSRC_SHIFT: u32 = 6;
pub const SIM_SOPT7_ADC0TRGSEL_MASK: u32 = 15;
pub const SIM_SOPT7_ADC0TRGSEL_SHIFT: u32 = 0;
pub const SIM_SOPT7_ADC0PRETRGSEL_MASK: u32 = 16;
pub const SIM_SOPT7_ADC0PRETRGSEL_SHIFT: u32 = 4;
pub const SIM_SOPT7_ADC0ALTTRGEN_MASK: u32 = 128;
pub const SIM_SOPT7_ADC0ALTTRGEN_SHIFT: u32 = 7;
pub const SIM_SOPT7_ADC1TRGSEL_MASK: u32 = 3840;
pub const SIM_SOPT7_ADC1TRGSEL_SHIFT: u32 = 8;
pub const SIM_SOPT7_ADC1PRETRGSEL_MASK: u32 = 4096;
pub const SIM_SOPT7_ADC1PRETRGSEL_SHIFT: u32 = 12;
pub const SIM_SOPT7_ADC1ALTTRGEN_MASK: u32 = 32768;
pub const SIM_SOPT7_ADC1ALTTRGEN_SHIFT: u32 = 15;
pub const SIM_SDID_PINID_MASK: u32 = 15;
pub const SIM_SDID_PINID_SHIFT: u32 = 0;
pub const SIM_SDID_FAMID_MASK: u32 = 112;
pub const SIM_SDID_FAMID_SHIFT: u32 = 4;
pub const SIM_SDID_DIEID_MASK: u32 = 3968;
pub const SIM_SDID_DIEID_SHIFT: u32 = 7;
pub const SIM_SDID_REVID_MASK: u32 = 61440;
pub const SIM_SDID_REVID_SHIFT: u32 = 12;
pub const SIM_SCGC1_I2C2_MASK: u32 = 64;
pub const SIM_SCGC1_I2C2_SHIFT: u32 = 6;
pub const SIM_SCGC1_UART4_MASK: u32 = 1024;
pub const SIM_SCGC1_UART4_SHIFT: u32 = 10;
pub const SIM_SCGC1_UART5_MASK: u32 = 2048;
pub const SIM_SCGC1_UART5_SHIFT: u32 = 11;
pub const SIM_SCGC2_DAC0_MASK: u32 = 4096;
pub const SIM_SCGC2_DAC0_SHIFT: u32 = 12;
pub const SIM_SCGC2_DAC1_MASK: u32 = 8192;
pub const SIM_SCGC2_DAC1_SHIFT: u32 = 13;
pub const SIM_SCGC3_RNGA_MASK: u32 = 1;
pub const SIM_SCGC3_RNGA_SHIFT: u32 = 0;
pub const SIM_SCGC3_SPI2_MASK: u32 = 4096;
pub const SIM_SCGC3_SPI2_SHIFT: u32 = 12;
pub const SIM_SCGC3_SDHC_MASK: u32 = 131072;
pub const SIM_SCGC3_SDHC_SHIFT: u32 = 17;
pub const SIM_SCGC3_FTM2_MASK: u32 = 16777216;
pub const SIM_SCGC3_FTM2_SHIFT: u32 = 24;
pub const SIM_SCGC3_FTM3_MASK: u32 = 33554432;
pub const SIM_SCGC3_FTM3_SHIFT: u32 = 25;
pub const SIM_SCGC3_ADC1_MASK: u32 = 134217728;
pub const SIM_SCGC3_ADC1_SHIFT: u32 = 27;
pub const SIM_SCGC4_EWM_MASK: u32 = 2;
pub const SIM_SCGC4_EWM_SHIFT: u32 = 1;
pub const SIM_SCGC4_CMT_MASK: u32 = 4;
pub const SIM_SCGC4_CMT_SHIFT: u32 = 2;
pub const SIM_SCGC4_I2C0_MASK: u32 = 64;
pub const SIM_SCGC4_I2C0_SHIFT: u32 = 6;
pub const SIM_SCGC4_I2C1_MASK: u32 = 128;
pub const SIM_SCGC4_I2C1_SHIFT: u32 = 7;
pub const SIM_SCGC4_UART0_MASK: u32 = 1024;
pub const SIM_SCGC4_UART0_SHIFT: u32 = 10;
pub const SIM_SCGC4_UART1_MASK: u32 = 2048;
pub const SIM_SCGC4_UART1_SHIFT: u32 = 11;
pub const SIM_SCGC4_UART2_MASK: u32 = 4096;
pub const SIM_SCGC4_UART2_SHIFT: u32 = 12;
pub const SIM_SCGC4_UART3_MASK: u32 = 8192;
pub const SIM_SCGC4_UART3_SHIFT: u32 = 13;
pub const SIM_SCGC4_USBOTG_MASK: u32 = 262144;
pub const SIM_SCGC4_USBOTG_SHIFT: u32 = 18;
pub const SIM_SCGC4_CMP_MASK: u32 = 524288;
pub const SIM_SCGC4_CMP_SHIFT: u32 = 19;
pub const SIM_SCGC4_VREF_MASK: u32 = 1048576;
pub const SIM_SCGC4_VREF_SHIFT: u32 = 20;
pub const SIM_SCGC5_LPTMR_MASK: u32 = 1;
pub const SIM_SCGC5_LPTMR_SHIFT: u32 = 0;
pub const SIM_SCGC5_PORTA_MASK: u32 = 512;
pub const SIM_SCGC5_PORTA_SHIFT: u32 = 9;
pub const SIM_SCGC5_PORTB_MASK: u32 = 1024;
pub const SIM_SCGC5_PORTB_SHIFT: u32 = 10;
pub const SIM_SCGC5_PORTC_MASK: u32 = 2048;
pub const SIM_SCGC5_PORTC_SHIFT: u32 = 11;
pub const SIM_SCGC5_PORTD_MASK: u32 = 4096;
pub const SIM_SCGC5_PORTD_SHIFT: u32 = 12;
pub const SIM_SCGC5_PORTE_MASK: u32 = 8192;
pub const SIM_SCGC5_PORTE_SHIFT: u32 = 13;
pub const SIM_SCGC6_FTF_MASK: u32 = 1;
pub const SIM_SCGC6_FTF_SHIFT: u32 = 0;
pub const SIM_SCGC6_DMAMUX_MASK: u32 = 2;
pub const SIM_SCGC6_DMAMUX_SHIFT: u32 = 1;
pub const SIM_SCGC6_FLEXCAN0_MASK: u32 = 16;
pub const SIM_SCGC6_FLEXCAN0_SHIFT: u32 = 4;
pub const SIM_SCGC6_RNGA_MASK: u32 = 512;
pub const SIM_SCGC6_RNGA_SHIFT: u32 = 9;
pub const SIM_SCGC6_SPI0_MASK: u32 = 4096;
pub const SIM_SCGC6_SPI0_SHIFT: u32 = 12;
pub const SIM_SCGC6_SPI1_MASK: u32 = 8192;
pub const SIM_SCGC6_SPI1_SHIFT: u32 = 13;
pub const SIM_SCGC6_I2S_MASK: u32 = 32768;
pub const SIM_SCGC6_I2S_SHIFT: u32 = 15;
pub const SIM_SCGC6_CRC_MASK: u32 = 262144;
pub const SIM_SCGC6_CRC_SHIFT: u32 = 18;
pub const SIM_SCGC6_USBDCD_MASK: u32 = 2097152;
pub const SIM_SCGC6_USBDCD_SHIFT: u32 = 21;
pub const SIM_SCGC6_PDB_MASK: u32 = 4194304;
pub const SIM_SCGC6_PDB_SHIFT: u32 = 22;
pub const SIM_SCGC6_PIT_MASK: u32 = 8388608;
pub const SIM_SCGC6_PIT_SHIFT: u32 = 23;
pub const SIM_SCGC6_FTM0_MASK: u32 = 16777216;
pub const SIM_SCGC6_FTM0_SHIFT: u32 = 24;
pub const SIM_SCGC6_FTM1_MASK: u32 = 33554432;
pub const SIM_SCGC6_FTM1_SHIFT: u32 = 25;
pub const SIM_SCGC6_FTM2_MASK: u32 = 67108864;
pub const SIM_SCGC6_FTM2_SHIFT: u32 = 26;
pub const SIM_SCGC6_ADC0_MASK: u32 = 134217728;
pub const SIM_SCGC6_ADC0_SHIFT: u32 = 27;
pub const SIM_SCGC6_RTC_MASK: u32 = 536870912;
pub const SIM_SCGC6_RTC_SHIFT: u32 = 29;
pub const SIM_SCGC6_DAC0_MASK: u32 = 2147483648;
pub const SIM_SCGC6_DAC0_SHIFT: u32 = 31;
pub const SIM_SCGC7_FLEXBUS_MASK: u32 = 1;
pub const SIM_SCGC7_FLEXBUS_SHIFT: u32 = 0;
pub const SIM_SCGC7_DMA_MASK: u32 = 2;
pub const SIM_SCGC7_DMA_SHIFT: u32 = 1;
pub const SIM_SCGC7_MPU_MASK: u32 = 4;
pub const SIM_SCGC7_MPU_SHIFT: u32 = 2;
pub const SIM_CLKDIV1_OUTDIV4_MASK: u32 = 983040;
pub const SIM_CLKDIV1_OUTDIV4_SHIFT: u32 = 16;
pub const SIM_CLKDIV1_OUTDIV3_MASK: u32 = 15728640;
pub const SIM_CLKDIV1_OUTDIV3_SHIFT: u32 = 20;
pub const SIM_CLKDIV1_OUTDIV2_MASK: u32 = 251658240;
pub const SIM_CLKDIV1_OUTDIV2_SHIFT: u32 = 24;
pub const SIM_CLKDIV1_OUTDIV1_MASK: u32 = 4026531840;
pub const SIM_CLKDIV1_OUTDIV1_SHIFT: u32 = 28;
pub const SIM_CLKDIV2_USBFRAC_MASK: u32 = 1;
pub const SIM_CLKDIV2_USBFRAC_SHIFT: u32 = 0;
pub const SIM_CLKDIV2_USBDIV_MASK: u32 = 14;
pub const SIM_CLKDIV2_USBDIV_SHIFT: u32 = 1;
pub const SIM_FCFG1_FLASHDIS_MASK: u32 = 1;
pub const SIM_FCFG1_FLASHDIS_SHIFT: u32 = 0;
pub const SIM_FCFG1_FLASHDOZE_MASK: u32 = 2;
pub const SIM_FCFG1_FLASHDOZE_SHIFT: u32 = 1;
pub const SIM_FCFG1_DEPART_MASK: u32 = 3840;
pub const SIM_FCFG1_DEPART_SHIFT: u32 = 8;
pub const SIM_FCFG1_EESIZE_MASK: u32 = 983040;
pub const SIM_FCFG1_EESIZE_SHIFT: u32 = 16;
pub const SIM_FCFG1_PFSIZE_MASK: u32 = 251658240;
pub const SIM_FCFG1_PFSIZE_SHIFT: u32 = 24;
pub const SIM_FCFG1_NVMSIZE_MASK: u32 = 4026531840;
pub const SIM_FCFG1_NVMSIZE_SHIFT: u32 = 28;
pub const SIM_FCFG2_MAXADDR1_MASK: u32 = 8323072;
pub const SIM_FCFG2_MAXADDR1_SHIFT: u32 = 16;
pub const SIM_FCFG2_PFLSH_MASK: u32 = 8388608;
pub const SIM_FCFG2_PFLSH_SHIFT: u32 = 23;
pub const SIM_FCFG2_MAXADDR0_MASK: u32 = 2130706432;
pub const SIM_FCFG2_MAXADDR0_SHIFT: u32 = 24;
pub const SIM_FCFG2_SWAPPFLSH_MASK: u32 = 2147483648;
pub const SIM_FCFG2_SWAPPFLSH_SHIFT: u32 = 31;
pub const SIM_UIDH_UID_MASK: u32 = 4294967295;
pub const SIM_UIDH_UID_SHIFT: u32 = 0;
pub const SIM_UIDMH_UID_MASK: u32 = 4294967295;
pub const SIM_UIDMH_UID_SHIFT: u32 = 0;
pub const SIM_UIDML_UID_MASK: u32 = 4294967295;
pub const SIM_UIDML_UID_SHIFT: u32 = 0;
pub const SIM_UIDL_UID_MASK: u32 = 4294967295;
pub const SIM_UIDL_UID_SHIFT: u32 = 0;
pub const SIM_BASE: u32 = 1074032640;
#[doc = " SMC - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SMC_Type {
    #[doc = "< Power Mode Protection register, offset: 0x0"]
    pub PMPROT: u8,
    #[doc = "< Power Mode Control register, offset: 0x1"]
    pub PMCTRL: u8,
    #[doc = "< VLLS Control register, offset: 0x2"]
    pub VLLSCTRL: u8,
    #[doc = "< Power Mode Status register, offset: 0x3"]
    pub PMSTAT: u8,
}
#[test]
fn bindgen_test_layout_SMC_Type() {
    const UNINIT: ::std::mem::MaybeUninit<SMC_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SMC_Type>(),
        4usize,
        concat!("Size of: ", stringify!(SMC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<SMC_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(SMC_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PMPROT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SMC_Type),
            "::",
            stringify!(PMPROT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PMCTRL) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SMC_Type),
            "::",
            stringify!(PMCTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VLLSCTRL) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SMC_Type),
            "::",
            stringify!(VLLSCTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PMSTAT) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(SMC_Type),
            "::",
            stringify!(PMSTAT)
        )
    );
}
pub const SMC_PMPROT_AVLLS_MASK: u32 = 2;
pub const SMC_PMPROT_AVLLS_SHIFT: u32 = 1;
pub const SMC_PMPROT_ALLS_MASK: u32 = 8;
pub const SMC_PMPROT_ALLS_SHIFT: u32 = 3;
pub const SMC_PMPROT_AVLP_MASK: u32 = 32;
pub const SMC_PMPROT_AVLP_SHIFT: u32 = 5;
pub const SMC_PMCTRL_STOPM_MASK: u32 = 7;
pub const SMC_PMCTRL_STOPM_SHIFT: u32 = 0;
pub const SMC_PMCTRL_STOPA_MASK: u32 = 8;
pub const SMC_PMCTRL_STOPA_SHIFT: u32 = 3;
pub const SMC_PMCTRL_RUNM_MASK: u32 = 96;
pub const SMC_PMCTRL_RUNM_SHIFT: u32 = 5;
pub const SMC_PMCTRL_LPWUI_MASK: u32 = 128;
pub const SMC_PMCTRL_LPWUI_SHIFT: u32 = 7;
pub const SMC_VLLSCTRL_VLLSM_MASK: u32 = 7;
pub const SMC_VLLSCTRL_VLLSM_SHIFT: u32 = 0;
pub const SMC_VLLSCTRL_LPOPO_MASK: u32 = 8;
pub const SMC_VLLSCTRL_LPOPO_SHIFT: u32 = 3;
pub const SMC_VLLSCTRL_RAM2PO_MASK: u32 = 16;
pub const SMC_VLLSCTRL_RAM2PO_SHIFT: u32 = 4;
pub const SMC_VLLSCTRL_PORPO_MASK: u32 = 32;
pub const SMC_VLLSCTRL_PORPO_SHIFT: u32 = 5;
pub const SMC_PMSTAT_PMSTAT_MASK: u32 = 127;
pub const SMC_PMSTAT_PMSTAT_SHIFT: u32 = 0;
pub const SMC_BASE: u32 = 1074257920;
#[doc = " SPI - Register Layout Typedef"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SPI_Type {
    #[doc = "< Module Configuration Register, offset: 0x0"]
    pub MCR: u32,
    pub RESERVED_0: [u8; 4usize],
    #[doc = "< Transfer Count Register, offset: 0x8"]
    pub TCR: u32,
    pub __bindgen_anon_1: SPI_Type__bindgen_ty_1,
    pub RESERVED_1: [u8; 24usize],
    #[doc = "< Status Register, offset: 0x2C"]
    pub SR: u32,
    #[doc = "< DMA/Interrupt Request Select and Enable Register, offset: 0x30"]
    pub RSER: u32,
    pub __bindgen_anon_2: SPI_Type__bindgen_ty_2,
    #[doc = "< POP RX FIFO Register, offset: 0x38"]
    pub POPR: u32,
    #[doc = "< Transmit FIFO Registers, offset: 0x3C"]
    pub TXFR0: u32,
    #[doc = "< Transmit FIFO Registers, offset: 0x40"]
    pub TXFR1: u32,
    #[doc = "< Transmit FIFO Registers, offset: 0x44"]
    pub TXFR2: u32,
    #[doc = "< Transmit FIFO Registers, offset: 0x48"]
    pub TXFR3: u32,
    pub RESERVED_2: [u8; 48usize],
    #[doc = "< Receive FIFO Registers, offset: 0x7C"]
    pub RXFR0: u32,
    #[doc = "< Receive FIFO Registers, offset: 0x80"]
    pub RXFR1: u32,
    #[doc = "< Receive FIFO Registers, offset: 0x84"]
    pub RXFR2: u32,
    #[doc = "< Receive FIFO Registers, offset: 0x88"]
    pub RXFR3: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SPI_Type__bindgen_ty_1 {
    #[doc = "< Clock and Transfer Attributes Register (In Master Mode), array offset: 0xC, array step: 0x4"]
    pub CTAR: [u32; 2usize],
    #[doc = "< Clock and Transfer Attributes Register (In Slave Mode), array offset: 0xC, array step: 0x4"]
    pub CTAR_SLAVE: [u32; 1usize],
}
#[test]
fn bindgen_test_layout_SPI_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SPI_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SPI_Type__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(SPI_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SPI_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(SPI_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTAR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type__bindgen_ty_1),
            "::",
            stringify!(CTAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTAR_SLAVE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type__bindgen_ty_1),
            "::",
            stringify!(CTAR_SLAVE)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SPI_Type__bindgen_ty_2 {
    #[doc = "< PUSH TX FIFO Register In Master Mode, offset: 0x34"]
    pub PUSHR: u32,
    #[doc = "< PUSH TX FIFO Register In Slave Mode, offset: 0x34"]
    pub PUSHR_SLAVE: u32,
}
#[test]
fn bindgen_test_layout_SPI_Type__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<SPI_Type__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SPI_Type__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(SPI_Type__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<SPI_Type__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(SPI_Type__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUSHR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type__bindgen_ty_2),
            "::",
            stringify!(PUSHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PUSHR_SLAVE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type__bindgen_ty_2),
            "::",
            stringify!(PUSHR_SLAVE)
        )
    );
}
#[test]
fn bindgen_test_layout_SPI_Type() {
    const UNINIT: ::std::mem::MaybeUninit<SPI_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SPI_Type>(),
        140usize,
        concat!("Size of: ", stringify!(SPI_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<SPI_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SPI_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(MCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(TCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RSER) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(RSER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POPR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(POPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TXFR0) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(TXFR0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TXFR1) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(TXFR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TXFR2) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(TXFR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TXFR3) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(TXFR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_2) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(RESERVED_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXFR0) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(RXFR0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXFR1) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(RXFR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXFR2) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(RXFR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXFR3) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SPI_Type),
            "::",
            stringify!(RXFR3)
        )
    );
}
pub const SPI_MCR_HALT_MASK: u32 = 1;
pub const SPI_MCR_HALT_SHIFT: u32 = 0;
pub const SPI_MCR_SMPL_PT_MASK: u32 = 768;
pub const SPI_MCR_SMPL_PT_SHIFT: u32 = 8;
pub const SPI_MCR_CLR_RXF_MASK: u32 = 1024;
pub const SPI_MCR_CLR_RXF_SHIFT: u32 = 10;
pub const SPI_MCR_CLR_TXF_MASK: u32 = 2048;
pub const SPI_MCR_CLR_TXF_SHIFT: u32 = 11;
pub const SPI_MCR_DIS_RXF_MASK: u32 = 4096;
pub const SPI_MCR_DIS_RXF_SHIFT: u32 = 12;
pub const SPI_MCR_DIS_TXF_MASK: u32 = 8192;
pub const SPI_MCR_DIS_TXF_SHIFT: u32 = 13;
pub const SPI_MCR_MDIS_MASK: u32 = 16384;
pub const SPI_MCR_MDIS_SHIFT: u32 = 14;
pub const SPI_MCR_DOZE_MASK: u32 = 32768;
pub const SPI_MCR_DOZE_SHIFT: u32 = 15;
pub const SPI_MCR_PCSIS_MASK: u32 = 4128768;
pub const SPI_MCR_PCSIS_SHIFT: u32 = 16;
pub const SPI_MCR_ROOE_MASK: u32 = 16777216;
pub const SPI_MCR_ROOE_SHIFT: u32 = 24;
pub const SPI_MCR_PCSSE_MASK: u32 = 33554432;
pub const SPI_MCR_PCSSE_SHIFT: u32 = 25;
pub const SPI_MCR_MTFE_MASK: u32 = 67108864;
pub const SPI_MCR_MTFE_SHIFT: u32 = 26;
pub const SPI_MCR_FRZ_MASK: u32 = 134217728;
pub const SPI_MCR_FRZ_SHIFT: u32 = 27;
pub const SPI_MCR_DCONF_MASK: u32 = 805306368;
pub const SPI_MCR_DCONF_SHIFT: u32 = 28;
pub const SPI_MCR_CONT_SCKE_MASK: u32 = 1073741824;
pub const SPI_MCR_CONT_SCKE_SHIFT: u32 = 30;
pub const SPI_MCR_MSTR_MASK: u32 = 2147483648;
pub const SPI_MCR_MSTR_SHIFT: u32 = 31;
pub const SPI_TCR_SPI_TCNT_MASK: u32 = 4294901760;
pub const SPI_TCR_SPI_TCNT_SHIFT: u32 = 16;
pub const SPI_CTAR_BR_MASK: u32 = 15;
pub const SPI_CTAR_BR_SHIFT: u32 = 0;
pub const SPI_CTAR_DT_MASK: u32 = 240;
pub const SPI_CTAR_DT_SHIFT: u32 = 4;
pub const SPI_CTAR_ASC_MASK: u32 = 3840;
pub const SPI_CTAR_ASC_SHIFT: u32 = 8;
pub const SPI_CTAR_CSSCK_MASK: u32 = 61440;
pub const SPI_CTAR_CSSCK_SHIFT: u32 = 12;
pub const SPI_CTAR_PBR_MASK: u32 = 196608;
pub const SPI_CTAR_PBR_SHIFT: u32 = 16;
pub const SPI_CTAR_PDT_MASK: u32 = 786432;
pub const SPI_CTAR_PDT_SHIFT: u32 = 18;
pub const SPI_CTAR_PASC_MASK: u32 = 3145728;
pub const SPI_CTAR_PASC_SHIFT: u32 = 20;
pub const SPI_CTAR_PCSSCK_MASK: u32 = 12582912;
pub const SPI_CTAR_PCSSCK_SHIFT: u32 = 22;
pub const SPI_CTAR_LSBFE_MASK: u32 = 16777216;
pub const SPI_CTAR_LSBFE_SHIFT: u32 = 24;
pub const SPI_CTAR_CPHA_MASK: u32 = 33554432;
pub const SPI_CTAR_CPHA_SHIFT: u32 = 25;
pub const SPI_CTAR_CPOL_MASK: u32 = 67108864;
pub const SPI_CTAR_CPOL_SHIFT: u32 = 26;
pub const SPI_CTAR_FMSZ_MASK: u32 = 2013265920;
pub const SPI_CTAR_FMSZ_SHIFT: u32 = 27;
pub const SPI_CTAR_DBR_MASK: u32 = 2147483648;
pub const SPI_CTAR_DBR_SHIFT: u32 = 31;
pub const SPI_CTAR_COUNT: u32 = 2;
pub const SPI_CTAR_SLAVE_CPHA_MASK: u32 = 33554432;
pub const SPI_CTAR_SLAVE_CPHA_SHIFT: u32 = 25;
pub const SPI_CTAR_SLAVE_CPOL_MASK: u32 = 67108864;
pub const SPI_CTAR_SLAVE_CPOL_SHIFT: u32 = 26;
pub const SPI_CTAR_SLAVE_FMSZ_MASK: u32 = 4160749568;
pub const SPI_CTAR_SLAVE_FMSZ_SHIFT: u32 = 27;
pub const SPI_CTAR_SLAVE_COUNT: u32 = 1;
pub const SPI_SR_POPNXTPTR_MASK: u32 = 15;
pub const SPI_SR_POPNXTPTR_SHIFT: u32 = 0;
pub const SPI_SR_RXCTR_MASK: u32 = 240;
pub const SPI_SR_RXCTR_SHIFT: u32 = 4;
pub const SPI_SR_TXNXTPTR_MASK: u32 = 3840;
pub const SPI_SR_TXNXTPTR_SHIFT: u32 = 8;
pub const SPI_SR_TXCTR_MASK: u32 = 61440;
pub const SPI_SR_TXCTR_SHIFT: u32 = 12;
pub const SPI_SR_RFDF_MASK: u32 = 131072;
pub const SPI_SR_RFDF_SHIFT: u32 = 17;
pub const SPI_SR_RFOF_MASK: u32 = 524288;
pub const SPI_SR_RFOF_SHIFT: u32 = 19;
pub const SPI_SR_TFFF_MASK: u32 = 33554432;
pub const SPI_SR_TFFF_SHIFT: u32 = 25;
pub const SPI_SR_TFUF_MASK: u32 = 134217728;
pub const SPI_SR_TFUF_SHIFT: u32 = 27;
pub const SPI_SR_EOQF_MASK: u32 = 268435456;
pub const SPI_SR_EOQF_SHIFT: u32 = 28;
pub const SPI_SR_TXRXS_MASK: u32 = 1073741824;
pub const SPI_SR_TXRXS_SHIFT: u32 = 30;
pub const SPI_SR_TCF_MASK: u32 = 2147483648;
pub const SPI_SR_TCF_SHIFT: u32 = 31;
pub const SPI_RSER_RFDF_DIRS_MASK: u32 = 65536;
pub const SPI_RSER_RFDF_DIRS_SHIFT: u32 = 16;
pub const SPI_RSER_RFDF_RE_MASK: u32 = 131072;
pub const SPI_RSER_RFDF_RE_SHIFT: u32 = 17;
pub const SPI_RSER_RFOF_RE_MASK: u32 = 524288;
pub const SPI_RSER_RFOF_RE_SHIFT: u32 = 19;
pub const SPI_RSER_TFFF_DIRS_MASK: u32 = 16777216;
pub const SPI_RSER_TFFF_DIRS_SHIFT: u32 = 24;
pub const SPI_RSER_TFFF_RE_MASK: u32 = 33554432;
pub const SPI_RSER_TFFF_RE_SHIFT: u32 = 25;
pub const SPI_RSER_TFUF_RE_MASK: u32 = 134217728;
pub const SPI_RSER_TFUF_RE_SHIFT: u32 = 27;
pub const SPI_RSER_EOQF_RE_MASK: u32 = 268435456;
pub const SPI_RSER_EOQF_RE_SHIFT: u32 = 28;
pub const SPI_RSER_TCF_RE_MASK: u32 = 2147483648;
pub const SPI_RSER_TCF_RE_SHIFT: u32 = 31;
pub const SPI_PUSHR_TXDATA_MASK: u32 = 65535;
pub const SPI_PUSHR_TXDATA_SHIFT: u32 = 0;
pub const SPI_PUSHR_PCS_MASK: u32 = 4128768;
pub const SPI_PUSHR_PCS_SHIFT: u32 = 16;
pub const SPI_PUSHR_CTCNT_MASK: u32 = 67108864;
pub const SPI_PUSHR_CTCNT_SHIFT: u32 = 26;
pub const SPI_PUSHR_EOQ_MASK: u32 = 134217728;
pub const SPI_PUSHR_EOQ_SHIFT: u32 = 27;
pub const SPI_PUSHR_CTAS_MASK: u32 = 1879048192;
pub const SPI_PUSHR_CTAS_SHIFT: u32 = 28;
pub const SPI_PUSHR_CONT_MASK: u32 = 2147483648;
pub const SPI_PUSHR_CONT_SHIFT: u32 = 31;
pub const SPI_PUSHR_SLAVE_TXDATA_MASK: u32 = 4294967295;
pub const SPI_PUSHR_SLAVE_TXDATA_SHIFT: u32 = 0;
pub const SPI_POPR_RXDATA_MASK: u32 = 4294967295;
pub const SPI_POPR_RXDATA_SHIFT: u32 = 0;
pub const SPI_TXFR0_TXDATA_MASK: u32 = 65535;
pub const SPI_TXFR0_TXDATA_SHIFT: u32 = 0;
pub const SPI_TXFR0_TXCMD_TXDATA_MASK: u32 = 4294901760;
pub const SPI_TXFR0_TXCMD_TXDATA_SHIFT: u32 = 16;
pub const SPI_TXFR1_TXDATA_MASK: u32 = 65535;
pub const SPI_TXFR1_TXDATA_SHIFT: u32 = 0;
pub const SPI_TXFR1_TXCMD_TXDATA_MASK: u32 = 4294901760;
pub const SPI_TXFR1_TXCMD_TXDATA_SHIFT: u32 = 16;
pub const SPI_TXFR2_TXDATA_MASK: u32 = 65535;
pub const SPI_TXFR2_TXDATA_SHIFT: u32 = 0;
pub const SPI_TXFR2_TXCMD_TXDATA_MASK: u32 = 4294901760;
pub const SPI_TXFR2_TXCMD_TXDATA_SHIFT: u32 = 16;
pub const SPI_TXFR3_TXDATA_MASK: u32 = 65535;
pub const SPI_TXFR3_TXDATA_SHIFT: u32 = 0;
pub const SPI_TXFR3_TXCMD_TXDATA_MASK: u32 = 4294901760;
pub const SPI_TXFR3_TXCMD_TXDATA_SHIFT: u32 = 16;
pub const SPI_RXFR0_RXDATA_MASK: u32 = 4294967295;
pub const SPI_RXFR0_RXDATA_SHIFT: u32 = 0;
pub const SPI_RXFR1_RXDATA_MASK: u32 = 4294967295;
pub const SPI_RXFR1_RXDATA_SHIFT: u32 = 0;
pub const SPI_RXFR2_RXDATA_MASK: u32 = 4294967295;
pub const SPI_RXFR2_RXDATA_SHIFT: u32 = 0;
pub const SPI_RXFR3_RXDATA_MASK: u32 = 4294967295;
pub const SPI_RXFR3_RXDATA_SHIFT: u32 = 0;
pub const SPI0_BASE: u32 = 1073922048;
pub const SPI1_BASE: u32 = 1073926144;
pub const SPI2_BASE: u32 = 1074446336;
#[doc = " SYSMPU - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SYSMPU_Type {
    #[doc = "< Control/Error Status Register, offset: 0x0"]
    pub CESR: u32,
    pub RESERVED_0: [u8; 12usize],
    pub SP: [SYSMPU_Type__bindgen_ty_1; 5usize],
    pub RESERVED_1: [u8; 968usize],
    #[doc = "< Region Descriptor n, Word 0..Region Descriptor n, Word 3, array offset: 0x400, array step: index*0x10, index2*0x4"]
    pub WORD: [[u32; 4usize]; 12usize],
    pub RESERVED_2: [u8; 832usize],
    #[doc = "< Region Descriptor Alternate Access Control n, array offset: 0x800, array step: 0x4"]
    pub RGDAAC: [u32; 12usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SYSMPU_Type__bindgen_ty_1 {
    #[doc = "< Error Address Register, slave port n, array offset: 0x10, array step: 0x8"]
    pub EAR: u32,
    #[doc = "< Error Detail Register, slave port n, array offset: 0x14, array step: 0x8"]
    pub EDR: u32,
}
#[test]
fn bindgen_test_layout_SYSMPU_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SYSMPU_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SYSMPU_Type__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(SYSMPU_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SYSMPU_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(SYSMPU_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EAR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSMPU_Type__bindgen_ty_1),
            "::",
            stringify!(EAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EDR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSMPU_Type__bindgen_ty_1),
            "::",
            stringify!(EDR)
        )
    );
}
#[test]
fn bindgen_test_layout_SYSMPU_Type() {
    const UNINIT: ::std::mem::MaybeUninit<SYSMPU_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SYSMPU_Type>(),
        2096usize,
        concat!("Size of: ", stringify!(SYSMPU_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<SYSMPU_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(SYSMPU_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CESR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSMPU_Type),
            "::",
            stringify!(CESR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSMPU_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SP) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSMPU_Type),
            "::",
            stringify!(SP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSMPU_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WORD) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSMPU_Type),
            "::",
            stringify!(WORD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_2) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSMPU_Type),
            "::",
            stringify!(RESERVED_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RGDAAC) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSMPU_Type),
            "::",
            stringify!(RGDAAC)
        )
    );
}
pub const SYSMPU_CESR_VLD_MASK: u32 = 1;
pub const SYSMPU_CESR_VLD_SHIFT: u32 = 0;
pub const SYSMPU_CESR_NRGD_MASK: u32 = 3840;
pub const SYSMPU_CESR_NRGD_SHIFT: u32 = 8;
pub const SYSMPU_CESR_NSP_MASK: u32 = 61440;
pub const SYSMPU_CESR_NSP_SHIFT: u32 = 12;
pub const SYSMPU_CESR_HRL_MASK: u32 = 983040;
pub const SYSMPU_CESR_HRL_SHIFT: u32 = 16;
pub const SYSMPU_CESR_SPERR_MASK: u32 = 4160749568;
pub const SYSMPU_CESR_SPERR_SHIFT: u32 = 27;
pub const SYSMPU_EAR_EADDR_MASK: u32 = 4294967295;
pub const SYSMPU_EAR_EADDR_SHIFT: u32 = 0;
pub const SYSMPU_EAR_COUNT: u32 = 5;
pub const SYSMPU_EDR_ERW_MASK: u32 = 1;
pub const SYSMPU_EDR_ERW_SHIFT: u32 = 0;
pub const SYSMPU_EDR_EATTR_MASK: u32 = 14;
pub const SYSMPU_EDR_EATTR_SHIFT: u32 = 1;
pub const SYSMPU_EDR_EMN_MASK: u32 = 240;
pub const SYSMPU_EDR_EMN_SHIFT: u32 = 4;
pub const SYSMPU_EDR_EPID_MASK: u32 = 65280;
pub const SYSMPU_EDR_EPID_SHIFT: u32 = 8;
pub const SYSMPU_EDR_EACD_MASK: u32 = 4294901760;
pub const SYSMPU_EDR_EACD_SHIFT: u32 = 16;
pub const SYSMPU_EDR_COUNT: u32 = 5;
pub const SYSMPU_WORD_VLD_MASK: u32 = 1;
pub const SYSMPU_WORD_VLD_SHIFT: u32 = 0;
pub const SYSMPU_WORD_M0UM_MASK: u32 = 7;
pub const SYSMPU_WORD_M0UM_SHIFT: u32 = 0;
pub const SYSMPU_WORD_M0SM_MASK: u32 = 24;
pub const SYSMPU_WORD_M0SM_SHIFT: u32 = 3;
pub const SYSMPU_WORD_M0PE_MASK: u32 = 32;
pub const SYSMPU_WORD_M0PE_SHIFT: u32 = 5;
pub const SYSMPU_WORD_ENDADDR_MASK: u32 = 4294967264;
pub const SYSMPU_WORD_ENDADDR_SHIFT: u32 = 5;
pub const SYSMPU_WORD_SRTADDR_MASK: u32 = 4294967264;
pub const SYSMPU_WORD_SRTADDR_SHIFT: u32 = 5;
pub const SYSMPU_WORD_M1UM_MASK: u32 = 448;
pub const SYSMPU_WORD_M1UM_SHIFT: u32 = 6;
pub const SYSMPU_WORD_M1SM_MASK: u32 = 1536;
pub const SYSMPU_WORD_M1SM_SHIFT: u32 = 9;
pub const SYSMPU_WORD_M1PE_MASK: u32 = 2048;
pub const SYSMPU_WORD_M1PE_SHIFT: u32 = 11;
pub const SYSMPU_WORD_M2UM_MASK: u32 = 28672;
pub const SYSMPU_WORD_M2UM_SHIFT: u32 = 12;
pub const SYSMPU_WORD_M2SM_MASK: u32 = 98304;
pub const SYSMPU_WORD_M2SM_SHIFT: u32 = 15;
pub const SYSMPU_WORD_PIDMASK_MASK: u32 = 16711680;
pub const SYSMPU_WORD_PIDMASK_SHIFT: u32 = 16;
pub const SYSMPU_WORD_M2PE_MASK: u32 = 131072;
pub const SYSMPU_WORD_M2PE_SHIFT: u32 = 17;
pub const SYSMPU_WORD_M3UM_MASK: u32 = 1835008;
pub const SYSMPU_WORD_M3UM_SHIFT: u32 = 18;
pub const SYSMPU_WORD_M3SM_MASK: u32 = 6291456;
pub const SYSMPU_WORD_M3SM_SHIFT: u32 = 21;
pub const SYSMPU_WORD_M3PE_MASK: u32 = 8388608;
pub const SYSMPU_WORD_M3PE_SHIFT: u32 = 23;
pub const SYSMPU_WORD_PID_MASK: u32 = 4278190080;
pub const SYSMPU_WORD_PID_SHIFT: u32 = 24;
pub const SYSMPU_WORD_M4WE_MASK: u32 = 16777216;
pub const SYSMPU_WORD_M4WE_SHIFT: u32 = 24;
pub const SYSMPU_WORD_M4RE_MASK: u32 = 33554432;
pub const SYSMPU_WORD_M4RE_SHIFT: u32 = 25;
pub const SYSMPU_WORD_M5WE_MASK: u32 = 67108864;
pub const SYSMPU_WORD_M5WE_SHIFT: u32 = 26;
pub const SYSMPU_WORD_M5RE_MASK: u32 = 134217728;
pub const SYSMPU_WORD_M5RE_SHIFT: u32 = 27;
pub const SYSMPU_WORD_M6WE_MASK: u32 = 268435456;
pub const SYSMPU_WORD_M6WE_SHIFT: u32 = 28;
pub const SYSMPU_WORD_M6RE_MASK: u32 = 536870912;
pub const SYSMPU_WORD_M6RE_SHIFT: u32 = 29;
pub const SYSMPU_WORD_M7WE_MASK: u32 = 1073741824;
pub const SYSMPU_WORD_M7WE_SHIFT: u32 = 30;
pub const SYSMPU_WORD_M7RE_MASK: u32 = 2147483648;
pub const SYSMPU_WORD_M7RE_SHIFT: u32 = 31;
pub const SYSMPU_WORD_COUNT: u32 = 12;
pub const SYSMPU_WORD_COUNT2: u32 = 4;
pub const SYSMPU_RGDAAC_M0UM_MASK: u32 = 7;
pub const SYSMPU_RGDAAC_M0UM_SHIFT: u32 = 0;
pub const SYSMPU_RGDAAC_M0SM_MASK: u32 = 24;
pub const SYSMPU_RGDAAC_M0SM_SHIFT: u32 = 3;
pub const SYSMPU_RGDAAC_M0PE_MASK: u32 = 32;
pub const SYSMPU_RGDAAC_M0PE_SHIFT: u32 = 5;
pub const SYSMPU_RGDAAC_M1UM_MASK: u32 = 448;
pub const SYSMPU_RGDAAC_M1UM_SHIFT: u32 = 6;
pub const SYSMPU_RGDAAC_M1SM_MASK: u32 = 1536;
pub const SYSMPU_RGDAAC_M1SM_SHIFT: u32 = 9;
pub const SYSMPU_RGDAAC_M1PE_MASK: u32 = 2048;
pub const SYSMPU_RGDAAC_M1PE_SHIFT: u32 = 11;
pub const SYSMPU_RGDAAC_M2UM_MASK: u32 = 28672;
pub const SYSMPU_RGDAAC_M2UM_SHIFT: u32 = 12;
pub const SYSMPU_RGDAAC_M2SM_MASK: u32 = 98304;
pub const SYSMPU_RGDAAC_M2SM_SHIFT: u32 = 15;
pub const SYSMPU_RGDAAC_M2PE_MASK: u32 = 131072;
pub const SYSMPU_RGDAAC_M2PE_SHIFT: u32 = 17;
pub const SYSMPU_RGDAAC_M3UM_MASK: u32 = 1835008;
pub const SYSMPU_RGDAAC_M3UM_SHIFT: u32 = 18;
pub const SYSMPU_RGDAAC_M3SM_MASK: u32 = 6291456;
pub const SYSMPU_RGDAAC_M3SM_SHIFT: u32 = 21;
pub const SYSMPU_RGDAAC_M3PE_MASK: u32 = 8388608;
pub const SYSMPU_RGDAAC_M3PE_SHIFT: u32 = 23;
pub const SYSMPU_RGDAAC_M4WE_MASK: u32 = 16777216;
pub const SYSMPU_RGDAAC_M4WE_SHIFT: u32 = 24;
pub const SYSMPU_RGDAAC_M4RE_MASK: u32 = 33554432;
pub const SYSMPU_RGDAAC_M4RE_SHIFT: u32 = 25;
pub const SYSMPU_RGDAAC_M5WE_MASK: u32 = 67108864;
pub const SYSMPU_RGDAAC_M5WE_SHIFT: u32 = 26;
pub const SYSMPU_RGDAAC_M5RE_MASK: u32 = 134217728;
pub const SYSMPU_RGDAAC_M5RE_SHIFT: u32 = 27;
pub const SYSMPU_RGDAAC_M6WE_MASK: u32 = 268435456;
pub const SYSMPU_RGDAAC_M6WE_SHIFT: u32 = 28;
pub const SYSMPU_RGDAAC_M6RE_MASK: u32 = 536870912;
pub const SYSMPU_RGDAAC_M6RE_SHIFT: u32 = 29;
pub const SYSMPU_RGDAAC_M7WE_MASK: u32 = 1073741824;
pub const SYSMPU_RGDAAC_M7WE_SHIFT: u32 = 30;
pub const SYSMPU_RGDAAC_M7RE_MASK: u32 = 2147483648;
pub const SYSMPU_RGDAAC_M7RE_SHIFT: u32 = 31;
pub const SYSMPU_RGDAAC_COUNT: u32 = 12;
pub const SYSMPU_BASE: u32 = 1073795072;
#[doc = " UART - Register Layout Typedef"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UART_Type {
    #[doc = "< UART Baud Rate Registers: High, offset: 0x0"]
    pub BDH: u8,
    #[doc = "< UART Baud Rate Registers: Low, offset: 0x1"]
    pub BDL: u8,
    #[doc = "< UART Control Register 1, offset: 0x2"]
    pub C1: u8,
    #[doc = "< UART Control Register 2, offset: 0x3"]
    pub C2: u8,
    #[doc = "< UART Status Register 1, offset: 0x4"]
    pub S1: u8,
    #[doc = "< UART Status Register 2, offset: 0x5"]
    pub S2: u8,
    #[doc = "< UART Control Register 3, offset: 0x6"]
    pub C3: u8,
    #[doc = "< UART Data Register, offset: 0x7"]
    pub D: u8,
    #[doc = "< UART Match Address Registers 1, offset: 0x8"]
    pub MA1: u8,
    #[doc = "< UART Match Address Registers 2, offset: 0x9"]
    pub MA2: u8,
    #[doc = "< UART Control Register 4, offset: 0xA"]
    pub C4: u8,
    #[doc = "< UART Control Register 5, offset: 0xB"]
    pub C5: u8,
    #[doc = "< UART Extended Data Register, offset: 0xC"]
    pub ED: u8,
    #[doc = "< UART Modem Register, offset: 0xD"]
    pub MODEM: u8,
    #[doc = "< UART Infrared Register, offset: 0xE"]
    pub IR: u8,
    pub RESERVED_0: [u8; 1usize],
    #[doc = "< UART FIFO Parameters, offset: 0x10"]
    pub PFIFO: u8,
    #[doc = "< UART FIFO Control Register, offset: 0x11"]
    pub CFIFO: u8,
    #[doc = "< UART FIFO Status Register, offset: 0x12"]
    pub SFIFO: u8,
    #[doc = "< UART FIFO Transmit Watermark, offset: 0x13"]
    pub TWFIFO: u8,
    #[doc = "< UART FIFO Transmit Count, offset: 0x14"]
    pub TCFIFO: u8,
    #[doc = "< UART FIFO Receive Watermark, offset: 0x15"]
    pub RWFIFO: u8,
    #[doc = "< UART FIFO Receive Count, offset: 0x16"]
    pub RCFIFO: u8,
    pub RESERVED_1: [u8; 1usize],
    #[doc = "< UART 7816 Control Register, offset: 0x18"]
    pub C7816: u8,
    #[doc = "< UART 7816 Interrupt Enable Register, offset: 0x19"]
    pub IE7816: u8,
    #[doc = "< UART 7816 Interrupt Status Register, offset: 0x1A"]
    pub IS7816: u8,
    pub __bindgen_anon_1: UART_Type__bindgen_ty_1,
    #[doc = "< UART 7816 Wait N Register, offset: 0x1C"]
    pub WN7816: u8,
    #[doc = "< UART 7816 Wait FD Register, offset: 0x1D"]
    pub WF7816: u8,
    #[doc = "< UART 7816 Error Threshold Register, offset: 0x1E"]
    pub ET7816: u8,
    #[doc = "< UART 7816 Transmit Length Register, offset: 0x1F"]
    pub TL7816: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union UART_Type__bindgen_ty_1 {
    #[doc = "< UART 7816 Wait Parameter Register, offset: 0x1B"]
    pub WP7816T0: u8,
    #[doc = "< UART 7816 Wait Parameter Register, offset: 0x1B"]
    pub WP7816T1: u8,
}
#[test]
fn bindgen_test_layout_UART_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<UART_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UART_Type__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(UART_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<UART_Type__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(UART_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WP7816T0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type__bindgen_ty_1),
            "::",
            stringify!(WP7816T0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WP7816T1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type__bindgen_ty_1),
            "::",
            stringify!(WP7816T1)
        )
    );
}
#[test]
fn bindgen_test_layout_UART_Type() {
    const UNINIT: ::std::mem::MaybeUninit<UART_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<UART_Type>(),
        32usize,
        concat!("Size of: ", stringify!(UART_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<UART_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(UART_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BDH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(BDH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BDL) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(BDL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(C1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C2) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(C2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).S1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(S1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).S2) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(S2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(C3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).D) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(D)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MA1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(MA1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MA2) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(MA2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C4) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(C4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C5) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(C5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ED) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(ED)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MODEM) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(MODEM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IR) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(IR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PFIFO) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(PFIFO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CFIFO) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(CFIFO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SFIFO) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(SFIFO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TWFIFO) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(TWFIFO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCFIFO) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(TCFIFO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RWFIFO) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(RWFIFO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RCFIFO) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(RCFIFO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C7816) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(C7816)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IE7816) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(IE7816)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IS7816) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(IS7816)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WN7816) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(WN7816)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WF7816) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(WF7816)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ET7816) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(ET7816)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TL7816) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(UART_Type),
            "::",
            stringify!(TL7816)
        )
    );
}
pub const UART_BDH_SBR_MASK: u32 = 31;
pub const UART_BDH_SBR_SHIFT: u32 = 0;
pub const UART_BDH_RXEDGIE_MASK: u32 = 64;
pub const UART_BDH_RXEDGIE_SHIFT: u32 = 6;
pub const UART_BDH_LBKDIE_MASK: u32 = 128;
pub const UART_BDH_LBKDIE_SHIFT: u32 = 7;
pub const UART_BDL_SBR_MASK: u32 = 255;
pub const UART_BDL_SBR_SHIFT: u32 = 0;
pub const UART_C1_PT_MASK: u32 = 1;
pub const UART_C1_PT_SHIFT: u32 = 0;
pub const UART_C1_PE_MASK: u32 = 2;
pub const UART_C1_PE_SHIFT: u32 = 1;
pub const UART_C1_ILT_MASK: u32 = 4;
pub const UART_C1_ILT_SHIFT: u32 = 2;
pub const UART_C1_WAKE_MASK: u32 = 8;
pub const UART_C1_WAKE_SHIFT: u32 = 3;
pub const UART_C1_M_MASK: u32 = 16;
pub const UART_C1_M_SHIFT: u32 = 4;
pub const UART_C1_RSRC_MASK: u32 = 32;
pub const UART_C1_RSRC_SHIFT: u32 = 5;
pub const UART_C1_UARTSWAI_MASK: u32 = 64;
pub const UART_C1_UARTSWAI_SHIFT: u32 = 6;
pub const UART_C1_LOOPS_MASK: u32 = 128;
pub const UART_C1_LOOPS_SHIFT: u32 = 7;
pub const UART_C2_SBK_MASK: u32 = 1;
pub const UART_C2_SBK_SHIFT: u32 = 0;
pub const UART_C2_RWU_MASK: u32 = 2;
pub const UART_C2_RWU_SHIFT: u32 = 1;
pub const UART_C2_RE_MASK: u32 = 4;
pub const UART_C2_RE_SHIFT: u32 = 2;
pub const UART_C2_TE_MASK: u32 = 8;
pub const UART_C2_TE_SHIFT: u32 = 3;
pub const UART_C2_ILIE_MASK: u32 = 16;
pub const UART_C2_ILIE_SHIFT: u32 = 4;
pub const UART_C2_RIE_MASK: u32 = 32;
pub const UART_C2_RIE_SHIFT: u32 = 5;
pub const UART_C2_TCIE_MASK: u32 = 64;
pub const UART_C2_TCIE_SHIFT: u32 = 6;
pub const UART_C2_TIE_MASK: u32 = 128;
pub const UART_C2_TIE_SHIFT: u32 = 7;
pub const UART_S1_PF_MASK: u32 = 1;
pub const UART_S1_PF_SHIFT: u32 = 0;
pub const UART_S1_FE_MASK: u32 = 2;
pub const UART_S1_FE_SHIFT: u32 = 1;
pub const UART_S1_NF_MASK: u32 = 4;
pub const UART_S1_NF_SHIFT: u32 = 2;
pub const UART_S1_OR_MASK: u32 = 8;
pub const UART_S1_OR_SHIFT: u32 = 3;
pub const UART_S1_IDLE_MASK: u32 = 16;
pub const UART_S1_IDLE_SHIFT: u32 = 4;
pub const UART_S1_RDRF_MASK: u32 = 32;
pub const UART_S1_RDRF_SHIFT: u32 = 5;
pub const UART_S1_TC_MASK: u32 = 64;
pub const UART_S1_TC_SHIFT: u32 = 6;
pub const UART_S1_TDRE_MASK: u32 = 128;
pub const UART_S1_TDRE_SHIFT: u32 = 7;
pub const UART_S2_RAF_MASK: u32 = 1;
pub const UART_S2_RAF_SHIFT: u32 = 0;
pub const UART_S2_LBKDE_MASK: u32 = 2;
pub const UART_S2_LBKDE_SHIFT: u32 = 1;
pub const UART_S2_BRK13_MASK: u32 = 4;
pub const UART_S2_BRK13_SHIFT: u32 = 2;
pub const UART_S2_RWUID_MASK: u32 = 8;
pub const UART_S2_RWUID_SHIFT: u32 = 3;
pub const UART_S2_RXINV_MASK: u32 = 16;
pub const UART_S2_RXINV_SHIFT: u32 = 4;
pub const UART_S2_MSBF_MASK: u32 = 32;
pub const UART_S2_MSBF_SHIFT: u32 = 5;
pub const UART_S2_RXEDGIF_MASK: u32 = 64;
pub const UART_S2_RXEDGIF_SHIFT: u32 = 6;
pub const UART_S2_LBKDIF_MASK: u32 = 128;
pub const UART_S2_LBKDIF_SHIFT: u32 = 7;
pub const UART_C3_PEIE_MASK: u32 = 1;
pub const UART_C3_PEIE_SHIFT: u32 = 0;
pub const UART_C3_FEIE_MASK: u32 = 2;
pub const UART_C3_FEIE_SHIFT: u32 = 1;
pub const UART_C3_NEIE_MASK: u32 = 4;
pub const UART_C3_NEIE_SHIFT: u32 = 2;
pub const UART_C3_ORIE_MASK: u32 = 8;
pub const UART_C3_ORIE_SHIFT: u32 = 3;
pub const UART_C3_TXINV_MASK: u32 = 16;
pub const UART_C3_TXINV_SHIFT: u32 = 4;
pub const UART_C3_TXDIR_MASK: u32 = 32;
pub const UART_C3_TXDIR_SHIFT: u32 = 5;
pub const UART_C3_T8_MASK: u32 = 64;
pub const UART_C3_T8_SHIFT: u32 = 6;
pub const UART_C3_R8_MASK: u32 = 128;
pub const UART_C3_R8_SHIFT: u32 = 7;
pub const UART_D_RT_MASK: u32 = 255;
pub const UART_D_RT_SHIFT: u32 = 0;
pub const UART_MA1_MA_MASK: u32 = 255;
pub const UART_MA1_MA_SHIFT: u32 = 0;
pub const UART_MA2_MA_MASK: u32 = 255;
pub const UART_MA2_MA_SHIFT: u32 = 0;
pub const UART_C4_BRFA_MASK: u32 = 31;
pub const UART_C4_BRFA_SHIFT: u32 = 0;
pub const UART_C4_M10_MASK: u32 = 32;
pub const UART_C4_M10_SHIFT: u32 = 5;
pub const UART_C4_MAEN2_MASK: u32 = 64;
pub const UART_C4_MAEN2_SHIFT: u32 = 6;
pub const UART_C4_MAEN1_MASK: u32 = 128;
pub const UART_C4_MAEN1_SHIFT: u32 = 7;
pub const UART_C5_RDMAS_MASK: u32 = 32;
pub const UART_C5_RDMAS_SHIFT: u32 = 5;
pub const UART_C5_TDMAS_MASK: u32 = 128;
pub const UART_C5_TDMAS_SHIFT: u32 = 7;
pub const UART_ED_PARITYE_MASK: u32 = 64;
pub const UART_ED_PARITYE_SHIFT: u32 = 6;
pub const UART_ED_NOISY_MASK: u32 = 128;
pub const UART_ED_NOISY_SHIFT: u32 = 7;
pub const UART_MODEM_TXCTSE_MASK: u32 = 1;
pub const UART_MODEM_TXCTSE_SHIFT: u32 = 0;
pub const UART_MODEM_TXRTSE_MASK: u32 = 2;
pub const UART_MODEM_TXRTSE_SHIFT: u32 = 1;
pub const UART_MODEM_TXRTSPOL_MASK: u32 = 4;
pub const UART_MODEM_TXRTSPOL_SHIFT: u32 = 2;
pub const UART_MODEM_RXRTSE_MASK: u32 = 8;
pub const UART_MODEM_RXRTSE_SHIFT: u32 = 3;
pub const UART_IR_TNP_MASK: u32 = 3;
pub const UART_IR_TNP_SHIFT: u32 = 0;
pub const UART_IR_IREN_MASK: u32 = 4;
pub const UART_IR_IREN_SHIFT: u32 = 2;
pub const UART_PFIFO_RXFIFOSIZE_MASK: u32 = 7;
pub const UART_PFIFO_RXFIFOSIZE_SHIFT: u32 = 0;
pub const UART_PFIFO_RXFE_MASK: u32 = 8;
pub const UART_PFIFO_RXFE_SHIFT: u32 = 3;
pub const UART_PFIFO_TXFIFOSIZE_MASK: u32 = 112;
pub const UART_PFIFO_TXFIFOSIZE_SHIFT: u32 = 4;
pub const UART_PFIFO_TXFE_MASK: u32 = 128;
pub const UART_PFIFO_TXFE_SHIFT: u32 = 7;
pub const UART_CFIFO_RXUFE_MASK: u32 = 1;
pub const UART_CFIFO_RXUFE_SHIFT: u32 = 0;
pub const UART_CFIFO_TXOFE_MASK: u32 = 2;
pub const UART_CFIFO_TXOFE_SHIFT: u32 = 1;
pub const UART_CFIFO_RXOFE_MASK: u32 = 4;
pub const UART_CFIFO_RXOFE_SHIFT: u32 = 2;
pub const UART_CFIFO_RXFLUSH_MASK: u32 = 64;
pub const UART_CFIFO_RXFLUSH_SHIFT: u32 = 6;
pub const UART_CFIFO_TXFLUSH_MASK: u32 = 128;
pub const UART_CFIFO_TXFLUSH_SHIFT: u32 = 7;
pub const UART_SFIFO_RXUF_MASK: u32 = 1;
pub const UART_SFIFO_RXUF_SHIFT: u32 = 0;
pub const UART_SFIFO_TXOF_MASK: u32 = 2;
pub const UART_SFIFO_TXOF_SHIFT: u32 = 1;
pub const UART_SFIFO_RXOF_MASK: u32 = 4;
pub const UART_SFIFO_RXOF_SHIFT: u32 = 2;
pub const UART_SFIFO_RXEMPT_MASK: u32 = 64;
pub const UART_SFIFO_RXEMPT_SHIFT: u32 = 6;
pub const UART_SFIFO_TXEMPT_MASK: u32 = 128;
pub const UART_SFIFO_TXEMPT_SHIFT: u32 = 7;
pub const UART_TWFIFO_TXWATER_MASK: u32 = 255;
pub const UART_TWFIFO_TXWATER_SHIFT: u32 = 0;
pub const UART_TCFIFO_TXCOUNT_MASK: u32 = 255;
pub const UART_TCFIFO_TXCOUNT_SHIFT: u32 = 0;
pub const UART_RWFIFO_RXWATER_MASK: u32 = 255;
pub const UART_RWFIFO_RXWATER_SHIFT: u32 = 0;
pub const UART_RCFIFO_RXCOUNT_MASK: u32 = 255;
pub const UART_RCFIFO_RXCOUNT_SHIFT: u32 = 0;
pub const UART_C7816_ISO_7816E_MASK: u32 = 1;
pub const UART_C7816_ISO_7816E_SHIFT: u32 = 0;
pub const UART_C7816_TTYPE_MASK: u32 = 2;
pub const UART_C7816_TTYPE_SHIFT: u32 = 1;
pub const UART_C7816_INIT_MASK: u32 = 4;
pub const UART_C7816_INIT_SHIFT: u32 = 2;
pub const UART_C7816_ANACK_MASK: u32 = 8;
pub const UART_C7816_ANACK_SHIFT: u32 = 3;
pub const UART_C7816_ONACK_MASK: u32 = 16;
pub const UART_C7816_ONACK_SHIFT: u32 = 4;
pub const UART_IE7816_RXTE_MASK: u32 = 1;
pub const UART_IE7816_RXTE_SHIFT: u32 = 0;
pub const UART_IE7816_TXTE_MASK: u32 = 2;
pub const UART_IE7816_TXTE_SHIFT: u32 = 1;
pub const UART_IE7816_GTVE_MASK: u32 = 4;
pub const UART_IE7816_GTVE_SHIFT: u32 = 2;
pub const UART_IE7816_INITDE_MASK: u32 = 16;
pub const UART_IE7816_INITDE_SHIFT: u32 = 4;
pub const UART_IE7816_BWTE_MASK: u32 = 32;
pub const UART_IE7816_BWTE_SHIFT: u32 = 5;
pub const UART_IE7816_CWTE_MASK: u32 = 64;
pub const UART_IE7816_CWTE_SHIFT: u32 = 6;
pub const UART_IE7816_WTE_MASK: u32 = 128;
pub const UART_IE7816_WTE_SHIFT: u32 = 7;
pub const UART_IS7816_RXT_MASK: u32 = 1;
pub const UART_IS7816_RXT_SHIFT: u32 = 0;
pub const UART_IS7816_TXT_MASK: u32 = 2;
pub const UART_IS7816_TXT_SHIFT: u32 = 1;
pub const UART_IS7816_GTV_MASK: u32 = 4;
pub const UART_IS7816_GTV_SHIFT: u32 = 2;
pub const UART_IS7816_INITD_MASK: u32 = 16;
pub const UART_IS7816_INITD_SHIFT: u32 = 4;
pub const UART_IS7816_BWT_MASK: u32 = 32;
pub const UART_IS7816_BWT_SHIFT: u32 = 5;
pub const UART_IS7816_CWT_MASK: u32 = 64;
pub const UART_IS7816_CWT_SHIFT: u32 = 6;
pub const UART_IS7816_WT_MASK: u32 = 128;
pub const UART_IS7816_WT_SHIFT: u32 = 7;
pub const UART_WP7816T0_WI_MASK: u32 = 255;
pub const UART_WP7816T0_WI_SHIFT: u32 = 0;
pub const UART_WP7816T1_BWI_MASK: u32 = 15;
pub const UART_WP7816T1_BWI_SHIFT: u32 = 0;
pub const UART_WP7816T1_CWI_MASK: u32 = 240;
pub const UART_WP7816T1_CWI_SHIFT: u32 = 4;
pub const UART_WN7816_GTN_MASK: u32 = 255;
pub const UART_WN7816_GTN_SHIFT: u32 = 0;
pub const UART_WF7816_GTFD_MASK: u32 = 255;
pub const UART_WF7816_GTFD_SHIFT: u32 = 0;
pub const UART_ET7816_RXTHRESHOLD_MASK: u32 = 15;
pub const UART_ET7816_RXTHRESHOLD_SHIFT: u32 = 0;
pub const UART_ET7816_TXTHRESHOLD_MASK: u32 = 240;
pub const UART_ET7816_TXTHRESHOLD_SHIFT: u32 = 4;
pub const UART_TL7816_TLEN_MASK: u32 = 255;
pub const UART_TL7816_TLEN_SHIFT: u32 = 0;
pub const UART0_BASE: u32 = 1074176000;
pub const UART1_BASE: u32 = 1074180096;
pub const UART2_BASE: u32 = 1074184192;
pub const UART3_BASE: u32 = 1074188288;
pub const UART4_BASE: u32 = 1074700288;
pub const UART5_BASE: u32 = 1074704384;
#[doc = " USB - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USB_Type {
    #[doc = "< Peripheral ID register, offset: 0x0"]
    pub PERID: u8,
    pub RESERVED_0: [u8; 3usize],
    #[doc = "< Peripheral ID Complement register, offset: 0x4"]
    pub IDCOMP: u8,
    pub RESERVED_1: [u8; 3usize],
    #[doc = "< Peripheral Revision register, offset: 0x8"]
    pub REV: u8,
    pub RESERVED_2: [u8; 3usize],
    #[doc = "< Peripheral Additional Info register, offset: 0xC"]
    pub ADDINFO: u8,
    pub RESERVED_3: [u8; 3usize],
    #[doc = "< OTG Interrupt Status register, offset: 0x10"]
    pub OTGISTAT: u8,
    pub RESERVED_4: [u8; 3usize],
    #[doc = "< OTG Interrupt Control Register, offset: 0x14"]
    pub OTGICR: u8,
    pub RESERVED_5: [u8; 3usize],
    #[doc = "< OTG Status register, offset: 0x18"]
    pub OTGSTAT: u8,
    pub RESERVED_6: [u8; 3usize],
    #[doc = "< OTG Control register, offset: 0x1C"]
    pub OTGCTL: u8,
    pub RESERVED_7: [u8; 99usize],
    #[doc = "< Interrupt Status register, offset: 0x80"]
    pub ISTAT: u8,
    pub RESERVED_8: [u8; 3usize],
    #[doc = "< Interrupt Enable register, offset: 0x84"]
    pub INTEN: u8,
    pub RESERVED_9: [u8; 3usize],
    #[doc = "< Error Interrupt Status register, offset: 0x88"]
    pub ERRSTAT: u8,
    pub RESERVED_10: [u8; 3usize],
    #[doc = "< Error Interrupt Enable register, offset: 0x8C"]
    pub ERREN: u8,
    pub RESERVED_11: [u8; 3usize],
    #[doc = "< Status register, offset: 0x90"]
    pub STAT: u8,
    pub RESERVED_12: [u8; 3usize],
    #[doc = "< Control register, offset: 0x94"]
    pub CTL: u8,
    pub RESERVED_13: [u8; 3usize],
    #[doc = "< Address register, offset: 0x98"]
    pub ADDR: u8,
    pub RESERVED_14: [u8; 3usize],
    #[doc = "< BDT Page Register 1, offset: 0x9C"]
    pub BDTPAGE1: u8,
    pub RESERVED_15: [u8; 3usize],
    #[doc = "< Frame Number Register Low, offset: 0xA0"]
    pub FRMNUML: u8,
    pub RESERVED_16: [u8; 3usize],
    #[doc = "< Frame Number Register High, offset: 0xA4"]
    pub FRMNUMH: u8,
    pub RESERVED_17: [u8; 3usize],
    #[doc = "< Token register, offset: 0xA8"]
    pub TOKEN: u8,
    pub RESERVED_18: [u8; 3usize],
    #[doc = "< SOF Threshold Register, offset: 0xAC"]
    pub SOFTHLD: u8,
    pub RESERVED_19: [u8; 3usize],
    #[doc = "< BDT Page Register 2, offset: 0xB0"]
    pub BDTPAGE2: u8,
    pub RESERVED_20: [u8; 3usize],
    #[doc = "< BDT Page Register 3, offset: 0xB4"]
    pub BDTPAGE3: u8,
    pub RESERVED_21: [u8; 11usize],
    pub ENDPOINT: [USB_Type__bindgen_ty_1; 16usize],
    #[doc = "< USB Control register, offset: 0x100"]
    pub USBCTRL: u8,
    pub RESERVED_22: [u8; 3usize],
    #[doc = "< USB OTG Observe register, offset: 0x104"]
    pub OBSERVE: u8,
    pub RESERVED_23: [u8; 3usize],
    #[doc = "< USB OTG Control register, offset: 0x108"]
    pub CONTROL: u8,
    pub RESERVED_24: [u8; 3usize],
    #[doc = "< USB Transceiver Control Register 0, offset: 0x10C"]
    pub USBTRC0: u8,
    pub RESERVED_25: [u8; 7usize],
    #[doc = "< Frame Adjust Register, offset: 0x114"]
    pub USBFRMADJUST: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct USB_Type__bindgen_ty_1 {
    #[doc = "< Endpoint Control register, array offset: 0xC0, array step: 0x4"]
    pub ENDPT: u8,
    pub RESERVED_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_USB_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<USB_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<USB_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(USB_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<USB_Type__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(USB_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ENDPT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type__bindgen_ty_1),
            "::",
            stringify!(ENDPT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type__bindgen_ty_1),
            "::",
            stringify!(RESERVED_0)
        )
    );
}
#[test]
fn bindgen_test_layout_USB_Type() {
    const UNINIT: ::std::mem::MaybeUninit<USB_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<USB_Type>(),
        277usize,
        concat!("Size of: ", stringify!(USB_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<USB_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(USB_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PERID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(PERID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IDCOMP) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(IDCOMP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_1) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REV) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(REV)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_2) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ADDINFO) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(ADDINFO)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_3) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OTGISTAT) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(OTGISTAT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_4) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OTGICR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(OTGICR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_5) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OTGSTAT) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(OTGSTAT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_6) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OTGCTL) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(OTGCTL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_7) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ISTAT) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(ISTAT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_8) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).INTEN) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(INTEN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_9) as usize - ptr as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ERRSTAT) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(ERRSTAT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_10) as usize - ptr as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ERREN) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(ERREN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_11) as usize - ptr as usize },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STAT) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(STAT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_12) as usize - ptr as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTL) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(CTL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_13) as usize - ptr as usize },
        149usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ADDR) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(ADDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_14) as usize - ptr as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BDTPAGE1) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(BDTPAGE1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_15) as usize - ptr as usize },
        157usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FRMNUML) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(FRMNUML)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_16) as usize - ptr as usize },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FRMNUMH) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(FRMNUMH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_17) as usize - ptr as usize },
        165usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TOKEN) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(TOKEN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_18) as usize - ptr as usize },
        169usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SOFTHLD) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(SOFTHLD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_19) as usize - ptr as usize },
        173usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_19)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BDTPAGE2) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(BDTPAGE2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_20) as usize - ptr as usize },
        177usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BDTPAGE3) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(BDTPAGE3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_21) as usize - ptr as usize },
        181usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ENDPOINT) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(ENDPOINT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBCTRL) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(USBCTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_22) as usize - ptr as usize },
        257usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OBSERVE) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(OBSERVE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_23) as usize - ptr as usize },
        261usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CONTROL) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_24) as usize - ptr as usize },
        265usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_24)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBTRC0) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(USBTRC0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_25) as usize - ptr as usize },
        269usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(RESERVED_25)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USBFRMADJUST) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(USB_Type),
            "::",
            stringify!(USBFRMADJUST)
        )
    );
}
pub const USB_PERID_ID_MASK: u32 = 63;
pub const USB_PERID_ID_SHIFT: u32 = 0;
pub const USB_IDCOMP_NID_MASK: u32 = 63;
pub const USB_IDCOMP_NID_SHIFT: u32 = 0;
pub const USB_REV_REV_MASK: u32 = 255;
pub const USB_REV_REV_SHIFT: u32 = 0;
pub const USB_ADDINFO_IEHOST_MASK: u32 = 1;
pub const USB_ADDINFO_IEHOST_SHIFT: u32 = 0;
pub const USB_ADDINFO_IRQNUM_MASK: u32 = 248;
pub const USB_ADDINFO_IRQNUM_SHIFT: u32 = 3;
pub const USB_OTGISTAT_AVBUSCHG_MASK: u32 = 1;
pub const USB_OTGISTAT_AVBUSCHG_SHIFT: u32 = 0;
pub const USB_OTGISTAT_B_SESS_CHG_MASK: u32 = 4;
pub const USB_OTGISTAT_B_SESS_CHG_SHIFT: u32 = 2;
pub const USB_OTGISTAT_SESSVLDCHG_MASK: u32 = 8;
pub const USB_OTGISTAT_SESSVLDCHG_SHIFT: u32 = 3;
pub const USB_OTGISTAT_LINE_STATE_CHG_MASK: u32 = 32;
pub const USB_OTGISTAT_LINE_STATE_CHG_SHIFT: u32 = 5;
pub const USB_OTGISTAT_ONEMSEC_MASK: u32 = 64;
pub const USB_OTGISTAT_ONEMSEC_SHIFT: u32 = 6;
pub const USB_OTGISTAT_IDCHG_MASK: u32 = 128;
pub const USB_OTGISTAT_IDCHG_SHIFT: u32 = 7;
pub const USB_OTGICR_AVBUSEN_MASK: u32 = 1;
pub const USB_OTGICR_AVBUSEN_SHIFT: u32 = 0;
pub const USB_OTGICR_BSESSEN_MASK: u32 = 4;
pub const USB_OTGICR_BSESSEN_SHIFT: u32 = 2;
pub const USB_OTGICR_SESSVLDEN_MASK: u32 = 8;
pub const USB_OTGICR_SESSVLDEN_SHIFT: u32 = 3;
pub const USB_OTGICR_LINESTATEEN_MASK: u32 = 32;
pub const USB_OTGICR_LINESTATEEN_SHIFT: u32 = 5;
pub const USB_OTGICR_ONEMSECEN_MASK: u32 = 64;
pub const USB_OTGICR_ONEMSECEN_SHIFT: u32 = 6;
pub const USB_OTGICR_IDEN_MASK: u32 = 128;
pub const USB_OTGICR_IDEN_SHIFT: u32 = 7;
pub const USB_OTGSTAT_AVBUSVLD_MASK: u32 = 1;
pub const USB_OTGSTAT_AVBUSVLD_SHIFT: u32 = 0;
pub const USB_OTGSTAT_BSESSEND_MASK: u32 = 4;
pub const USB_OTGSTAT_BSESSEND_SHIFT: u32 = 2;
pub const USB_OTGSTAT_SESS_VLD_MASK: u32 = 8;
pub const USB_OTGSTAT_SESS_VLD_SHIFT: u32 = 3;
pub const USB_OTGSTAT_LINESTATESTABLE_MASK: u32 = 32;
pub const USB_OTGSTAT_LINESTATESTABLE_SHIFT: u32 = 5;
pub const USB_OTGSTAT_ONEMSECEN_MASK: u32 = 64;
pub const USB_OTGSTAT_ONEMSECEN_SHIFT: u32 = 6;
pub const USB_OTGSTAT_ID_MASK: u32 = 128;
pub const USB_OTGSTAT_ID_SHIFT: u32 = 7;
pub const USB_OTGCTL_OTGEN_MASK: u32 = 4;
pub const USB_OTGCTL_OTGEN_SHIFT: u32 = 2;
pub const USB_OTGCTL_DMLOW_MASK: u32 = 16;
pub const USB_OTGCTL_DMLOW_SHIFT: u32 = 4;
pub const USB_OTGCTL_DPLOW_MASK: u32 = 32;
pub const USB_OTGCTL_DPLOW_SHIFT: u32 = 5;
pub const USB_OTGCTL_DPHIGH_MASK: u32 = 128;
pub const USB_OTGCTL_DPHIGH_SHIFT: u32 = 7;
pub const USB_ISTAT_USBRST_MASK: u32 = 1;
pub const USB_ISTAT_USBRST_SHIFT: u32 = 0;
pub const USB_ISTAT_ERROR_MASK: u32 = 2;
pub const USB_ISTAT_ERROR_SHIFT: u32 = 1;
pub const USB_ISTAT_SOFTOK_MASK: u32 = 4;
pub const USB_ISTAT_SOFTOK_SHIFT: u32 = 2;
pub const USB_ISTAT_TOKDNE_MASK: u32 = 8;
pub const USB_ISTAT_TOKDNE_SHIFT: u32 = 3;
pub const USB_ISTAT_SLEEP_MASK: u32 = 16;
pub const USB_ISTAT_SLEEP_SHIFT: u32 = 4;
pub const USB_ISTAT_RESUME_MASK: u32 = 32;
pub const USB_ISTAT_RESUME_SHIFT: u32 = 5;
pub const USB_ISTAT_ATTACH_MASK: u32 = 64;
pub const USB_ISTAT_ATTACH_SHIFT: u32 = 6;
pub const USB_ISTAT_STALL_MASK: u32 = 128;
pub const USB_ISTAT_STALL_SHIFT: u32 = 7;
pub const USB_INTEN_USBRSTEN_MASK: u32 = 1;
pub const USB_INTEN_USBRSTEN_SHIFT: u32 = 0;
pub const USB_INTEN_ERROREN_MASK: u32 = 2;
pub const USB_INTEN_ERROREN_SHIFT: u32 = 1;
pub const USB_INTEN_SOFTOKEN_MASK: u32 = 4;
pub const USB_INTEN_SOFTOKEN_SHIFT: u32 = 2;
pub const USB_INTEN_TOKDNEEN_MASK: u32 = 8;
pub const USB_INTEN_TOKDNEEN_SHIFT: u32 = 3;
pub const USB_INTEN_SLEEPEN_MASK: u32 = 16;
pub const USB_INTEN_SLEEPEN_SHIFT: u32 = 4;
pub const USB_INTEN_RESUMEEN_MASK: u32 = 32;
pub const USB_INTEN_RESUMEEN_SHIFT: u32 = 5;
pub const USB_INTEN_ATTACHEN_MASK: u32 = 64;
pub const USB_INTEN_ATTACHEN_SHIFT: u32 = 6;
pub const USB_INTEN_STALLEN_MASK: u32 = 128;
pub const USB_INTEN_STALLEN_SHIFT: u32 = 7;
pub const USB_ERRSTAT_PIDERR_MASK: u32 = 1;
pub const USB_ERRSTAT_PIDERR_SHIFT: u32 = 0;
pub const USB_ERRSTAT_CRC5EOF_MASK: u32 = 2;
pub const USB_ERRSTAT_CRC5EOF_SHIFT: u32 = 1;
pub const USB_ERRSTAT_CRC16_MASK: u32 = 4;
pub const USB_ERRSTAT_CRC16_SHIFT: u32 = 2;
pub const USB_ERRSTAT_DFN8_MASK: u32 = 8;
pub const USB_ERRSTAT_DFN8_SHIFT: u32 = 3;
pub const USB_ERRSTAT_BTOERR_MASK: u32 = 16;
pub const USB_ERRSTAT_BTOERR_SHIFT: u32 = 4;
pub const USB_ERRSTAT_DMAERR_MASK: u32 = 32;
pub const USB_ERRSTAT_DMAERR_SHIFT: u32 = 5;
pub const USB_ERRSTAT_BTSERR_MASK: u32 = 128;
pub const USB_ERRSTAT_BTSERR_SHIFT: u32 = 7;
pub const USB_ERREN_PIDERREN_MASK: u32 = 1;
pub const USB_ERREN_PIDERREN_SHIFT: u32 = 0;
pub const USB_ERREN_CRC5EOFEN_MASK: u32 = 2;
pub const USB_ERREN_CRC5EOFEN_SHIFT: u32 = 1;
pub const USB_ERREN_CRC16EN_MASK: u32 = 4;
pub const USB_ERREN_CRC16EN_SHIFT: u32 = 2;
pub const USB_ERREN_DFN8EN_MASK: u32 = 8;
pub const USB_ERREN_DFN8EN_SHIFT: u32 = 3;
pub const USB_ERREN_BTOERREN_MASK: u32 = 16;
pub const USB_ERREN_BTOERREN_SHIFT: u32 = 4;
pub const USB_ERREN_DMAERREN_MASK: u32 = 32;
pub const USB_ERREN_DMAERREN_SHIFT: u32 = 5;
pub const USB_ERREN_BTSERREN_MASK: u32 = 128;
pub const USB_ERREN_BTSERREN_SHIFT: u32 = 7;
pub const USB_STAT_ODD_MASK: u32 = 4;
pub const USB_STAT_ODD_SHIFT: u32 = 2;
pub const USB_STAT_TX_MASK: u32 = 8;
pub const USB_STAT_TX_SHIFT: u32 = 3;
pub const USB_STAT_ENDP_MASK: u32 = 240;
pub const USB_STAT_ENDP_SHIFT: u32 = 4;
pub const USB_CTL_USBENSOFEN_MASK: u32 = 1;
pub const USB_CTL_USBENSOFEN_SHIFT: u32 = 0;
pub const USB_CTL_ODDRST_MASK: u32 = 2;
pub const USB_CTL_ODDRST_SHIFT: u32 = 1;
pub const USB_CTL_RESUME_MASK: u32 = 4;
pub const USB_CTL_RESUME_SHIFT: u32 = 2;
pub const USB_CTL_HOSTMODEEN_MASK: u32 = 8;
pub const USB_CTL_HOSTMODEEN_SHIFT: u32 = 3;
pub const USB_CTL_RESET_MASK: u32 = 16;
pub const USB_CTL_RESET_SHIFT: u32 = 4;
pub const USB_CTL_TXSUSPENDTOKENBUSY_MASK: u32 = 32;
pub const USB_CTL_TXSUSPENDTOKENBUSY_SHIFT: u32 = 5;
pub const USB_CTL_SE0_MASK: u32 = 64;
pub const USB_CTL_SE0_SHIFT: u32 = 6;
pub const USB_CTL_JSTATE_MASK: u32 = 128;
pub const USB_CTL_JSTATE_SHIFT: u32 = 7;
pub const USB_ADDR_ADDR_MASK: u32 = 127;
pub const USB_ADDR_ADDR_SHIFT: u32 = 0;
pub const USB_ADDR_LSEN_MASK: u32 = 128;
pub const USB_ADDR_LSEN_SHIFT: u32 = 7;
pub const USB_BDTPAGE1_BDTBA_MASK: u32 = 254;
pub const USB_BDTPAGE1_BDTBA_SHIFT: u32 = 1;
pub const USB_FRMNUML_FRM_MASK: u32 = 255;
pub const USB_FRMNUML_FRM_SHIFT: u32 = 0;
pub const USB_FRMNUMH_FRM_MASK: u32 = 7;
pub const USB_FRMNUMH_FRM_SHIFT: u32 = 0;
pub const USB_TOKEN_TOKENENDPT_MASK: u32 = 15;
pub const USB_TOKEN_TOKENENDPT_SHIFT: u32 = 0;
pub const USB_TOKEN_TOKENPID_MASK: u32 = 240;
pub const USB_TOKEN_TOKENPID_SHIFT: u32 = 4;
pub const USB_SOFTHLD_CNT_MASK: u32 = 255;
pub const USB_SOFTHLD_CNT_SHIFT: u32 = 0;
pub const USB_BDTPAGE2_BDTBA_MASK: u32 = 255;
pub const USB_BDTPAGE2_BDTBA_SHIFT: u32 = 0;
pub const USB_BDTPAGE3_BDTBA_MASK: u32 = 255;
pub const USB_BDTPAGE3_BDTBA_SHIFT: u32 = 0;
pub const USB_ENDPT_EPHSHK_MASK: u32 = 1;
pub const USB_ENDPT_EPHSHK_SHIFT: u32 = 0;
pub const USB_ENDPT_EPSTALL_MASK: u32 = 2;
pub const USB_ENDPT_EPSTALL_SHIFT: u32 = 1;
pub const USB_ENDPT_EPTXEN_MASK: u32 = 4;
pub const USB_ENDPT_EPTXEN_SHIFT: u32 = 2;
pub const USB_ENDPT_EPRXEN_MASK: u32 = 8;
pub const USB_ENDPT_EPRXEN_SHIFT: u32 = 3;
pub const USB_ENDPT_EPCTLDIS_MASK: u32 = 16;
pub const USB_ENDPT_EPCTLDIS_SHIFT: u32 = 4;
pub const USB_ENDPT_RETRYDIS_MASK: u32 = 64;
pub const USB_ENDPT_RETRYDIS_SHIFT: u32 = 6;
pub const USB_ENDPT_HOSTWOHUB_MASK: u32 = 128;
pub const USB_ENDPT_HOSTWOHUB_SHIFT: u32 = 7;
pub const USB_ENDPT_COUNT: u32 = 16;
pub const USB_USBCTRL_PDE_MASK: u32 = 64;
pub const USB_USBCTRL_PDE_SHIFT: u32 = 6;
pub const USB_USBCTRL_SUSP_MASK: u32 = 128;
pub const USB_USBCTRL_SUSP_SHIFT: u32 = 7;
pub const USB_OBSERVE_DMPD_MASK: u32 = 16;
pub const USB_OBSERVE_DMPD_SHIFT: u32 = 4;
pub const USB_OBSERVE_DPPD_MASK: u32 = 64;
pub const USB_OBSERVE_DPPD_SHIFT: u32 = 6;
pub const USB_OBSERVE_DPPU_MASK: u32 = 128;
pub const USB_OBSERVE_DPPU_SHIFT: u32 = 7;
pub const USB_CONTROL_DPPULLUPNONOTG_MASK: u32 = 16;
pub const USB_CONTROL_DPPULLUPNONOTG_SHIFT: u32 = 4;
pub const USB_USBTRC0_USB_RESUME_INT_MASK: u32 = 1;
pub const USB_USBTRC0_USB_RESUME_INT_SHIFT: u32 = 0;
pub const USB_USBTRC0_SYNC_DET_MASK: u32 = 2;
pub const USB_USBTRC0_SYNC_DET_SHIFT: u32 = 1;
pub const USB_USBTRC0_USBRESMEN_MASK: u32 = 32;
pub const USB_USBTRC0_USBRESMEN_SHIFT: u32 = 5;
pub const USB_USBTRC0_USBRESET_MASK: u32 = 128;
pub const USB_USBTRC0_USBRESET_SHIFT: u32 = 7;
pub const USB_USBFRMADJUST_ADJ_MASK: u32 = 255;
pub const USB_USBFRMADJUST_ADJ_SHIFT: u32 = 0;
pub const USB0_BASE: u32 = 1074208768;
#[doc = " USBDCD - Register Layout Typedef"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct USBDCD_Type {
    #[doc = "< Control register, offset: 0x0"]
    pub CONTROL: u32,
    #[doc = "< Clock register, offset: 0x4"]
    pub CLOCK: u32,
    #[doc = "< Status register, offset: 0x8"]
    pub STATUS: u32,
    pub RESERVED_0: [u8; 4usize],
    #[doc = "< TIMER0 register, offset: 0x10"]
    pub TIMER0: u32,
    #[doc = "< TIMER1 register, offset: 0x14"]
    pub TIMER1: u32,
    pub __bindgen_anon_1: USBDCD_Type__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union USBDCD_Type__bindgen_ty_1 {
    #[doc = "< TIMER2_BC11 register, offset: 0x18"]
    pub TIMER2_BC11: u32,
    #[doc = "< TIMER2_BC12 register, offset: 0x18"]
    pub TIMER2_BC12: u32,
}
#[test]
fn bindgen_test_layout_USBDCD_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<USBDCD_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<USBDCD_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(USBDCD_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<USBDCD_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(USBDCD_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TIMER2_BC11) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USBDCD_Type__bindgen_ty_1),
            "::",
            stringify!(TIMER2_BC11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TIMER2_BC12) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USBDCD_Type__bindgen_ty_1),
            "::",
            stringify!(TIMER2_BC12)
        )
    );
}
#[test]
fn bindgen_test_layout_USBDCD_Type() {
    const UNINIT: ::std::mem::MaybeUninit<USBDCD_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<USBDCD_Type>(),
        28usize,
        concat!("Size of: ", stringify!(USBDCD_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<USBDCD_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(USBDCD_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CONTROL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(USBDCD_Type),
            "::",
            stringify!(CONTROL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLOCK) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(USBDCD_Type),
            "::",
            stringify!(CLOCK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STATUS) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(USBDCD_Type),
            "::",
            stringify!(STATUS)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED_0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(USBDCD_Type),
            "::",
            stringify!(RESERVED_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TIMER0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(USBDCD_Type),
            "::",
            stringify!(TIMER0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TIMER1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(USBDCD_Type),
            "::",
            stringify!(TIMER1)
        )
    );
}
pub const USBDCD_CONTROL_IACK_MASK: u32 = 1;
pub const USBDCD_CONTROL_IACK_SHIFT: u32 = 0;
pub const USBDCD_CONTROL_IF_MASK: u32 = 256;
pub const USBDCD_CONTROL_IF_SHIFT: u32 = 8;
pub const USBDCD_CONTROL_IE_MASK: u32 = 65536;
pub const USBDCD_CONTROL_IE_SHIFT: u32 = 16;
pub const USBDCD_CONTROL_BC12_MASK: u32 = 131072;
pub const USBDCD_CONTROL_BC12_SHIFT: u32 = 17;
pub const USBDCD_CONTROL_START_MASK: u32 = 16777216;
pub const USBDCD_CONTROL_START_SHIFT: u32 = 24;
pub const USBDCD_CONTROL_SR_MASK: u32 = 33554432;
pub const USBDCD_CONTROL_SR_SHIFT: u32 = 25;
pub const USBDCD_CLOCK_CLOCK_UNIT_MASK: u32 = 1;
pub const USBDCD_CLOCK_CLOCK_UNIT_SHIFT: u32 = 0;
pub const USBDCD_CLOCK_CLOCK_SPEED_MASK: u32 = 4092;
pub const USBDCD_CLOCK_CLOCK_SPEED_SHIFT: u32 = 2;
pub const USBDCD_STATUS_SEQ_RES_MASK: u32 = 196608;
pub const USBDCD_STATUS_SEQ_RES_SHIFT: u32 = 16;
pub const USBDCD_STATUS_SEQ_STAT_MASK: u32 = 786432;
pub const USBDCD_STATUS_SEQ_STAT_SHIFT: u32 = 18;
pub const USBDCD_STATUS_ERR_MASK: u32 = 1048576;
pub const USBDCD_STATUS_ERR_SHIFT: u32 = 20;
pub const USBDCD_STATUS_TO_MASK: u32 = 2097152;
pub const USBDCD_STATUS_TO_SHIFT: u32 = 21;
pub const USBDCD_STATUS_ACTIVE_MASK: u32 = 4194304;
pub const USBDCD_STATUS_ACTIVE_SHIFT: u32 = 22;
pub const USBDCD_TIMER0_TUNITCON_MASK: u32 = 4095;
pub const USBDCD_TIMER0_TUNITCON_SHIFT: u32 = 0;
pub const USBDCD_TIMER0_TSEQ_INIT_MASK: u32 = 67043328;
pub const USBDCD_TIMER0_TSEQ_INIT_SHIFT: u32 = 16;
pub const USBDCD_TIMER1_TVDPSRC_ON_MASK: u32 = 1023;
pub const USBDCD_TIMER1_TVDPSRC_ON_SHIFT: u32 = 0;
pub const USBDCD_TIMER1_TDCD_DBNC_MASK: u32 = 67043328;
pub const USBDCD_TIMER1_TDCD_DBNC_SHIFT: u32 = 16;
pub const USBDCD_TIMER2_BC11_CHECK_DM_MASK: u32 = 15;
pub const USBDCD_TIMER2_BC11_CHECK_DM_SHIFT: u32 = 0;
pub const USBDCD_TIMER2_BC11_TVDPSRC_CON_MASK: u32 = 67043328;
pub const USBDCD_TIMER2_BC11_TVDPSRC_CON_SHIFT: u32 = 16;
pub const USBDCD_TIMER2_BC12_TVDMSRC_ON_MASK: u32 = 1023;
pub const USBDCD_TIMER2_BC12_TVDMSRC_ON_SHIFT: u32 = 0;
pub const USBDCD_TIMER2_BC12_TWAIT_AFTER_PRD_MASK: u32 = 67043328;
pub const USBDCD_TIMER2_BC12_TWAIT_AFTER_PRD_SHIFT: u32 = 16;
pub const USBDCD_BASE: u32 = 1073958912;
#[doc = " VREF - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREF_Type {
    #[doc = "< VREF Trim Register, offset: 0x0"]
    pub TRM: u8,
    #[doc = "< VREF Status and Control Register, offset: 0x1"]
    pub SC: u8,
}
#[test]
fn bindgen_test_layout_VREF_Type() {
    const UNINIT: ::std::mem::MaybeUninit<VREF_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VREF_Type>(),
        2usize,
        concat!("Size of: ", stringify!(VREF_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<VREF_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(VREF_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TRM) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VREF_Type),
            "::",
            stringify!(TRM)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SC) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(VREF_Type),
            "::",
            stringify!(SC)
        )
    );
}
pub const VREF_TRM_TRIM_MASK: u32 = 63;
pub const VREF_TRM_TRIM_SHIFT: u32 = 0;
pub const VREF_TRM_CHOPEN_MASK: u32 = 64;
pub const VREF_TRM_CHOPEN_SHIFT: u32 = 6;
pub const VREF_SC_MODE_LV_MASK: u32 = 3;
pub const VREF_SC_MODE_LV_SHIFT: u32 = 0;
pub const VREF_SC_VREFST_MASK: u32 = 4;
pub const VREF_SC_VREFST_SHIFT: u32 = 2;
pub const VREF_SC_ICOMPEN_MASK: u32 = 32;
pub const VREF_SC_ICOMPEN_SHIFT: u32 = 5;
pub const VREF_SC_REGEN_MASK: u32 = 64;
pub const VREF_SC_REGEN_SHIFT: u32 = 6;
pub const VREF_SC_VREFEN_MASK: u32 = 128;
pub const VREF_SC_VREFEN_SHIFT: u32 = 7;
pub const VREF_BASE: u32 = 1074216960;
#[doc = " WDOG - Register Layout Typedef"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WDOG_Type {
    #[doc = "< Watchdog Status and Control Register High, offset: 0x0"]
    pub STCTRLH: u16,
    #[doc = "< Watchdog Status and Control Register Low, offset: 0x2"]
    pub STCTRLL: u16,
    #[doc = "< Watchdog Time-out Value Register High, offset: 0x4"]
    pub TOVALH: u16,
    #[doc = "< Watchdog Time-out Value Register Low, offset: 0x6"]
    pub TOVALL: u16,
    #[doc = "< Watchdog Window Register High, offset: 0x8"]
    pub WINH: u16,
    #[doc = "< Watchdog Window Register Low, offset: 0xA"]
    pub WINL: u16,
    #[doc = "< Watchdog Refresh register, offset: 0xC"]
    pub REFRESH: u16,
    #[doc = "< Watchdog Unlock register, offset: 0xE"]
    pub UNLOCK: u16,
    #[doc = "< Watchdog Timer Output Register High, offset: 0x10"]
    pub TMROUTH: u16,
    #[doc = "< Watchdog Timer Output Register Low, offset: 0x12"]
    pub TMROUTL: u16,
    #[doc = "< Watchdog Reset Count register, offset: 0x14"]
    pub RSTCNT: u16,
    #[doc = "< Watchdog Prescaler register, offset: 0x16"]
    pub PRESC: u16,
}
#[test]
fn bindgen_test_layout_WDOG_Type() {
    const UNINIT: ::std::mem::MaybeUninit<WDOG_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WDOG_Type>(),
        24usize,
        concat!("Size of: ", stringify!(WDOG_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<WDOG_Type>(),
        2usize,
        concat!("Alignment of ", stringify!(WDOG_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STCTRLH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(STCTRLH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STCTRLL) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(STCTRLL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TOVALH) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(TOVALH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TOVALL) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(TOVALL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WINH) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(WINH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WINL) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(WINL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).REFRESH) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(REFRESH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UNLOCK) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(UNLOCK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TMROUTH) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(TMROUTH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TMROUTL) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(TMROUTL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RSTCNT) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(RSTCNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PRESC) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(WDOG_Type),
            "::",
            stringify!(PRESC)
        )
    );
}
pub const WDOG_STCTRLH_WDOGEN_MASK: u32 = 1;
pub const WDOG_STCTRLH_WDOGEN_SHIFT: u32 = 0;
pub const WDOG_STCTRLH_CLKSRC_MASK: u32 = 2;
pub const WDOG_STCTRLH_CLKSRC_SHIFT: u32 = 1;
pub const WDOG_STCTRLH_IRQRSTEN_MASK: u32 = 4;
pub const WDOG_STCTRLH_IRQRSTEN_SHIFT: u32 = 2;
pub const WDOG_STCTRLH_WINEN_MASK: u32 = 8;
pub const WDOG_STCTRLH_WINEN_SHIFT: u32 = 3;
pub const WDOG_STCTRLH_ALLOWUPDATE_MASK: u32 = 16;
pub const WDOG_STCTRLH_ALLOWUPDATE_SHIFT: u32 = 4;
pub const WDOG_STCTRLH_DBGEN_MASK: u32 = 32;
pub const WDOG_STCTRLH_DBGEN_SHIFT: u32 = 5;
pub const WDOG_STCTRLH_STOPEN_MASK: u32 = 64;
pub const WDOG_STCTRLH_STOPEN_SHIFT: u32 = 6;
pub const WDOG_STCTRLH_WAITEN_MASK: u32 = 128;
pub const WDOG_STCTRLH_WAITEN_SHIFT: u32 = 7;
pub const WDOG_STCTRLH_TESTWDOG_MASK: u32 = 1024;
pub const WDOG_STCTRLH_TESTWDOG_SHIFT: u32 = 10;
pub const WDOG_STCTRLH_TESTSEL_MASK: u32 = 2048;
pub const WDOG_STCTRLH_TESTSEL_SHIFT: u32 = 11;
pub const WDOG_STCTRLH_BYTESEL_MASK: u32 = 12288;
pub const WDOG_STCTRLH_BYTESEL_SHIFT: u32 = 12;
pub const WDOG_STCTRLH_DISTESTWDOG_MASK: u32 = 16384;
pub const WDOG_STCTRLH_DISTESTWDOG_SHIFT: u32 = 14;
pub const WDOG_STCTRLL_INTFLG_MASK: u32 = 32768;
pub const WDOG_STCTRLL_INTFLG_SHIFT: u32 = 15;
pub const WDOG_TOVALH_TOVALHIGH_MASK: u32 = 65535;
pub const WDOG_TOVALH_TOVALHIGH_SHIFT: u32 = 0;
pub const WDOG_TOVALL_TOVALLOW_MASK: u32 = 65535;
pub const WDOG_TOVALL_TOVALLOW_SHIFT: u32 = 0;
pub const WDOG_WINH_WINHIGH_MASK: u32 = 65535;
pub const WDOG_WINH_WINHIGH_SHIFT: u32 = 0;
pub const WDOG_WINL_WINLOW_MASK: u32 = 65535;
pub const WDOG_WINL_WINLOW_SHIFT: u32 = 0;
pub const WDOG_REFRESH_WDOGREFRESH_MASK: u32 = 65535;
pub const WDOG_REFRESH_WDOGREFRESH_SHIFT: u32 = 0;
pub const WDOG_UNLOCK_WDOGUNLOCK_MASK: u32 = 65535;
pub const WDOG_UNLOCK_WDOGUNLOCK_SHIFT: u32 = 0;
pub const WDOG_TMROUTH_TIMEROUTHIGH_MASK: u32 = 65535;
pub const WDOG_TMROUTH_TIMEROUTHIGH_SHIFT: u32 = 0;
pub const WDOG_TMROUTL_TIMEROUTLOW_MASK: u32 = 65535;
pub const WDOG_TMROUTL_TIMEROUTLOW_SHIFT: u32 = 0;
pub const WDOG_RSTCNT_RSTCNT_MASK: u32 = 65535;
pub const WDOG_RSTCNT_RSTCNT_SHIFT: u32 = 0;
pub const WDOG_PRESC_PRESCVAL_MASK: u32 = 1792;
pub const WDOG_PRESC_PRESCVAL_SHIFT: u32 = 8;
pub const WDOG_BASE: u32 = 1074077696;
pub const PTA_BASE: u32 = 1074786304;
pub const PTB_BASE: u32 = 1074786368;
pub const PTC_BASE: u32 = 1074786432;
pub const PTD_BASE: u32 = 1074786496;
pub const PTE_BASE: u32 = 1074786560;
pub const SIM_SCGC6_FTFL_MASK: u32 = 1;
pub const SIM_SCGC6_FTFL_SHIFT: u32 = 0;
