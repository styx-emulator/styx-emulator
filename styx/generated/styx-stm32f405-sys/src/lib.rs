// SPDX-License-Identifier: BSD-2-Clause
#![doc = "Peripheral access API for STM32F405 microcontrollers (generated using svd2rust v0.32.0 (5cee789 2024-07-10))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.32.0/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use core::marker::PhantomData;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 3;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[doc(hidden)]
pub mod interrupt;
pub use self::interrupt::Interrupt;
#[doc = "Random number generator"]
#[cfg(feature = "rng")]
pub struct Rng {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "rng")]
unsafe impl Send for Rng {}
#[cfg(feature = "rng")]
impl Rng {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x5006_0800;
}
#[doc = "Random number generator"]
#[cfg(feature = "rng")]
pub mod rng;
#[doc = "Digital camera interface"]
#[cfg(feature = "dcmi")]
pub struct Dcmi {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "dcmi")]
unsafe impl Send for Dcmi {}
#[cfg(feature = "dcmi")]
impl Dcmi {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x5005_0000;
}
#[doc = "Digital camera interface"]
#[cfg(feature = "dcmi")]
pub mod dcmi;
#[doc = "Flexible static memory controller"]
#[cfg(feature = "fsmc")]
pub struct Fsmc {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "fsmc")]
unsafe impl Send for Fsmc {}
#[cfg(feature = "fsmc")]
impl Fsmc {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0xa000_0000;
}
#[doc = "Flexible static memory controller"]
#[cfg(feature = "fsmc")]
pub mod fsmc;
#[doc = "Debug support"]
#[cfg(feature = "dbg")]
pub struct Dbg {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "dbg")]
unsafe impl Send for Dbg {}
#[cfg(feature = "dbg")]
impl Dbg {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0xe004_2000;
}
#[doc = "Debug support"]
#[cfg(feature = "dbg")]
pub mod dbg;
#[doc = "DMA controller"]
#[cfg(feature = "dma2")]
pub struct Dma2 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "dma2")]
unsafe impl Send for Dma2 {}
#[cfg(feature = "dma2")]
impl Dma2 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_6400;
}
#[doc = "DMA controller"]
#[cfg(feature = "dma2")]
pub mod dma2;
#[doc = "DMA controller"]
#[cfg(feature = "dma1")]
pub struct Dma1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "dma1")]
unsafe impl Send for Dma1 {}
#[cfg(feature = "dma1")]
impl Dma1 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_6000;
}
#[doc = "DMA controller"]
#[cfg(feature = "dma1")]
pub use self::dma2 as dma1;
#[doc = "Reset and clock control"]
#[cfg(feature = "rcc")]
pub struct Rcc {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "rcc")]
unsafe impl Send for Rcc {}
#[cfg(feature = "rcc")]
impl Rcc {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_3800;
}
#[doc = "Reset and clock control"]
#[cfg(feature = "rcc")]
pub mod rcc;
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioi")]
pub struct Gpioi {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpioi")]
unsafe impl Send for Gpioi {}
#[cfg(feature = "gpioi")]
impl Gpioi {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_2000;
}
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioi")]
pub mod gpioi;
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioh")]
pub struct Gpioh {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpioh")]
unsafe impl Send for Gpioh {}
#[cfg(feature = "gpioh")]
impl Gpioh {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_1c00;
}
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioh")]
pub use self::gpioi as gpioh;
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpiog")]
pub struct Gpiog {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpiog")]
unsafe impl Send for Gpiog {}
#[cfg(feature = "gpiog")]
impl Gpiog {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_1800;
}
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpiog")]
pub use self::gpioi as gpiog;
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpiof")]
pub struct Gpiof {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpiof")]
unsafe impl Send for Gpiof {}
#[cfg(feature = "gpiof")]
impl Gpiof {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_1400;
}
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpiof")]
pub use self::gpioi as gpiof;
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioe")]
pub struct Gpioe {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpioe")]
unsafe impl Send for Gpioe {}
#[cfg(feature = "gpioe")]
impl Gpioe {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_1000;
}
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioe")]
pub use self::gpioi as gpioe;
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpiod")]
pub struct Gpiod {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpiod")]
unsafe impl Send for Gpiod {}
#[cfg(feature = "gpiod")]
impl Gpiod {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_0c00;
}
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpiod")]
pub use self::gpioi as gpiod;
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioc")]
pub struct Gpioc {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpioc")]
unsafe impl Send for Gpioc {}
#[cfg(feature = "gpioc")]
impl Gpioc {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_0800;
}
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioc")]
pub use self::gpioi as gpioc;
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioj")]
pub struct Gpioj {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpioj")]
unsafe impl Send for Gpioj {}
#[cfg(feature = "gpioj")]
impl Gpioj {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_2400;
}
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioj")]
pub use self::gpioi as gpioj;
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpiok")]
pub struct Gpiok {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpiok")]
unsafe impl Send for Gpiok {}
#[cfg(feature = "gpiok")]
impl Gpiok {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_2800;
}
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpiok")]
pub use self::gpioi as gpiok;
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpiob")]
pub struct Gpiob {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpiob")]
unsafe impl Send for Gpiob {}
#[cfg(feature = "gpiob")]
impl Gpiob {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_0400;
}
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpiob")]
pub mod gpiob;
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioa")]
pub struct Gpioa {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "gpioa")]
unsafe impl Send for Gpioa {}
#[cfg(feature = "gpioa")]
impl Gpioa {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_0000;
}
#[doc = "General-purpose I/Os"]
#[cfg(feature = "gpioa")]
pub mod gpioa;
#[doc = "System configuration controller"]
#[cfg(feature = "syscfg")]
pub struct Syscfg {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "syscfg")]
unsafe impl Send for Syscfg {}
#[cfg(feature = "syscfg")]
impl Syscfg {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_3800;
}
#[doc = "System configuration controller"]
#[cfg(feature = "syscfg")]
pub mod syscfg;
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi1")]
pub struct Spi1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "spi1")]
unsafe impl Send for Spi1 {}
#[cfg(feature = "spi1")]
impl Spi1 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_3000;
}
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi1")]
pub mod spi1;
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi2")]
pub struct Spi2 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "spi2")]
unsafe impl Send for Spi2 {}
#[cfg(feature = "spi2")]
impl Spi2 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_3800;
}
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi2")]
pub use self::spi1 as spi2;
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi3")]
pub struct Spi3 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "spi3")]
unsafe impl Send for Spi3 {}
#[cfg(feature = "spi3")]
impl Spi3 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_3c00;
}
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi3")]
pub use self::spi1 as spi3;
#[doc = "Serial peripheral interface"]
#[cfg(feature = "i2s2ext")]
pub struct I2s2ext {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "i2s2ext")]
unsafe impl Send for I2s2ext {}
#[cfg(feature = "i2s2ext")]
impl I2s2ext {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_3400;
}
#[doc = "Serial peripheral interface"]
#[cfg(feature = "i2s2ext")]
pub use self::spi1 as i2s2ext;
#[doc = "Serial peripheral interface"]
#[cfg(feature = "i2s3ext")]
pub struct I2s3ext {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "i2s3ext")]
unsafe impl Send for I2s3ext {}
#[cfg(feature = "i2s3ext")]
impl I2s3ext {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_4000;
}
#[doc = "Serial peripheral interface"]
#[cfg(feature = "i2s3ext")]
pub use self::spi1 as i2s3ext;
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi4")]
pub struct Spi4 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "spi4")]
unsafe impl Send for Spi4 {}
#[cfg(feature = "spi4")]
impl Spi4 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_3400;
}
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi4")]
pub use self::spi1 as spi4;
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi5")]
pub struct Spi5 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "spi5")]
unsafe impl Send for Spi5 {}
#[cfg(feature = "spi5")]
impl Spi5 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_5000;
}
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi5")]
pub use self::spi1 as spi5;
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi6")]
pub struct Spi6 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "spi6")]
unsafe impl Send for Spi6 {}
#[cfg(feature = "spi6")]
impl Spi6 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_5400;
}
#[doc = "Serial peripheral interface"]
#[cfg(feature = "spi6")]
pub use self::spi1 as spi6;
#[doc = "Secure digital input/output interface"]
#[cfg(feature = "sdio")]
pub struct Sdio {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "sdio")]
unsafe impl Send for Sdio {}
#[cfg(feature = "sdio")]
impl Sdio {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_2c00;
}
#[doc = "Secure digital input/output interface"]
#[cfg(feature = "sdio")]
pub mod sdio;
#[doc = "Analog-to-digital converter"]
#[cfg(feature = "adc1")]
pub struct Adc1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "adc1")]
unsafe impl Send for Adc1 {}
#[cfg(feature = "adc1")]
impl Adc1 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_2000;
}
#[doc = "Analog-to-digital converter"]
#[cfg(feature = "adc1")]
pub mod adc1;
#[doc = "Analog-to-digital converter"]
#[cfg(feature = "adc2")]
pub struct Adc2 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "adc2")]
unsafe impl Send for Adc2 {}
#[cfg(feature = "adc2")]
impl Adc2 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_2100;
}
#[doc = "Analog-to-digital converter"]
#[cfg(feature = "adc2")]
pub use self::adc1 as adc2;
#[doc = "Analog-to-digital converter"]
#[cfg(feature = "adc3")]
pub struct Adc3 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "adc3")]
unsafe impl Send for Adc3 {}
#[cfg(feature = "adc3")]
impl Adc3 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_2200;
}
#[doc = "Analog-to-digital converter"]
#[cfg(feature = "adc3")]
pub use self::adc1 as adc3;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "usart6")]
pub struct Usart6 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "usart6")]
unsafe impl Send for Usart6 {}
#[cfg(feature = "usart6")]
impl Usart6 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_1400;
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "usart6")]
pub mod usart6;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "usart1")]
pub struct Usart1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "usart1")]
unsafe impl Send for Usart1 {}
#[cfg(feature = "usart1")]
impl Usart1 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_1000;
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "usart1")]
pub use self::usart6 as usart1;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "usart2")]
pub struct Usart2 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "usart2")]
unsafe impl Send for Usart2 {}
#[cfg(feature = "usart2")]
impl Usart2 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_4400;
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "usart2")]
pub use self::usart6 as usart2;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "usart3")]
pub struct Usart3 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "usart3")]
unsafe impl Send for Usart3 {}
#[cfg(feature = "usart3")]
impl Usart3 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_4800;
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "usart3")]
pub use self::usart6 as usart3;
#[doc = "Digital-to-analog converter"]
#[cfg(feature = "dac")]
pub struct Dac {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "dac")]
unsafe impl Send for Dac {}
#[cfg(feature = "dac")]
impl Dac {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_7400;
}
#[doc = "Digital-to-analog converter"]
#[cfg(feature = "dac")]
pub mod dac;
#[doc = "Power control"]
#[cfg(feature = "pwr")]
pub struct Pwr {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "pwr")]
unsafe impl Send for Pwr {}
#[cfg(feature = "pwr")]
impl Pwr {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_7000;
}
#[doc = "Power control"]
#[cfg(feature = "pwr")]
pub mod pwr;
#[doc = "Inter-integrated circuit"]
#[cfg(feature = "i2c3")]
pub struct I2c3 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "i2c3")]
unsafe impl Send for I2c3 {}
#[cfg(feature = "i2c3")]
impl I2c3 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_5c00;
}
#[doc = "Inter-integrated circuit"]
#[cfg(feature = "i2c3")]
pub mod i2c3;
#[doc = "Inter-integrated circuit"]
#[cfg(feature = "i2c2")]
pub struct I2c2 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "i2c2")]
unsafe impl Send for I2c2 {}
#[cfg(feature = "i2c2")]
impl I2c2 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_5800;
}
#[doc = "Inter-integrated circuit"]
#[cfg(feature = "i2c2")]
pub use self::i2c3 as i2c2;
#[doc = "Inter-integrated circuit"]
#[cfg(feature = "i2c1")]
pub struct I2c1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "i2c1")]
unsafe impl Send for I2c1 {}
#[cfg(feature = "i2c1")]
impl I2c1 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_5400;
}
#[doc = "Inter-integrated circuit"]
#[cfg(feature = "i2c1")]
pub use self::i2c3 as i2c1;
#[doc = "Independent watchdog"]
#[cfg(feature = "iwdg")]
pub struct Iwdg {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "iwdg")]
unsafe impl Send for Iwdg {}
#[cfg(feature = "iwdg")]
impl Iwdg {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_3000;
}
#[doc = "Independent watchdog"]
#[cfg(feature = "iwdg")]
pub mod iwdg;
#[doc = "Window watchdog"]
#[cfg(feature = "wwdg")]
pub struct Wwdg {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "wwdg")]
unsafe impl Send for Wwdg {}
#[cfg(feature = "wwdg")]
impl Wwdg {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_2c00;
}
#[doc = "Window watchdog"]
#[cfg(feature = "wwdg")]
pub mod wwdg;
#[doc = "Real-time clock"]
#[cfg(feature = "rtc")]
pub struct Rtc {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "rtc")]
unsafe impl Send for Rtc {}
#[cfg(feature = "rtc")]
impl Rtc {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_2800;
}
#[doc = "Real-time clock"]
#[cfg(feature = "rtc")]
pub mod rtc;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "uart4")]
pub struct Uart4 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "uart4")]
unsafe impl Send for Uart4 {}
#[cfg(feature = "uart4")]
impl Uart4 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_4c00;
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "uart4")]
pub mod uart4;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "uart5")]
pub struct Uart5 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "uart5")]
unsafe impl Send for Uart5 {}
#[cfg(feature = "uart5")]
impl Uart5 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_5000;
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "uart5")]
pub use self::uart4 as uart5;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "uart7")]
pub struct Uart7 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "uart7")]
unsafe impl Send for Uart7 {}
#[cfg(feature = "uart7")]
impl Uart7 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_7800;
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "uart7")]
pub use self::uart4 as uart7;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "uart8")]
pub struct Uart8 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "uart8")]
unsafe impl Send for Uart8 {}
#[cfg(feature = "uart8")]
impl Uart8 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_7c00;
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
#[cfg(feature = "uart8")]
pub use self::uart4 as uart8;
#[doc = "Common ADC registers"]
#[cfg(feature = "c_adc")]
pub struct CAdc {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "c_adc")]
unsafe impl Send for CAdc {}
#[cfg(feature = "c_adc")]
impl CAdc {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_2300;
}
#[doc = "Common ADC registers"]
#[cfg(feature = "c_adc")]
pub mod c_adc;
#[doc = "Advanced-timers"]
#[cfg(feature = "tim1")]
pub struct Tim1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim1")]
unsafe impl Send for Tim1 {}
#[cfg(feature = "tim1")]
impl Tim1 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_0000;
}
#[doc = "Advanced-timers"]
#[cfg(feature = "tim1")]
pub mod tim1;
#[doc = "Advanced-timers"]
#[cfg(feature = "tim8")]
pub struct Tim8 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim8")]
unsafe impl Send for Tim8 {}
#[cfg(feature = "tim8")]
impl Tim8 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_0400;
}
#[doc = "Advanced-timers"]
#[cfg(feature = "tim8")]
pub use self::tim1 as tim8;
#[doc = "General purpose timers"]
#[cfg(feature = "tim2")]
pub struct Tim2 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim2")]
unsafe impl Send for Tim2 {}
#[cfg(feature = "tim2")]
impl Tim2 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_0000;
}
#[doc = "General purpose timers"]
#[cfg(feature = "tim2")]
pub mod tim2;
#[doc = "General purpose timers"]
#[cfg(feature = "tim3")]
pub struct Tim3 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim3")]
unsafe impl Send for Tim3 {}
#[cfg(feature = "tim3")]
impl Tim3 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_0400;
}
#[doc = "General purpose timers"]
#[cfg(feature = "tim3")]
pub mod tim3;
#[doc = "General purpose timers"]
#[cfg(feature = "tim4")]
pub struct Tim4 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim4")]
unsafe impl Send for Tim4 {}
#[cfg(feature = "tim4")]
impl Tim4 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_0800;
}
#[doc = "General purpose timers"]
#[cfg(feature = "tim4")]
pub use self::tim3 as tim4;
#[doc = "General-purpose-timers"]
#[cfg(feature = "tim5")]
pub struct Tim5 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim5")]
unsafe impl Send for Tim5 {}
#[cfg(feature = "tim5")]
impl Tim5 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_0c00;
}
#[doc = "General-purpose-timers"]
#[cfg(feature = "tim5")]
pub mod tim5;
#[doc = "General purpose timers"]
#[cfg(feature = "tim9")]
pub struct Tim9 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim9")]
unsafe impl Send for Tim9 {}
#[cfg(feature = "tim9")]
impl Tim9 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_4000;
}
#[doc = "General purpose timers"]
#[cfg(feature = "tim9")]
pub mod tim9;
#[doc = "General purpose timers"]
#[cfg(feature = "tim12")]
pub struct Tim12 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim12")]
unsafe impl Send for Tim12 {}
#[cfg(feature = "tim12")]
impl Tim12 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_1800;
}
#[doc = "General purpose timers"]
#[cfg(feature = "tim12")]
pub use self::tim9 as tim12;
#[doc = "General-purpose-timers"]
#[cfg(feature = "tim10")]
pub struct Tim10 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim10")]
unsafe impl Send for Tim10 {}
#[cfg(feature = "tim10")]
impl Tim10 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_4400;
}
#[doc = "General-purpose-timers"]
#[cfg(feature = "tim10")]
pub mod tim10;
#[doc = "General-purpose-timers"]
#[cfg(feature = "tim13")]
pub struct Tim13 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim13")]
unsafe impl Send for Tim13 {}
#[cfg(feature = "tim13")]
impl Tim13 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_1c00;
}
#[doc = "General-purpose-timers"]
#[cfg(feature = "tim13")]
pub use self::tim10 as tim13;
#[doc = "General-purpose-timers"]
#[cfg(feature = "tim14")]
pub struct Tim14 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim14")]
unsafe impl Send for Tim14 {}
#[cfg(feature = "tim14")]
impl Tim14 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_2000;
}
#[doc = "General-purpose-timers"]
#[cfg(feature = "tim14")]
pub use self::tim10 as tim14;
#[doc = "General-purpose-timers"]
#[cfg(feature = "tim11")]
pub struct Tim11 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim11")]
unsafe impl Send for Tim11 {}
#[cfg(feature = "tim11")]
impl Tim11 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_4800;
}
#[doc = "General-purpose-timers"]
#[cfg(feature = "tim11")]
pub mod tim11;
#[doc = "Basic timers"]
#[cfg(feature = "tim6")]
pub struct Tim6 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim6")]
unsafe impl Send for Tim6 {}
#[cfg(feature = "tim6")]
impl Tim6 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_1000;
}
#[doc = "Basic timers"]
#[cfg(feature = "tim6")]
pub mod tim6;
#[doc = "Basic timers"]
#[cfg(feature = "tim7")]
pub struct Tim7 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "tim7")]
unsafe impl Send for Tim7 {}
#[cfg(feature = "tim7")]
impl Tim7 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_1400;
}
#[doc = "Basic timers"]
#[cfg(feature = "tim7")]
pub use self::tim6 as tim7;
#[doc = "Ethernet: media access control (MAC)"]
#[cfg(feature = "ethernet_mac")]
pub struct EthernetMac {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "ethernet_mac")]
unsafe impl Send for EthernetMac {}
#[cfg(feature = "ethernet_mac")]
impl EthernetMac {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_8000;
}
#[doc = "Ethernet: media access control (MAC)"]
#[cfg(feature = "ethernet_mac")]
pub mod ethernet_mac;
#[doc = "Ethernet: MAC management counters"]
#[cfg(feature = "ethernet_mmc")]
pub struct EthernetMmc {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "ethernet_mmc")]
unsafe impl Send for EthernetMmc {}
#[cfg(feature = "ethernet_mmc")]
impl EthernetMmc {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_8100;
}
#[doc = "Ethernet: MAC management counters"]
#[cfg(feature = "ethernet_mmc")]
pub mod ethernet_mmc;
#[doc = "Ethernet: Precision time protocol"]
#[cfg(feature = "ethernet_ptp")]
pub struct EthernetPtp {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "ethernet_ptp")]
unsafe impl Send for EthernetPtp {}
#[cfg(feature = "ethernet_ptp")]
impl EthernetPtp {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_8700;
}
#[doc = "Ethernet: Precision time protocol"]
#[cfg(feature = "ethernet_ptp")]
pub mod ethernet_ptp;
#[doc = "Ethernet: DMA controller operation"]
#[cfg(feature = "ethernet_dma")]
pub struct EthernetDma {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "ethernet_dma")]
unsafe impl Send for EthernetDma {}
#[cfg(feature = "ethernet_dma")]
impl EthernetDma {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_9000;
}
#[doc = "Ethernet: DMA controller operation"]
#[cfg(feature = "ethernet_dma")]
pub mod ethernet_dma;
#[doc = "Cryptographic processor"]
#[cfg(feature = "crc")]
pub struct Crc {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "crc")]
unsafe impl Send for Crc {}
#[cfg(feature = "crc")]
impl Crc {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_3000;
}
#[doc = "Cryptographic processor"]
#[cfg(feature = "crc")]
pub mod crc;
#[doc = "USB on the go full speed"]
#[cfg(feature = "otg_fs_global")]
pub struct OtgFsGlobal {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "otg_fs_global")]
unsafe impl Send for OtgFsGlobal {}
#[cfg(feature = "otg_fs_global")]
impl OtgFsGlobal {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x5000_0000;
}
#[doc = "USB on the go full speed"]
#[cfg(feature = "otg_fs_global")]
pub mod otg_fs_global;
#[doc = "USB on the go full speed"]
#[cfg(feature = "otg_fs_host")]
pub struct OtgFsHost {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "otg_fs_host")]
unsafe impl Send for OtgFsHost {}
#[cfg(feature = "otg_fs_host")]
impl OtgFsHost {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x5000_0400;
}
#[doc = "USB on the go full speed"]
#[cfg(feature = "otg_fs_host")]
pub mod otg_fs_host;
#[doc = "USB on the go full speed"]
#[cfg(feature = "otg_fs_device")]
pub struct OtgFsDevice {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "otg_fs_device")]
unsafe impl Send for OtgFsDevice {}
#[cfg(feature = "otg_fs_device")]
impl OtgFsDevice {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x5000_0800;
}
#[doc = "USB on the go full speed"]
#[cfg(feature = "otg_fs_device")]
pub mod otg_fs_device;
#[doc = "USB on the go full speed"]
#[cfg(feature = "otg_fs_pwrclk")]
pub struct OtgFsPwrclk {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "otg_fs_pwrclk")]
unsafe impl Send for OtgFsPwrclk {}
#[cfg(feature = "otg_fs_pwrclk")]
impl OtgFsPwrclk {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x5000_0e00;
}
#[doc = "USB on the go full speed"]
#[cfg(feature = "otg_fs_pwrclk")]
pub mod otg_fs_pwrclk;
#[doc = "Controller area network"]
#[cfg(feature = "can1")]
pub struct Can1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "can1")]
unsafe impl Send for Can1 {}
#[cfg(feature = "can1")]
impl Can1 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_6400;
}
#[doc = "Controller area network"]
#[cfg(feature = "can1")]
pub mod can1;
#[doc = "Controller area network"]
#[cfg(feature = "can2")]
pub struct Can2 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "can2")]
unsafe impl Send for Can2 {}
#[cfg(feature = "can2")]
impl Can2 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4000_6800;
}
#[doc = "Controller area network"]
#[cfg(feature = "can2")]
pub use self::can1 as can2;
#[doc = "FLASH"]
#[cfg(feature = "flash")]
pub struct Flash {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "flash")]
unsafe impl Send for Flash {}
#[cfg(feature = "flash")]
impl Flash {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4002_3c00;
}
#[doc = "FLASH"]
#[cfg(feature = "flash")]
pub mod flash;
#[doc = "External interrupt/event controller"]
#[cfg(feature = "exti")]
pub struct Exti {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "exti")]
unsafe impl Send for Exti {}
#[cfg(feature = "exti")]
impl Exti {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_3c00;
}
#[doc = "External interrupt/event controller"]
#[cfg(feature = "exti")]
pub mod exti;
#[doc = "USB on the go high speed"]
#[cfg(feature = "otg_hs_global")]
pub struct OtgHsGlobal {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "otg_hs_global")]
unsafe impl Send for OtgHsGlobal {}
#[cfg(feature = "otg_hs_global")]
impl OtgHsGlobal {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4004_0000;
}
#[doc = "USB on the go high speed"]
#[cfg(feature = "otg_hs_global")]
pub mod otg_hs_global;
#[doc = "USB on the go high speed"]
#[cfg(feature = "otg_hs_host")]
pub struct OtgHsHost {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "otg_hs_host")]
unsafe impl Send for OtgHsHost {}
#[cfg(feature = "otg_hs_host")]
impl OtgHsHost {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4004_0400;
}
#[doc = "USB on the go high speed"]
#[cfg(feature = "otg_hs_host")]
pub mod otg_hs_host;
#[doc = "USB on the go high speed"]
#[cfg(feature = "otg_hs_device")]
pub struct OtgHsDevice {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "otg_hs_device")]
unsafe impl Send for OtgHsDevice {}
#[cfg(feature = "otg_hs_device")]
impl OtgHsDevice {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4004_0800;
}
#[doc = "USB on the go high speed"]
#[cfg(feature = "otg_hs_device")]
pub mod otg_hs_device;
#[doc = "USB on the go high speed"]
#[cfg(feature = "otg_hs_pwrclk")]
pub struct OtgHsPwrclk {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "otg_hs_pwrclk")]
unsafe impl Send for OtgHsPwrclk {}
#[cfg(feature = "otg_hs_pwrclk")]
impl OtgHsPwrclk {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4004_0e00;
}
#[doc = "USB on the go high speed"]
#[cfg(feature = "otg_hs_pwrclk")]
pub mod otg_hs_pwrclk;
#[doc = "Nested Vectored Interrupt Controller"]
#[cfg(feature = "nvic")]
pub struct Nvic {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "nvic")]
unsafe impl Send for Nvic {}
#[cfg(feature = "nvic")]
impl Nvic {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0xe000_e100;
}
#[doc = "Nested Vectored Interrupt Controller"]
#[cfg(feature = "nvic")]
pub mod nvic;
#[doc = "Serial audio interface"]
#[cfg(feature = "sai1")]
pub struct Sai1 {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "sai1")]
unsafe impl Send for Sai1 {}
#[cfg(feature = "sai1")]
impl Sai1 {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_5800;
}
#[doc = "Serial audio interface"]
#[cfg(feature = "sai1")]
pub mod sai1;
#[doc = "LCD-TFT Controller"]
#[cfg(feature = "ltdc")]
pub struct Ltdc {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "ltdc")]
unsafe impl Send for Ltdc {}
#[cfg(feature = "ltdc")]
impl Ltdc {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x4001_6800;
}
#[doc = "LCD-TFT Controller"]
#[cfg(feature = "ltdc")]
pub mod ltdc;
#[doc = "Hash processor"]
#[cfg(feature = "hash")]
pub struct Hash {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "hash")]
unsafe impl Send for Hash {}
#[cfg(feature = "hash")]
impl Hash {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x5006_0400;
}
#[doc = "Hash processor"]
#[cfg(feature = "hash")]
pub mod hash;
#[doc = "Cryptographic processor"]
#[cfg(feature = "cryp")]
pub struct Cryp {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "cryp")]
unsafe impl Send for Cryp {}
#[cfg(feature = "cryp")]
impl Cryp {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0x5006_0000;
}
#[doc = "Cryptographic processor"]
#[cfg(feature = "cryp")]
pub mod cryp;
#[doc = "Floting point unit"]
#[cfg(feature = "fpu")]
pub struct Fpu {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "fpu")]
unsafe impl Send for Fpu {}
#[cfg(feature = "fpu")]
impl Fpu {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0xe000_ef34;
}
#[doc = "Floting point unit"]
#[cfg(feature = "fpu")]
pub mod fpu;
#[doc = "Memory protection unit"]
#[cfg(feature = "mpu")]
pub struct Mpu {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "mpu")]
unsafe impl Send for Mpu {}
#[cfg(feature = "mpu")]
impl Mpu {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0xe000_ed90;
}
#[doc = "Memory protection unit"]
#[cfg(feature = "mpu")]
pub mod mpu;
#[doc = "SysTick timer"]
#[cfg(feature = "stk")]
pub struct Stk {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "stk")]
unsafe impl Send for Stk {}
#[cfg(feature = "stk")]
impl Stk {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0xe000_e010;
}
#[doc = "SysTick timer"]
#[cfg(feature = "stk")]
pub mod stk;
#[doc = "System control block"]
#[cfg(feature = "scb")]
pub struct Scb {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "scb")]
unsafe impl Send for Scb {}
#[cfg(feature = "scb")]
impl Scb {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0xe000_ed00;
}
#[doc = "System control block"]
#[cfg(feature = "scb")]
pub mod scb;
#[doc = "Nested vectored interrupt controller"]
#[cfg(feature = "nvic_stir")]
pub struct NvicStir {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "nvic_stir")]
unsafe impl Send for NvicStir {}
#[cfg(feature = "nvic_stir")]
impl NvicStir {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0xe000_ef00;
}
#[doc = "Nested vectored interrupt controller"]
#[cfg(feature = "nvic_stir")]
pub mod nvic_stir;
#[doc = "Floating point unit CPACR"]
#[cfg(feature = "fpu_cpacr")]
pub struct FpuCpacr {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "fpu_cpacr")]
unsafe impl Send for FpuCpacr {}
#[cfg(feature = "fpu_cpacr")]
impl FpuCpacr {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0xe000_ed88;
}
#[doc = "Floating point unit CPACR"]
#[cfg(feature = "fpu_cpacr")]
pub mod fpu_cpacr;
#[doc = "System control block ACTLR"]
#[cfg(feature = "scb_actrl")]
pub struct ScbActrl {
    _marker: PhantomData<*const ()>,
}
#[cfg(feature = "scb_actrl")]
unsafe impl Send for ScbActrl {}
#[cfg(feature = "scb_actrl")]
impl ScbActrl {
    #[doc = r"Pointer to the register block"]
    pub const BASE: u32 = 0xe000_e008;
}
#[doc = "System control block ACTLR"]
#[cfg(feature = "scb_actrl")]
pub mod scb_actrl;
