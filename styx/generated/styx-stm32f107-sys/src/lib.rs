// BSD 2-Clause License
//
// Copyright (c) 2024, Styx Emulator Project
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//! automatically generated by rust-bindgen 0.66.1
//! using command
//! `bindgen --ignore-functions --c-naming --sort-semantically --merge-extern-blocks`
#![doc(hidden)]
#![allow(
    dead_code,
    non_upper_case_globals,
    non_camel_case_types,
    non_snake_case,
    unused_imports,
    clippy::useless_transmute,
    clippy::too_many_arguments
)]

#[doc = " @brief STM32F10x Interrupt Number Definition, according to the selected device\n        in @ref Library_configuration_section"]
pub type enum_IRQn = ::std::os::raw::c_int;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
pub type __fsid_t = struct___fsid_t;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[doc = " @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC\nmemory mapped structure for Nested Vectored Interrupt Controller (NVIC)\n@{"]
pub type NVIC_Type = struct_NVIC_Type;
#[doc = " @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB\nmemory mapped structure for System Control Block (SCB)\n@{"]
pub type SCB_Type = struct_SCB_Type;
#[doc = " @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick\nmemory mapped structure for SysTick\n@{"]
pub type SysTick_Type = struct_SysTick_Type;
#[doc = " @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM\nmemory mapped structure for Instrumentation Trace Macrocell (ITM)\n@{"]
pub type ITM_Type = struct_ITM_Type;
#[doc = " @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type\nmemory mapped structure for Interrupt Type\n@{"]
pub type InterruptType_Type = struct_InterruptType_Type;
#[doc = " @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug\nmemory mapped structure for Core Debug Register\n@{"]
pub type CoreDebug_Type = struct_CoreDebug_Type;
pub type s32 = i32;
pub type s16 = i16;
pub type s8 = i8;
pub type sc32 = i32;
pub type sc16 = i16;
pub type sc8 = i8;
pub type vs32 = i32;
pub type vs16 = i16;
pub type vs8 = i8;
pub type vsc32 = i32;
pub type vsc16 = i16;
pub type vsc8 = i8;
pub type u32_ = u32;
pub type u16_ = u16;
pub type u8_ = u8;
pub type uc32 = u32;
pub type uc16 = u16;
pub type uc8 = u8;
pub type vu32 = u32;
pub type vu16 = u16;
pub type vu8 = u8;
pub type vuc32 = u32;
pub type vuc16 = u16;
pub type vuc8 = u8;
pub type enum_FlagStatus = ::std::os::raw::c_uint;
pub type enum_FunctionalState = ::std::os::raw::c_uint;
pub type enum_ErrorStatus = ::std::os::raw::c_uint;
#[doc = " @brief Analog to Digital Converter"]
pub type ADC_TypeDef = struct_ADC_TypeDef;
#[doc = " @brief Backup Registers"]
pub type BKP_TypeDef = struct_BKP_TypeDef;
#[doc = " @brief Controller Area Network TxMailBox"]
pub type CAN_TxMailBox_TypeDef = struct_CAN_TxMailBox_TypeDef;
#[doc = " @brief Controller Area Network FIFOMailBox"]
pub type CAN_FIFOMailBox_TypeDef = struct_CAN_FIFOMailBox_TypeDef;
#[doc = " @brief Controller Area Network FilterRegister"]
pub type CAN_FilterRegister_TypeDef = struct_CAN_FilterRegister_TypeDef;
#[doc = " @brief Controller Area Network"]
pub type CAN_TypeDef = struct_CAN_TypeDef;
#[doc = " @brief Consumer Electronics Control (CEC)"]
pub type CEC_TypeDef = struct_CEC_TypeDef;
#[doc = " @brief CRC calculation unit"]
pub type CRC_TypeDef = struct_CRC_TypeDef;
#[doc = " @brief Digital to Analog Converter"]
pub type DAC_TypeDef = struct_DAC_TypeDef;
#[doc = " @brief Debug MCU"]
pub type DBGMCU_TypeDef = struct_DBGMCU_TypeDef;
#[doc = " @brief DMA Controller"]
pub type DMA_Channel_TypeDef = struct_DMA_Channel_TypeDef;
pub type DMA_TypeDef = struct_DMA_TypeDef;
#[doc = " @brief Ethernet MAC"]
pub type ETH_TypeDef = struct_ETH_TypeDef;
#[doc = " @brief External Interrupt/Event Controller"]
pub type EXTI_TypeDef = struct_EXTI_TypeDef;
#[doc = " @brief FLASH Registers"]
pub type FLASH_TypeDef = struct_FLASH_TypeDef;
#[doc = " @brief Option Bytes Registers"]
pub type OB_TypeDef = struct_OB_TypeDef;
#[doc = " @brief Flexible Static Memory Controller"]
pub type FSMC_Bank1_TypeDef = struct_FSMC_Bank1_TypeDef;
#[doc = " @brief Flexible Static Memory Controller Bank1E"]
pub type FSMC_Bank1E_TypeDef = struct_FSMC_Bank1E_TypeDef;
#[doc = " @brief Flexible Static Memory Controller Bank2"]
pub type FSMC_Bank2_TypeDef = struct_FSMC_Bank2_TypeDef;
#[doc = " @brief Flexible Static Memory Controller Bank3"]
pub type FSMC_Bank3_TypeDef = struct_FSMC_Bank3_TypeDef;
#[doc = " @brief Flexible Static Memory Controller Bank4"]
pub type FSMC_Bank4_TypeDef = struct_FSMC_Bank4_TypeDef;
#[doc = " @brief General Purpose I/O"]
pub type GPIO_TypeDef = struct_GPIO_TypeDef;
#[doc = " @brief Alternate Function I/O"]
pub type AFIO_TypeDef = struct_AFIO_TypeDef;
#[doc = " @brief Inter Integrated Circuit Interface"]
pub type I2C_TypeDef = struct_I2C_TypeDef;
#[doc = " @brief Independent WATCHDOG"]
pub type IWDG_TypeDef = struct_IWDG_TypeDef;
#[doc = " @brief Power Control"]
pub type PWR_TypeDef = struct_PWR_TypeDef;
#[doc = " @brief Reset and Clock Control"]
pub type RCC_TypeDef = struct_RCC_TypeDef;
#[doc = " @brief Real-Time Clock"]
pub type RTC_TypeDef = struct_RTC_TypeDef;
#[doc = " @brief SD host Interface"]
pub type SDIO_TypeDef = struct_SDIO_TypeDef;
#[doc = " @brief Serial Peripheral Interface"]
pub type SPI_TypeDef = struct_SPI_TypeDef;
#[doc = " @brief TIM"]
pub type TIM_TypeDef = struct_TIM_TypeDef;
#[doc = " @brief Universal Synchronous Asynchronous Receiver Transmitter"]
pub type USART_TypeDef = struct_USART_TypeDef;
#[doc = " @brief Window WATCHDOG"]
pub type WWDG_TypeDef = struct_WWDG_TypeDef;
#[doc = " @brief  USART Init Structure definition"]
pub type USART_InitTypeDef = struct_USART_InitTypeDef;
#[doc = " @brief  USART Clock Init Structure definition"]
pub type USART_ClockInitTypeDef = struct_USART_ClockInitTypeDef;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct___fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[doc = " @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC\nmemory mapped structure for Nested Vectored Interrupt Controller (NVIC)\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_NVIC_Type {
    #[doc = "< Offset: 0x000  Interrupt Set Enable Register"]
    pub ISER: [u32; 8usize],
    pub RESERVED0: [u32; 24usize],
    #[doc = "< Offset: 0x080  Interrupt Clear Enable Register"]
    pub ICER: [u32; 8usize],
    pub RSERVED1: [u32; 24usize],
    #[doc = "< Offset: 0x100  Interrupt Set Pending Register"]
    pub ISPR: [u32; 8usize],
    pub RESERVED2: [u32; 24usize],
    #[doc = "< Offset: 0x180  Interrupt Clear Pending Register"]
    pub ICPR: [u32; 8usize],
    pub RESERVED3: [u32; 24usize],
    #[doc = "< Offset: 0x200  Interrupt Active bit Register"]
    pub IABR: [u32; 8usize],
    pub RESERVED4: [u32; 56usize],
    #[doc = "< Offset: 0x300  Interrupt Priority Register (8Bit wide)"]
    pub IP: [u8; 240usize],
    pub RESERVED5: [u32; 644usize],
    #[doc = "< Offset: 0xE00  Software Trigger Interrupt Register"]
    pub STIR: u32,
}
#[doc = " @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB\nmemory mapped structure for System Control Block (SCB)\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_SCB_Type {
    #[doc = "< Offset: 0x00  CPU ID Base Register"]
    pub CPUID: u32,
    #[doc = "< Offset: 0x04  Interrupt Control State Register"]
    pub ICSR: u32,
    #[doc = "< Offset: 0x08  Vector Table Offset Register"]
    pub VTOR: u32,
    #[doc = "< Offset: 0x0C  Application Interrupt / Reset Control Register"]
    pub AIRCR: u32,
    #[doc = "< Offset: 0x10  System Control Register"]
    pub SCR: u32,
    #[doc = "< Offset: 0x14  Configuration Control Register"]
    pub CCR: u32,
    #[doc = "< Offset: 0x18  System Handlers Priority Registers (4-7, 8-11, 12-15)"]
    pub SHP: [u8; 12usize],
    #[doc = "< Offset: 0x24  System Handler Control and State Register"]
    pub SHCSR: u32,
    #[doc = "< Offset: 0x28  Configurable Fault Status Register"]
    pub CFSR: u32,
    #[doc = "< Offset: 0x2C  Hard Fault Status Register"]
    pub HFSR: u32,
    #[doc = "< Offset: 0x30  Debug Fault Status Register"]
    pub DFSR: u32,
    #[doc = "< Offset: 0x34  Mem Manage Address Register"]
    pub MMFAR: u32,
    #[doc = "< Offset: 0x38  Bus Fault Address Register"]
    pub BFAR: u32,
    #[doc = "< Offset: 0x3C  Auxiliary Fault Status Register"]
    pub AFSR: u32,
    #[doc = "< Offset: 0x40  Processor Feature Register"]
    pub PFR: [u32; 2usize],
    #[doc = "< Offset: 0x48  Debug Feature Register"]
    pub DFR: u32,
    #[doc = "< Offset: 0x4C  Auxiliary Feature Register"]
    pub ADR: u32,
    #[doc = "< Offset: 0x50  Memory Model Feature Register"]
    pub MMFR: [u32; 4usize],
    #[doc = "< Offset: 0x60  ISA Feature Register"]
    pub ISAR: [u32; 5usize],
}
#[doc = " @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick\nmemory mapped structure for SysTick\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_SysTick_Type {
    #[doc = "< Offset: 0x00  SysTick Control and Status Register"]
    pub CTRL: u32,
    #[doc = "< Offset: 0x04  SysTick Reload Value Register"]
    pub LOAD: u32,
    #[doc = "< Offset: 0x08  SysTick Current Value Register"]
    pub VAL: u32,
    #[doc = "< Offset: 0x0C  SysTick Calibration Register"]
    pub CALIB: u32,
}
#[doc = " @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM\nmemory mapped structure for Instrumentation Trace Macrocell (ITM)\n@{"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct struct_ITM_Type {
    #[doc = "< Offset: 0x00  ITM Stimulus Port Registers"]
    pub PORT: [union_ITM_Type__bindgen_ty_1; 32usize],
    pub RESERVED0: [u32; 864usize],
    #[doc = "< Offset:       ITM Trace Enable Register"]
    pub TER: u32,
    pub RESERVED1: [u32; 15usize],
    #[doc = "< Offset:       ITM Trace Privilege Register"]
    pub TPR: u32,
    pub RESERVED2: [u32; 15usize],
    #[doc = "< Offset:       ITM Trace Control Register"]
    pub TCR: u32,
    pub RESERVED3: [u32; 29usize],
    #[doc = "< Offset:       ITM Integration Write Register"]
    pub IWR: u32,
    #[doc = "< Offset:       ITM Integration Read Register"]
    pub IRR: u32,
    #[doc = "< Offset:       ITM Integration Mode Control Register"]
    pub IMCR: u32,
    pub RESERVED4: [u32; 43usize],
    #[doc = "< Offset:       ITM Lock Access Register"]
    pub LAR: u32,
    #[doc = "< Offset:       ITM Lock Status Register"]
    pub LSR: u32,
    pub RESERVED5: [u32; 6usize],
    #[doc = "< Offset:       ITM Peripheral Identification Register #4"]
    pub PID4: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #5"]
    pub PID5: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #6"]
    pub PID6: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #7"]
    pub PID7: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #0"]
    pub PID0: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #1"]
    pub PID1: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #2"]
    pub PID2: u32,
    #[doc = "< Offset:       ITM Peripheral Identification Register #3"]
    pub PID3: u32,
    #[doc = "< Offset:       ITM Component  Identification Register #0"]
    pub CID0: u32,
    #[doc = "< Offset:       ITM Component  Identification Register #1"]
    pub CID1: u32,
    #[doc = "< Offset:       ITM Component  Identification Register #2"]
    pub CID2: u32,
    #[doc = "< Offset:       ITM Component  Identification Register #3"]
    pub CID3: u32,
}
#[doc = " @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type\nmemory mapped structure for Interrupt Type\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_InterruptType_Type {
    pub RESERVED0: u32,
    #[doc = "< Offset: 0x04  Interrupt Control Type Register"]
    pub ICTR: u32,
    pub RESERVED1: u32,
}
#[doc = " @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug\nmemory mapped structure for Core Debug Register\n@{"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CoreDebug_Type {
    #[doc = "< Offset: 0x00  Debug Halting Control and Status Register"]
    pub DHCSR: u32,
    #[doc = "< Offset: 0x04  Debug Core Register Selector Register"]
    pub DCRSR: u32,
    #[doc = "< Offset: 0x08  Debug Core Register Data Register"]
    pub DCRDR: u32,
    #[doc = "< Offset: 0x0C  Debug Exception and Monitor Control Register"]
    pub DEMCR: u32,
}
#[doc = " @brief Analog to Digital Converter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_ADC_TypeDef {
    pub SR: u32,
    pub CR1: u32,
    pub CR2: u32,
    pub SMPR1: u32,
    pub SMPR2: u32,
    pub JOFR1: u32,
    pub JOFR2: u32,
    pub JOFR3: u32,
    pub JOFR4: u32,
    pub HTR: u32,
    pub LTR: u32,
    pub SQR1: u32,
    pub SQR2: u32,
    pub SQR3: u32,
    pub JSQR: u32,
    pub JDR1: u32,
    pub JDR2: u32,
    pub JDR3: u32,
    pub JDR4: u32,
    pub DR: u32,
}
#[doc = " @brief Backup Registers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_BKP_TypeDef {
    pub RESERVED0: u32,
    pub DR1: u16,
    pub RESERVED1: u16,
    pub DR2: u16,
    pub RESERVED2: u16,
    pub DR3: u16,
    pub RESERVED3: u16,
    pub DR4: u16,
    pub RESERVED4: u16,
    pub DR5: u16,
    pub RESERVED5: u16,
    pub DR6: u16,
    pub RESERVED6: u16,
    pub DR7: u16,
    pub RESERVED7: u16,
    pub DR8: u16,
    pub RESERVED8: u16,
    pub DR9: u16,
    pub RESERVED9: u16,
    pub DR10: u16,
    pub RESERVED10: u16,
    pub RTCCR: u16,
    pub RESERVED11: u16,
    pub CR: u16,
    pub RESERVED12: u16,
    pub CSR: u16,
    pub RESERVED13: [u16; 5usize],
    pub DR11: u16,
    pub RESERVED14: u16,
    pub DR12: u16,
    pub RESERVED15: u16,
    pub DR13: u16,
    pub RESERVED16: u16,
    pub DR14: u16,
    pub RESERVED17: u16,
    pub DR15: u16,
    pub RESERVED18: u16,
    pub DR16: u16,
    pub RESERVED19: u16,
    pub DR17: u16,
    pub RESERVED20: u16,
    pub DR18: u16,
    pub RESERVED21: u16,
    pub DR19: u16,
    pub RESERVED22: u16,
    pub DR20: u16,
    pub RESERVED23: u16,
    pub DR21: u16,
    pub RESERVED24: u16,
    pub DR22: u16,
    pub RESERVED25: u16,
    pub DR23: u16,
    pub RESERVED26: u16,
    pub DR24: u16,
    pub RESERVED27: u16,
    pub DR25: u16,
    pub RESERVED28: u16,
    pub DR26: u16,
    pub RESERVED29: u16,
    pub DR27: u16,
    pub RESERVED30: u16,
    pub DR28: u16,
    pub RESERVED31: u16,
    pub DR29: u16,
    pub RESERVED32: u16,
    pub DR30: u16,
    pub RESERVED33: u16,
    pub DR31: u16,
    pub RESERVED34: u16,
    pub DR32: u16,
    pub RESERVED35: u16,
    pub DR33: u16,
    pub RESERVED36: u16,
    pub DR34: u16,
    pub RESERVED37: u16,
    pub DR35: u16,
    pub RESERVED38: u16,
    pub DR36: u16,
    pub RESERVED39: u16,
    pub DR37: u16,
    pub RESERVED40: u16,
    pub DR38: u16,
    pub RESERVED41: u16,
    pub DR39: u16,
    pub RESERVED42: u16,
    pub DR40: u16,
    pub RESERVED43: u16,
    pub DR41: u16,
    pub RESERVED44: u16,
    pub DR42: u16,
    pub RESERVED45: u16,
}
#[doc = " @brief Controller Area Network TxMailBox"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CAN_TxMailBox_TypeDef {
    pub TIR: u32,
    pub TDTR: u32,
    pub TDLR: u32,
    pub TDHR: u32,
}
#[doc = " @brief Controller Area Network FIFOMailBox"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CAN_FIFOMailBox_TypeDef {
    pub RIR: u32,
    pub RDTR: u32,
    pub RDLR: u32,
    pub RDHR: u32,
}
#[doc = " @brief Controller Area Network FilterRegister"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CAN_FilterRegister_TypeDef {
    pub FR1: u32,
    pub FR2: u32,
}
#[doc = " @brief Controller Area Network"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CAN_TypeDef {
    pub MCR: u32,
    pub MSR: u32,
    pub TSR: u32,
    pub RF0R: u32,
    pub RF1R: u32,
    pub IER: u32,
    pub ESR: u32,
    pub BTR: u32,
    pub RESERVED0: [u32; 88usize],
    pub sTxMailBox: [CAN_TxMailBox_TypeDef; 3usize],
    pub sFIFOMailBox: [CAN_FIFOMailBox_TypeDef; 2usize],
    pub RESERVED1: [u32; 12usize],
    pub FMR: u32,
    pub FM1R: u32,
    pub RESERVED2: u32,
    pub FS1R: u32,
    pub RESERVED3: u32,
    pub FFA1R: u32,
    pub RESERVED4: u32,
    pub FA1R: u32,
    pub RESERVED5: [u32; 8usize],
    pub sFilterRegister: [CAN_FilterRegister_TypeDef; 14usize],
}
#[doc = " @brief Consumer Electronics Control (CEC)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CEC_TypeDef {
    pub CFGR: u32,
    pub OAR: u32,
    pub PRES: u32,
    pub ESR: u32,
    pub CSR: u32,
    pub TXD: u32,
    pub RXD: u32,
}
#[doc = " @brief CRC calculation unit"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_CRC_TypeDef {
    pub DR: u32,
    pub IDR: u8,
    pub RESERVED0: u8,
    pub RESERVED1: u16,
    pub CR: u32,
}
#[doc = " @brief Digital to Analog Converter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_DAC_TypeDef {
    pub CR: u32,
    pub SWTRIGR: u32,
    pub DHR12R1: u32,
    pub DHR12L1: u32,
    pub DHR8R1: u32,
    pub DHR12R2: u32,
    pub DHR12L2: u32,
    pub DHR8R2: u32,
    pub DHR12RD: u32,
    pub DHR12LD: u32,
    pub DHR8RD: u32,
    pub DOR1: u32,
    pub DOR2: u32,
}
#[doc = " @brief Debug MCU"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_DBGMCU_TypeDef {
    pub IDCODE: u32,
    pub CR: u32,
}
#[doc = " @brief DMA Controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_DMA_Channel_TypeDef {
    pub CCR: u32,
    pub CNDTR: u32,
    pub CPAR: u32,
    pub CMAR: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_DMA_TypeDef {
    pub ISR: u32,
    pub IFCR: u32,
}
#[doc = " @brief Ethernet MAC"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_ETH_TypeDef {
    pub MACCR: u32,
    pub MACFFR: u32,
    pub MACHTHR: u32,
    pub MACHTLR: u32,
    pub MACMIIAR: u32,
    pub MACMIIDR: u32,
    pub MACFCR: u32,
    pub MACVLANTR: u32,
    pub RESERVED0: [u32; 2usize],
    pub MACRWUFFR: u32,
    pub MACPMTCSR: u32,
    pub RESERVED1: [u32; 2usize],
    pub MACSR: u32,
    pub MACIMR: u32,
    pub MACA0HR: u32,
    pub MACA0LR: u32,
    pub MACA1HR: u32,
    pub MACA1LR: u32,
    pub MACA2HR: u32,
    pub MACA2LR: u32,
    pub MACA3HR: u32,
    pub MACA3LR: u32,
    pub RESERVED2: [u32; 40usize],
    pub MMCCR: u32,
    pub MMCRIR: u32,
    pub MMCTIR: u32,
    pub MMCRIMR: u32,
    pub MMCTIMR: u32,
    pub RESERVED3: [u32; 14usize],
    pub MMCTGFSCCR: u32,
    pub MMCTGFMSCCR: u32,
    pub RESERVED4: [u32; 5usize],
    pub MMCTGFCR: u32,
    pub RESERVED5: [u32; 10usize],
    pub MMCRFCECR: u32,
    pub MMCRFAECR: u32,
    pub RESERVED6: [u32; 10usize],
    pub MMCRGUFCR: u32,
    pub RESERVED7: [u32; 334usize],
    pub PTPTSCR: u32,
    pub PTPSSIR: u32,
    pub PTPTSHR: u32,
    pub PTPTSLR: u32,
    pub PTPTSHUR: u32,
    pub PTPTSLUR: u32,
    pub PTPTSAR: u32,
    pub PTPTTHR: u32,
    pub PTPTTLR: u32,
    pub RESERVED8: [u32; 567usize],
    pub DMABMR: u32,
    pub DMATPDR: u32,
    pub DMARPDR: u32,
    pub DMARDLAR: u32,
    pub DMATDLAR: u32,
    pub DMASR: u32,
    pub DMAOMR: u32,
    pub DMAIER: u32,
    pub DMAMFBOCR: u32,
    pub RESERVED9: [u32; 9usize],
    pub DMACHTDR: u32,
    pub DMACHRDR: u32,
    pub DMACHTBAR: u32,
    pub DMACHRBAR: u32,
}
#[doc = " @brief External Interrupt/Event Controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_EXTI_TypeDef {
    pub IMR: u32,
    pub EMR: u32,
    pub RTSR: u32,
    pub FTSR: u32,
    pub SWIER: u32,
    pub PR: u32,
}
#[doc = " @brief FLASH Registers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_FLASH_TypeDef {
    pub ACR: u32,
    pub KEYR: u32,
    pub OPTKEYR: u32,
    pub SR: u32,
    pub CR: u32,
    pub AR: u32,
    pub RESERVED: u32,
    pub OBR: u32,
    pub WRPR: u32,
}
#[doc = " @brief Option Bytes Registers"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_OB_TypeDef {
    pub RDP: u16,
    pub USER: u16,
    pub Data0: u16,
    pub Data1: u16,
    pub WRP0: u16,
    pub WRP1: u16,
    pub WRP2: u16,
    pub WRP3: u16,
}
#[doc = " @brief Flexible Static Memory Controller"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_FSMC_Bank1_TypeDef {
    pub BTCR: [u32; 8usize],
}
#[doc = " @brief Flexible Static Memory Controller Bank1E"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_FSMC_Bank1E_TypeDef {
    pub BWTR: [u32; 7usize],
}
#[doc = " @brief Flexible Static Memory Controller Bank2"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_FSMC_Bank2_TypeDef {
    pub PCR2: u32,
    pub SR2: u32,
    pub PMEM2: u32,
    pub PATT2: u32,
    pub RESERVED0: u32,
    pub ECCR2: u32,
}
#[doc = " @brief Flexible Static Memory Controller Bank3"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_FSMC_Bank3_TypeDef {
    pub PCR3: u32,
    pub SR3: u32,
    pub PMEM3: u32,
    pub PATT3: u32,
    pub RESERVED0: u32,
    pub ECCR3: u32,
}
#[doc = " @brief Flexible Static Memory Controller Bank4"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_FSMC_Bank4_TypeDef {
    pub PCR4: u32,
    pub SR4: u32,
    pub PMEM4: u32,
    pub PATT4: u32,
    pub PIO4: u32,
}
#[doc = " @brief General Purpose I/O"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_GPIO_TypeDef {
    pub CRL: u32,
    pub CRH: u32,
    pub IDR: u32,
    pub ODR: u32,
    pub BSRR: u32,
    pub BRR: u32,
    pub LCKR: u32,
}
#[doc = " @brief Alternate Function I/O"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_AFIO_TypeDef {
    pub EVCR: u32,
    pub MAPR: u32,
    pub EXTICR: [u32; 4usize],
    pub RESERVED0: u32,
    pub MAPR2: u32,
}
#[doc = " @brief Inter Integrated Circuit Interface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_I2C_TypeDef {
    pub CR1: u16,
    pub RESERVED0: u16,
    pub CR2: u16,
    pub RESERVED1: u16,
    pub OAR1: u16,
    pub RESERVED2: u16,
    pub OAR2: u16,
    pub RESERVED3: u16,
    pub DR: u16,
    pub RESERVED4: u16,
    pub SR1: u16,
    pub RESERVED5: u16,
    pub SR2: u16,
    pub RESERVED6: u16,
    pub CCR: u16,
    pub RESERVED7: u16,
    pub TRISE: u16,
    pub RESERVED8: u16,
}
#[doc = " @brief Independent WATCHDOG"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_IWDG_TypeDef {
    pub KR: u32,
    pub PR: u32,
    pub RLR: u32,
    pub SR: u32,
}
#[doc = " @brief Power Control"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_PWR_TypeDef {
    pub CR: u32,
    pub CSR: u32,
}
#[doc = " @brief Reset and Clock Control"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_RCC_TypeDef {
    pub CR: u32,
    pub CFGR: u32,
    pub CIR: u32,
    pub APB2RSTR: u32,
    pub APB1RSTR: u32,
    pub AHBENR: u32,
    pub APB2ENR: u32,
    pub APB1ENR: u32,
    pub BDCR: u32,
    pub CSR: u32,
}
#[doc = " @brief Real-Time Clock"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_RTC_TypeDef {
    pub CRH: u16,
    pub RESERVED0: u16,
    pub CRL: u16,
    pub RESERVED1: u16,
    pub PRLH: u16,
    pub RESERVED2: u16,
    pub PRLL: u16,
    pub RESERVED3: u16,
    pub DIVH: u16,
    pub RESERVED4: u16,
    pub DIVL: u16,
    pub RESERVED5: u16,
    pub CNTH: u16,
    pub RESERVED6: u16,
    pub CNTL: u16,
    pub RESERVED7: u16,
    pub ALRH: u16,
    pub RESERVED8: u16,
    pub ALRL: u16,
    pub RESERVED9: u16,
}
#[doc = " @brief SD host Interface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_SDIO_TypeDef {
    pub POWER: u32,
    pub CLKCR: u32,
    pub ARG: u32,
    pub CMD: u32,
    pub RESPCMD: u32,
    pub RESP1: u32,
    pub RESP2: u32,
    pub RESP3: u32,
    pub RESP4: u32,
    pub DTIMER: u32,
    pub DLEN: u32,
    pub DCTRL: u32,
    pub DCOUNT: u32,
    pub STA: u32,
    pub ICR: u32,
    pub MASK: u32,
    pub RESERVED0: [u32; 2usize],
    pub FIFOCNT: u32,
    pub RESERVED1: [u32; 13usize],
    pub FIFO: u32,
}
#[doc = " @brief Serial Peripheral Interface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_SPI_TypeDef {
    pub CR1: u16,
    pub RESERVED0: u16,
    pub CR2: u16,
    pub RESERVED1: u16,
    pub SR: u16,
    pub RESERVED2: u16,
    pub DR: u16,
    pub RESERVED3: u16,
    pub CRCPR: u16,
    pub RESERVED4: u16,
    pub RXCRCR: u16,
    pub RESERVED5: u16,
    pub TXCRCR: u16,
    pub RESERVED6: u16,
    pub I2SCFGR: u16,
    pub RESERVED7: u16,
    pub I2SPR: u16,
    pub RESERVED8: u16,
}
#[doc = " @brief TIM"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_TIM_TypeDef {
    pub CR1: u16,
    pub RESERVED0: u16,
    pub CR2: u16,
    pub RESERVED1: u16,
    pub SMCR: u16,
    pub RESERVED2: u16,
    pub DIER: u16,
    pub RESERVED3: u16,
    pub SR: u16,
    pub RESERVED4: u16,
    pub EGR: u16,
    pub RESERVED5: u16,
    pub CCMR1: u16,
    pub RESERVED6: u16,
    pub CCMR2: u16,
    pub RESERVED7: u16,
    pub CCER: u16,
    pub RESERVED8: u16,
    pub CNT: u16,
    pub RESERVED9: u16,
    pub PSC: u16,
    pub RESERVED10: u16,
    pub ARR: u16,
    pub RESERVED11: u16,
    pub RCR: u16,
    pub RESERVED12: u16,
    pub CCR1: u16,
    pub RESERVED13: u16,
    pub CCR2: u16,
    pub RESERVED14: u16,
    pub CCR3: u16,
    pub RESERVED15: u16,
    pub CCR4: u16,
    pub RESERVED16: u16,
    pub BDTR: u16,
    pub RESERVED17: u16,
    pub DCR: u16,
    pub RESERVED18: u16,
    pub DMAR: u16,
    pub RESERVED19: u16,
}
#[doc = " @brief Universal Synchronous Asynchronous Receiver Transmitter"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_USART_TypeDef {
    pub SR: u16,
    pub RESERVED0: u16,
    pub DR: u16,
    pub RESERVED1: u16,
    pub BRR: u16,
    pub RESERVED2: u16,
    pub CR1: u16,
    pub RESERVED3: u16,
    pub CR2: u16,
    pub RESERVED4: u16,
    pub CR3: u16,
    pub RESERVED5: u16,
    pub GTPR: u16,
    pub RESERVED6: u16,
}
#[doc = " @brief Window WATCHDOG"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_WWDG_TypeDef {
    pub CR: u32,
    pub CFR: u32,
    pub SR: u32,
}
#[doc = " @brief  USART Init Structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_USART_InitTypeDef {
    #[doc = "< This member configures the USART communication baud rate.\nThe baud rate is computed using the following formula:\n- IntegerDivider = ((PCLKx) / (16 * (USART_InitStruct->USART_BaudRate)))\n- FractionalDivider = ((IntegerDivider - ((u32) IntegerDivider)) * 16) + 0.5"]
    pub USART_BaudRate: u32,
    #[doc = "< Specifies the number of data bits transmitted or received in a frame.\nThis parameter can be a value of @ref USART_Word_Length"]
    pub USART_WordLength: u16,
    #[doc = "< Specifies the number of stop bits transmitted.\nThis parameter can be a value of @ref USART_Stop_Bits"]
    pub USART_StopBits: u16,
    #[doc = "< Specifies the parity mode.\nThis parameter can be a value of @ref USART_Parity\n@note When parity is enabled, the computed parity is inserted\nat the MSB position of the transmitted data (9th bit when\nthe word length is set to 9 data bits; 8th bit when the\nword length is set to 8 data bits)."]
    pub USART_Parity: u16,
    #[doc = "< Specifies wether the Receive or Transmit mode is enabled or disabled.\nThis parameter can be a value of @ref USART_Mode"]
    pub USART_Mode: u16,
    #[doc = "< Specifies wether the hardware flow control mode is enabled\nor disabled.\nThis parameter can be a value of @ref USART_Hardware_Flow_Control"]
    pub USART_HardwareFlowControl: u16,
}
#[doc = " @brief  USART Clock Init Structure definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct struct_USART_ClockInitTypeDef {
    #[doc = "< Specifies whether the USART clock is enabled or disabled.\nThis parameter can be a value of @ref USART_Clock"]
    pub USART_Clock: u16,
    #[doc = "< Specifies the steady state value of the serial clock.\nThis parameter can be a value of @ref USART_Clock_Polarity"]
    pub USART_CPOL: u16,
    #[doc = "< Specifies the clock transition on which the bit capture is made.\nThis parameter can be a value of @ref USART_Clock_Phase"]
    pub USART_CPHA: u16,
    #[doc = "< Specifies whether the clock pulse corresponding to the last transmitted\ndata bit (MSB) has to be output on the SCLK pin in synchronous mode.\nThis parameter can be a value of @ref USART_Last_Bit"]
    pub USART_LastBit: u16,
}
pub const __STM32F10X_STDPERIPH_VERSION_MAIN: u32 = 3;
pub const __STM32F10X_STDPERIPH_VERSION_SUB1: u32 = 5;
pub const __STM32F10X_STDPERIPH_VERSION_SUB2: u32 = 0;
pub const __STM32F10X_STDPERIPH_VERSION_RC: u32 = 0;
pub const __STM32F10X_STDPERIPH_VERSION: u32 = 50659328;
pub const __MPU_PRESENT: u32 = 0;
pub const __NVIC_PRIO_BITS: u32 = 4;
pub const __Vendor_SysTickConfig: u32 = 0;
pub const __CM3_CMSIS_VERSION_MAIN: u32 = 1;
pub const __CM3_CMSIS_VERSION_SUB: u32 = 48;
pub const __CM3_CMSIS_VERSION: u32 = 65584;
pub const __CORTEX_M: u32 = 3;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SCB_CPUID_IMPLEMENTER_Pos: u32 = 24;
pub const SCB_CPUID_IMPLEMENTER_Msk: u32 = 4278190080;
pub const SCB_CPUID_VARIANT_Pos: u32 = 20;
pub const SCB_CPUID_VARIANT_Msk: u32 = 15728640;
pub const SCB_CPUID_PARTNO_Pos: u32 = 4;
pub const SCB_CPUID_PARTNO_Msk: u32 = 65520;
pub const SCB_CPUID_REVISION_Pos: u32 = 0;
pub const SCB_CPUID_REVISION_Msk: u32 = 15;
pub const SCB_ICSR_NMIPENDSET_Pos: u32 = 31;
pub const SCB_ICSR_NMIPENDSET_Msk: u32 = 2147483648;
pub const SCB_ICSR_PENDSVSET_Pos: u32 = 28;
pub const SCB_ICSR_PENDSVSET_Msk: u32 = 268435456;
pub const SCB_ICSR_PENDSVCLR_Pos: u32 = 27;
pub const SCB_ICSR_PENDSVCLR_Msk: u32 = 134217728;
pub const SCB_ICSR_PENDSTSET_Pos: u32 = 26;
pub const SCB_ICSR_PENDSTSET_Msk: u32 = 67108864;
pub const SCB_ICSR_PENDSTCLR_Pos: u32 = 25;
pub const SCB_ICSR_PENDSTCLR_Msk: u32 = 33554432;
pub const SCB_ICSR_ISRPREEMPT_Pos: u32 = 23;
pub const SCB_ICSR_ISRPREEMPT_Msk: u32 = 8388608;
pub const SCB_ICSR_ISRPENDING_Pos: u32 = 22;
pub const SCB_ICSR_ISRPENDING_Msk: u32 = 4194304;
pub const SCB_ICSR_VECTPENDING_Pos: u32 = 12;
pub const SCB_ICSR_VECTPENDING_Msk: u32 = 2093056;
pub const SCB_ICSR_RETTOBASE_Pos: u32 = 11;
pub const SCB_ICSR_RETTOBASE_Msk: u32 = 2048;
pub const SCB_ICSR_VECTACTIVE_Pos: u32 = 0;
pub const SCB_ICSR_VECTACTIVE_Msk: u32 = 511;
pub const SCB_VTOR_TBLBASE_Pos: u32 = 29;
pub const SCB_VTOR_TBLBASE_Msk: u64 = 274341036032;
pub const SCB_VTOR_TBLOFF_Pos: u32 = 7;
pub const SCB_VTOR_TBLOFF_Msk: u32 = 536870784;
pub const SCB_AIRCR_VECTKEY_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEY_Msk: u32 = 4294901760;
pub const SCB_AIRCR_VECTKEYSTAT_Pos: u32 = 16;
pub const SCB_AIRCR_VECTKEYSTAT_Msk: u32 = 4294901760;
pub const SCB_AIRCR_ENDIANESS_Pos: u32 = 15;
pub const SCB_AIRCR_ENDIANESS_Msk: u32 = 32768;
pub const SCB_AIRCR_PRIGROUP_Pos: u32 = 8;
pub const SCB_AIRCR_PRIGROUP_Msk: u32 = 1792;
pub const SCB_AIRCR_SYSRESETREQ_Pos: u32 = 2;
pub const SCB_AIRCR_SYSRESETREQ_Msk: u32 = 4;
pub const SCB_AIRCR_VECTCLRACTIVE_Pos: u32 = 1;
pub const SCB_AIRCR_VECTCLRACTIVE_Msk: u32 = 2;
pub const SCB_AIRCR_VECTRESET_Pos: u32 = 0;
pub const SCB_AIRCR_VECTRESET_Msk: u32 = 1;
pub const SCB_SCR_SEVONPEND_Pos: u32 = 4;
pub const SCB_SCR_SEVONPEND_Msk: u32 = 16;
pub const SCB_SCR_SLEEPDEEP_Pos: u32 = 2;
pub const SCB_SCR_SLEEPDEEP_Msk: u32 = 4;
pub const SCB_SCR_SLEEPONEXIT_Pos: u32 = 1;
pub const SCB_SCR_SLEEPONEXIT_Msk: u32 = 2;
pub const SCB_CCR_STKALIGN_Pos: u32 = 9;
pub const SCB_CCR_STKALIGN_Msk: u32 = 512;
pub const SCB_CCR_BFHFNMIGN_Pos: u32 = 8;
pub const SCB_CCR_BFHFNMIGN_Msk: u32 = 256;
pub const SCB_CCR_DIV_0_TRP_Pos: u32 = 4;
pub const SCB_CCR_DIV_0_TRP_Msk: u32 = 16;
pub const SCB_CCR_UNALIGN_TRP_Pos: u32 = 3;
pub const SCB_CCR_UNALIGN_TRP_Msk: u32 = 8;
pub const SCB_CCR_USERSETMPEND_Pos: u32 = 1;
pub const SCB_CCR_USERSETMPEND_Msk: u32 = 2;
pub const SCB_CCR_NONBASETHRDENA_Pos: u32 = 0;
pub const SCB_CCR_NONBASETHRDENA_Msk: u32 = 1;
pub const SCB_SHCSR_USGFAULTENA_Pos: u32 = 18;
pub const SCB_SHCSR_USGFAULTENA_Msk: u32 = 262144;
pub const SCB_SHCSR_BUSFAULTENA_Pos: u32 = 17;
pub const SCB_SHCSR_BUSFAULTENA_Msk: u32 = 131072;
pub const SCB_SHCSR_MEMFAULTENA_Pos: u32 = 16;
pub const SCB_SHCSR_MEMFAULTENA_Msk: u32 = 65536;
pub const SCB_SHCSR_SVCALLPENDED_Pos: u32 = 15;
pub const SCB_SHCSR_SVCALLPENDED_Msk: u32 = 32768;
pub const SCB_SHCSR_BUSFAULTPENDED_Pos: u32 = 14;
pub const SCB_SHCSR_BUSFAULTPENDED_Msk: u32 = 16384;
pub const SCB_SHCSR_MEMFAULTPENDED_Pos: u32 = 13;
pub const SCB_SHCSR_MEMFAULTPENDED_Msk: u32 = 8192;
pub const SCB_SHCSR_USGFAULTPENDED_Pos: u32 = 12;
pub const SCB_SHCSR_USGFAULTPENDED_Msk: u32 = 4096;
pub const SCB_SHCSR_SYSTICKACT_Pos: u32 = 11;
pub const SCB_SHCSR_SYSTICKACT_Msk: u32 = 2048;
pub const SCB_SHCSR_PENDSVACT_Pos: u32 = 10;
pub const SCB_SHCSR_PENDSVACT_Msk: u32 = 1024;
pub const SCB_SHCSR_MONITORACT_Pos: u32 = 8;
pub const SCB_SHCSR_MONITORACT_Msk: u32 = 256;
pub const SCB_SHCSR_SVCALLACT_Pos: u32 = 7;
pub const SCB_SHCSR_SVCALLACT_Msk: u32 = 128;
pub const SCB_SHCSR_USGFAULTACT_Pos: u32 = 3;
pub const SCB_SHCSR_USGFAULTACT_Msk: u32 = 8;
pub const SCB_SHCSR_BUSFAULTACT_Pos: u32 = 1;
pub const SCB_SHCSR_BUSFAULTACT_Msk: u32 = 2;
pub const SCB_SHCSR_MEMFAULTACT_Pos: u32 = 0;
pub const SCB_SHCSR_MEMFAULTACT_Msk: u32 = 1;
pub const SCB_CFSR_USGFAULTSR_Pos: u32 = 16;
pub const SCB_CFSR_USGFAULTSR_Msk: u32 = 4294901760;
pub const SCB_CFSR_BUSFAULTSR_Pos: u32 = 8;
pub const SCB_CFSR_BUSFAULTSR_Msk: u32 = 65280;
pub const SCB_CFSR_MEMFAULTSR_Pos: u32 = 0;
pub const SCB_CFSR_MEMFAULTSR_Msk: u32 = 255;
pub const SCB_HFSR_DEBUGEVT_Pos: u32 = 31;
pub const SCB_HFSR_DEBUGEVT_Msk: u32 = 2147483648;
pub const SCB_HFSR_FORCED_Pos: u32 = 30;
pub const SCB_HFSR_FORCED_Msk: u32 = 1073741824;
pub const SCB_HFSR_VECTTBL_Pos: u32 = 1;
pub const SCB_HFSR_VECTTBL_Msk: u32 = 2;
pub const SCB_DFSR_EXTERNAL_Pos: u32 = 4;
pub const SCB_DFSR_EXTERNAL_Msk: u32 = 16;
pub const SCB_DFSR_VCATCH_Pos: u32 = 3;
pub const SCB_DFSR_VCATCH_Msk: u32 = 8;
pub const SCB_DFSR_DWTTRAP_Pos: u32 = 2;
pub const SCB_DFSR_DWTTRAP_Msk: u32 = 4;
pub const SCB_DFSR_BKPT_Pos: u32 = 1;
pub const SCB_DFSR_BKPT_Msk: u32 = 2;
pub const SCB_DFSR_HALTED_Pos: u32 = 0;
pub const SCB_DFSR_HALTED_Msk: u32 = 1;
pub const SysTick_CTRL_COUNTFLAG_Pos: u32 = 16;
pub const SysTick_CTRL_COUNTFLAG_Msk: u32 = 65536;
pub const SysTick_CTRL_CLKSOURCE_Pos: u32 = 2;
pub const SysTick_CTRL_CLKSOURCE_Msk: u32 = 4;
pub const SysTick_CTRL_TICKINT_Pos: u32 = 1;
pub const SysTick_CTRL_TICKINT_Msk: u32 = 2;
pub const SysTick_CTRL_ENABLE_Pos: u32 = 0;
pub const SysTick_CTRL_ENABLE_Msk: u32 = 1;
pub const SysTick_LOAD_RELOAD_Pos: u32 = 0;
pub const SysTick_LOAD_RELOAD_Msk: u32 = 16777215;
pub const SysTick_VAL_CURRENT_Pos: u32 = 0;
pub const SysTick_VAL_CURRENT_Msk: u32 = 16777215;
pub const SysTick_CALIB_NOREF_Pos: u32 = 31;
pub const SysTick_CALIB_NOREF_Msk: u32 = 2147483648;
pub const SysTick_CALIB_SKEW_Pos: u32 = 30;
pub const SysTick_CALIB_SKEW_Msk: u32 = 1073741824;
pub const SysTick_CALIB_TENMS_Pos: u32 = 0;
pub const SysTick_CALIB_TENMS_Msk: u32 = 16777215;
pub const ITM_TPR_PRIVMASK_Pos: u32 = 0;
pub const ITM_TPR_PRIVMASK_Msk: u32 = 15;
pub const ITM_TCR_BUSY_Pos: u32 = 23;
pub const ITM_TCR_BUSY_Msk: u32 = 8388608;
pub const ITM_TCR_ATBID_Pos: u32 = 16;
pub const ITM_TCR_ATBID_Msk: u32 = 8323072;
pub const ITM_TCR_TSPrescale_Pos: u32 = 8;
pub const ITM_TCR_TSPrescale_Msk: u32 = 768;
pub const ITM_TCR_SWOENA_Pos: u32 = 4;
pub const ITM_TCR_SWOENA_Msk: u32 = 16;
pub const ITM_TCR_DWTENA_Pos: u32 = 3;
pub const ITM_TCR_DWTENA_Msk: u32 = 8;
pub const ITM_TCR_SYNCENA_Pos: u32 = 2;
pub const ITM_TCR_SYNCENA_Msk: u32 = 4;
pub const ITM_TCR_TSENA_Pos: u32 = 1;
pub const ITM_TCR_TSENA_Msk: u32 = 2;
pub const ITM_TCR_ITMENA_Pos: u32 = 0;
pub const ITM_TCR_ITMENA_Msk: u32 = 1;
pub const ITM_IWR_ATVALIDM_Pos: u32 = 0;
pub const ITM_IWR_ATVALIDM_Msk: u32 = 1;
pub const ITM_IRR_ATREADYM_Pos: u32 = 0;
pub const ITM_IRR_ATREADYM_Msk: u32 = 1;
pub const ITM_IMCR_INTEGRATION_Pos: u32 = 0;
pub const ITM_IMCR_INTEGRATION_Msk: u32 = 1;
pub const ITM_LSR_ByteAcc_Pos: u32 = 2;
pub const ITM_LSR_ByteAcc_Msk: u32 = 4;
pub const ITM_LSR_Access_Pos: u32 = 1;
pub const ITM_LSR_Access_Msk: u32 = 2;
pub const ITM_LSR_Present_Pos: u32 = 0;
pub const ITM_LSR_Present_Msk: u32 = 1;
pub const InterruptType_ICTR_INTLINESNUM_Pos: u32 = 0;
pub const InterruptType_ICTR_INTLINESNUM_Msk: u32 = 31;
pub const InterruptType_ACTLR_DISFOLD_Pos: u32 = 2;
pub const InterruptType_ACTLR_DISFOLD_Msk: u32 = 4;
pub const InterruptType_ACTLR_DISDEFWBUF_Pos: u32 = 1;
pub const InterruptType_ACTLR_DISDEFWBUF_Msk: u32 = 2;
pub const InterruptType_ACTLR_DISMCYCINT_Pos: u32 = 0;
pub const InterruptType_ACTLR_DISMCYCINT_Msk: u32 = 1;
pub const CoreDebug_DHCSR_DBGKEY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_DBGKEY_Msk: u32 = 4294901760;
pub const CoreDebug_DHCSR_S_RESET_ST_Pos: u32 = 25;
pub const CoreDebug_DHCSR_S_RESET_ST_Msk: u32 = 33554432;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Pos: u32 = 24;
pub const CoreDebug_DHCSR_S_RETIRE_ST_Msk: u32 = 16777216;
pub const CoreDebug_DHCSR_S_LOCKUP_Pos: u32 = 19;
pub const CoreDebug_DHCSR_S_LOCKUP_Msk: u32 = 524288;
pub const CoreDebug_DHCSR_S_SLEEP_Pos: u32 = 18;
pub const CoreDebug_DHCSR_S_SLEEP_Msk: u32 = 262144;
pub const CoreDebug_DHCSR_S_HALT_Pos: u32 = 17;
pub const CoreDebug_DHCSR_S_HALT_Msk: u32 = 131072;
pub const CoreDebug_DHCSR_S_REGRDY_Pos: u32 = 16;
pub const CoreDebug_DHCSR_S_REGRDY_Msk: u32 = 65536;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Pos: u32 = 5;
pub const CoreDebug_DHCSR_C_SNAPSTALL_Msk: u32 = 32;
pub const CoreDebug_DHCSR_C_MASKINTS_Pos: u32 = 3;
pub const CoreDebug_DHCSR_C_MASKINTS_Msk: u32 = 8;
pub const CoreDebug_DHCSR_C_STEP_Pos: u32 = 2;
pub const CoreDebug_DHCSR_C_STEP_Msk: u32 = 4;
pub const CoreDebug_DHCSR_C_HALT_Pos: u32 = 1;
pub const CoreDebug_DHCSR_C_HALT_Msk: u32 = 2;
pub const CoreDebug_DHCSR_C_DEBUGEN_Pos: u32 = 0;
pub const CoreDebug_DHCSR_C_DEBUGEN_Msk: u32 = 1;
pub const CoreDebug_DCRSR_REGWnR_Pos: u32 = 16;
pub const CoreDebug_DCRSR_REGWnR_Msk: u32 = 65536;
pub const CoreDebug_DCRSR_REGSEL_Pos: u32 = 0;
pub const CoreDebug_DCRSR_REGSEL_Msk: u32 = 31;
pub const CoreDebug_DEMCR_TRCENA_Pos: u32 = 24;
pub const CoreDebug_DEMCR_TRCENA_Msk: u32 = 16777216;
pub const CoreDebug_DEMCR_MON_REQ_Pos: u32 = 19;
pub const CoreDebug_DEMCR_MON_REQ_Msk: u32 = 524288;
pub const CoreDebug_DEMCR_MON_STEP_Pos: u32 = 18;
pub const CoreDebug_DEMCR_MON_STEP_Msk: u32 = 262144;
pub const CoreDebug_DEMCR_MON_PEND_Pos: u32 = 17;
pub const CoreDebug_DEMCR_MON_PEND_Msk: u32 = 131072;
pub const CoreDebug_DEMCR_MON_EN_Pos: u32 = 16;
pub const CoreDebug_DEMCR_MON_EN_Msk: u32 = 65536;
pub const CoreDebug_DEMCR_VC_HARDERR_Pos: u32 = 10;
pub const CoreDebug_DEMCR_VC_HARDERR_Msk: u32 = 1024;
pub const CoreDebug_DEMCR_VC_INTERR_Pos: u32 = 9;
pub const CoreDebug_DEMCR_VC_INTERR_Msk: u32 = 512;
pub const CoreDebug_DEMCR_VC_BUSERR_Pos: u32 = 8;
pub const CoreDebug_DEMCR_VC_BUSERR_Msk: u32 = 256;
pub const CoreDebug_DEMCR_VC_STATERR_Pos: u32 = 7;
pub const CoreDebug_DEMCR_VC_STATERR_Msk: u32 = 128;
pub const CoreDebug_DEMCR_VC_CHKERR_Pos: u32 = 6;
pub const CoreDebug_DEMCR_VC_CHKERR_Msk: u32 = 64;
pub const CoreDebug_DEMCR_VC_NOCPERR_Pos: u32 = 5;
pub const CoreDebug_DEMCR_VC_NOCPERR_Msk: u32 = 32;
pub const CoreDebug_DEMCR_VC_MMERR_Pos: u32 = 4;
pub const CoreDebug_DEMCR_VC_MMERR_Msk: u32 = 16;
pub const CoreDebug_DEMCR_VC_CORERESET_Pos: u32 = 0;
pub const CoreDebug_DEMCR_VC_CORERESET_Msk: u32 = 1;
pub const SCS_BASE: u32 = 3758153728;
pub const ITM_BASE: u32 = 3758096384;
pub const CoreDebug_BASE: u32 = 3758157296;
pub const SysTick_BASE: u32 = 3758153744;
pub const NVIC_BASE: u32 = 3758153984;
pub const SCB_BASE: u32 = 3758157056;
pub const ITM_RXBUFFER_EMPTY: u32 = 1520786085;
pub const SYSCLK_FREQ_72MHz: u32 = 72000000;
pub const VECT_TAB_OFFSET: u32 = 0;
#[doc = "< 2 Non Maskable Interrupt"]
pub const enum_IRQn_NonMaskableInt_IRQn: enum_IRQn = -14;
#[doc = "< 4 Cortex-M3 Memory Management Interrupt"]
pub const enum_IRQn_MemoryManagement_IRQn: enum_IRQn = -12;
#[doc = "< 5 Cortex-M3 Bus Fault Interrupt"]
pub const enum_IRQn_BusFault_IRQn: enum_IRQn = -11;
#[doc = "< 6 Cortex-M3 Usage Fault Interrupt"]
pub const enum_IRQn_UsageFault_IRQn: enum_IRQn = -10;
#[doc = "< 11 Cortex-M3 SV Call Interrupt"]
pub const enum_IRQn_SVCall_IRQn: enum_IRQn = -5;
#[doc = "< 12 Cortex-M3 Debug Monitor Interrupt"]
pub const enum_IRQn_DebugMonitor_IRQn: enum_IRQn = -4;
#[doc = "< 14 Cortex-M3 Pend SV Interrupt"]
pub const enum_IRQn_PendSV_IRQn: enum_IRQn = -2;
#[doc = "< 15 Cortex-M3 System Tick Interrupt"]
pub const enum_IRQn_SysTick_IRQn: enum_IRQn = -1;
#[doc = "< Window WatchDog Interrupt"]
pub const enum_IRQn_WWDG_IRQn: enum_IRQn = 0;
#[doc = "< PVD through EXTI Line detection Interrupt"]
pub const enum_IRQn_PVD_IRQn: enum_IRQn = 1;
#[doc = "< Tamper Interrupt"]
pub const enum_IRQn_TAMPER_IRQn: enum_IRQn = 2;
#[doc = "< RTC global Interrupt"]
pub const enum_IRQn_RTC_IRQn: enum_IRQn = 3;
#[doc = "< FLASH global Interrupt"]
pub const enum_IRQn_FLASH_IRQn: enum_IRQn = 4;
#[doc = "< RCC global Interrupt"]
pub const enum_IRQn_RCC_IRQn: enum_IRQn = 5;
#[doc = "< EXTI Line0 Interrupt"]
pub const enum_IRQn_EXTI0_IRQn: enum_IRQn = 6;
#[doc = "< EXTI Line1 Interrupt"]
pub const enum_IRQn_EXTI1_IRQn: enum_IRQn = 7;
#[doc = "< EXTI Line2 Interrupt"]
pub const enum_IRQn_EXTI2_IRQn: enum_IRQn = 8;
#[doc = "< EXTI Line3 Interrupt"]
pub const enum_IRQn_EXTI3_IRQn: enum_IRQn = 9;
#[doc = "< EXTI Line4 Interrupt"]
pub const enum_IRQn_EXTI4_IRQn: enum_IRQn = 10;
#[doc = "< DMA1 Channel 1 global Interrupt"]
pub const enum_IRQn_DMA1_Channel1_IRQn: enum_IRQn = 11;
#[doc = "< DMA1 Channel 2 global Interrupt"]
pub const enum_IRQn_DMA1_Channel2_IRQn: enum_IRQn = 12;
#[doc = "< DMA1 Channel 3 global Interrupt"]
pub const enum_IRQn_DMA1_Channel3_IRQn: enum_IRQn = 13;
#[doc = "< DMA1 Channel 4 global Interrupt"]
pub const enum_IRQn_DMA1_Channel4_IRQn: enum_IRQn = 14;
#[doc = "< DMA1 Channel 5 global Interrupt"]
pub const enum_IRQn_DMA1_Channel5_IRQn: enum_IRQn = 15;
#[doc = "< DMA1 Channel 6 global Interrupt"]
pub const enum_IRQn_DMA1_Channel6_IRQn: enum_IRQn = 16;
#[doc = "< DMA1 Channel 7 global Interrupt"]
pub const enum_IRQn_DMA1_Channel7_IRQn: enum_IRQn = 17;
#[doc = "< ADC1 and ADC2 global Interrupt"]
pub const enum_IRQn_ADC1_2_IRQn: enum_IRQn = 18;
#[doc = "< USB Device High Priority or CAN1 TX Interrupts"]
pub const enum_IRQn_USB_HP_CAN1_TX_IRQn: enum_IRQn = 19;
#[doc = "< USB Device Low Priority or CAN1 RX0 Interrupts"]
pub const enum_IRQn_USB_LP_CAN1_RX0_IRQn: enum_IRQn = 20;
#[doc = "< CAN1 RX1 Interrupt"]
pub const enum_IRQn_CAN1_RX1_IRQn: enum_IRQn = 21;
#[doc = "< CAN1 SCE Interrupt"]
pub const enum_IRQn_CAN1_SCE_IRQn: enum_IRQn = 22;
#[allow(rustdoc::broken_intra_doc_links)]
#[doc = "< External Line[9:5] Interrupts"]
pub const enum_IRQn_EXTI9_5_IRQn: enum_IRQn = 23;
#[doc = "< TIM1 Break Interrupt"]
pub const enum_IRQn_TIM1_BRK_IRQn: enum_IRQn = 24;
#[doc = "< TIM1 Update Interrupt"]
pub const enum_IRQn_TIM1_UP_IRQn: enum_IRQn = 25;
#[doc = "< TIM1 Trigger and Commutation Interrupt"]
pub const enum_IRQn_TIM1_TRG_COM_IRQn: enum_IRQn = 26;
#[doc = "< TIM1 Capture Compare Interrupt"]
pub const enum_IRQn_TIM1_CC_IRQn: enum_IRQn = 27;
#[doc = "< TIM2 global Interrupt"]
pub const enum_IRQn_TIM2_IRQn: enum_IRQn = 28;
#[doc = "< TIM3 global Interrupt"]
pub const enum_IRQn_TIM3_IRQn: enum_IRQn = 29;
#[doc = "< TIM4 global Interrupt"]
pub const enum_IRQn_TIM4_IRQn: enum_IRQn = 30;
#[doc = "< I2C1 Event Interrupt"]
pub const enum_IRQn_I2C1_EV_IRQn: enum_IRQn = 31;
#[doc = "< I2C1 Error Interrupt"]
pub const enum_IRQn_I2C1_ER_IRQn: enum_IRQn = 32;
#[doc = "< I2C2 Event Interrupt"]
pub const enum_IRQn_I2C2_EV_IRQn: enum_IRQn = 33;
#[doc = "< I2C2 Error Interrupt"]
pub const enum_IRQn_I2C2_ER_IRQn: enum_IRQn = 34;
#[doc = "< SPI1 global Interrupt"]
pub const enum_IRQn_SPI1_IRQn: enum_IRQn = 35;
#[doc = "< SPI2 global Interrupt"]
pub const enum_IRQn_SPI2_IRQn: enum_IRQn = 36;
#[doc = "< USART1 global Interrupt"]
pub const enum_IRQn_USART1_IRQn: enum_IRQn = 37;
#[doc = "< USART2 global Interrupt"]
pub const enum_IRQn_USART2_IRQn: enum_IRQn = 38;
#[doc = "< USART3 global Interrupt"]
pub const enum_IRQn_USART3_IRQn: enum_IRQn = 39;
#[allow(rustdoc::broken_intra_doc_links)]
#[doc = "< External Line[15:10] Interrupts"]
pub const enum_IRQn_EXTI15_10_IRQn: enum_IRQn = 40;
#[doc = "< RTC Alarm through EXTI Line Interrupt"]
pub const enum_IRQn_RTCAlarm_IRQn: enum_IRQn = 41;
#[doc = "< USB Device WakeUp from suspend through EXTI Line Interrupt"]
pub const enum_IRQn_USBWakeUp_IRQn: enum_IRQn = 42;
pub const enum_FlagStatus_RESET: enum_FlagStatus = 0;
pub const enum_FlagStatus_SET: enum_FlagStatus = 1;
pub const enum_FunctionalState_DISABLE: enum_FunctionalState = 0;
pub const enum_FunctionalState_ENABLE: enum_FunctionalState = 1;
pub const enum_ErrorStatus_ERROR: enum_ErrorStatus = 0;
pub const enum_ErrorStatus_SUCCESS: enum_ErrorStatus = 1;
#[test]
fn bindgen_test_layout_struct___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<struct___fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct___fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(struct___fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<struct___fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(struct___fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct___fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_NVIC_Type() {
    const UNINIT: ::std::mem::MaybeUninit<struct_NVIC_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_NVIC_Type>(),
        3588usize,
        concat!("Size of: ", stringify!(struct_NVIC_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_NVIC_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_NVIC_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ISER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(ISER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ICER) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(ICER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RSERVED1) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(RSERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ISPR) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(ISPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ICPR) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(ICPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IABR) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(IABR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IP) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(IP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STIR) as usize - ptr as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_NVIC_Type),
            "::",
            stringify!(STIR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_SCB_Type() {
    const UNINIT: ::std::mem::MaybeUninit<struct_SCB_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_SCB_Type>(),
        116usize,
        concat!("Size of: ", stringify!(struct_SCB_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_SCB_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_SCB_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CPUID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(CPUID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ICSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(ICSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VTOR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(VTOR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AIRCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(AIRCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SCR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(SCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SHP) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(SHP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SHCSR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(SHCSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CFSR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(CFSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HFSR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(HFSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DFSR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(DFSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMFAR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(MMFAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BFAR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(BFAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AFSR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(AFSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PFR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(PFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DFR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(DFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ADR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(ADR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMFR) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(MMFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ISAR) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SCB_Type),
            "::",
            stringify!(ISAR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_SysTick_Type() {
    const UNINIT: ::std::mem::MaybeUninit<struct_SysTick_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_SysTick_Type>(),
        16usize,
        concat!("Size of: ", stringify!(struct_SysTick_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_SysTick_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_SysTick_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTRL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SysTick_Type),
            "::",
            stringify!(CTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LOAD) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SysTick_Type),
            "::",
            stringify!(LOAD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VAL) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SysTick_Type),
            "::",
            stringify!(VAL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CALIB) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SysTick_Type),
            "::",
            stringify!(CALIB)
        )
    );
}
#[test]
fn bindgen_test_layout_union_ITM_Type__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<union_ITM_Type__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<union_ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(union_ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<union_ITM_Type__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(union_ITM_Type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u8_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(union_ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u8_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u16_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(union_ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u16_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u32_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(union_ITM_Type__bindgen_ty_1),
            "::",
            stringify!(u32_)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_ITM_Type() {
    const UNINIT: ::std::mem::MaybeUninit<struct_ITM_Type> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_ITM_Type>(),
        4096usize,
        concat!("Size of: ", stringify!(struct_ITM_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_ITM_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_ITM_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PORT) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(PORT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TER) as usize - ptr as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(TER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        3588usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TPR) as usize - ptr as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(TPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        3652usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TCR) as usize - ptr as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(TCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        3716usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IWR) as usize - ptr as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(IWR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IRR) as usize - ptr as usize },
        3836usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(IRR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IMCR) as usize - ptr as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(IMCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        3844usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LAR) as usize - ptr as usize },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(LAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LSR) as usize - ptr as usize },
        4020usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(LSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID4) as usize - ptr as usize },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(PID4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID5) as usize - ptr as usize },
        4052usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(PID5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID6) as usize - ptr as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(PID6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID7) as usize - ptr as usize },
        4060usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(PID7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID0) as usize - ptr as usize },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(PID0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID1) as usize - ptr as usize },
        4068usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(PID1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID2) as usize - ptr as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(PID2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PID3) as usize - ptr as usize },
        4076usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(PID3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CID0) as usize - ptr as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(CID0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CID1) as usize - ptr as usize },
        4084usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(CID1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CID2) as usize - ptr as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(CID2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CID3) as usize - ptr as usize },
        4092usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ITM_Type),
            "::",
            stringify!(CID3)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_InterruptType_Type() {
    const UNINIT: ::std::mem::MaybeUninit<struct_InterruptType_Type> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_InterruptType_Type>(),
        12usize,
        concat!("Size of: ", stringify!(struct_InterruptType_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_InterruptType_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_InterruptType_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_InterruptType_Type),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ICTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_InterruptType_Type),
            "::",
            stringify!(ICTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_InterruptType_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_CoreDebug_Type() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CoreDebug_Type> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CoreDebug_Type>(),
        16usize,
        concat!("Size of: ", stringify!(struct_CoreDebug_Type))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CoreDebug_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_CoreDebug_Type))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DHCSR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CoreDebug_Type),
            "::",
            stringify!(DHCSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCRSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CoreDebug_Type),
            "::",
            stringify!(DCRSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCRDR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CoreDebug_Type),
            "::",
            stringify!(DCRDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DEMCR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CoreDebug_Type),
            "::",
            stringify!(DEMCR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_ADC_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_ADC_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_ADC_TypeDef>(),
        80usize,
        concat!("Size of: ", stringify!(struct_ADC_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_ADC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_ADC_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SMPR1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(SMPR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SMPR2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(SMPR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JOFR1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(JOFR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JOFR2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(JOFR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JOFR3) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(JOFR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JOFR4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(JOFR4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HTR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(HTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LTR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(LTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SQR1) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(SQR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SQR2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(SQR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SQR3) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(SQR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JSQR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(JSQR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JDR1) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(JDR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JDR2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(JDR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JDR3) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(JDR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JDR4) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(JDR4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ADC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_BKP_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_BKP_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_BKP_TypeDef>(),
        192usize,
        concat!("Size of: ", stringify!(struct_BKP_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_BKP_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_BKP_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR8) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR9) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR10) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RTCCR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RTCCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR11) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR12) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED15) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR13) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED16) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR14) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED17) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR15) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED18) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR16) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED19) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED19)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR17) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED20) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR18) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED21) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR19) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR19)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED22) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR20) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED23) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR21) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED24) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED24)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR22) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED25) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED25)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR23) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED26) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR24) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR24)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED27) as usize - ptr as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED27)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR25) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR25)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED28) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED28)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR26) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED29) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED29)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR27) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR27)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED30) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED30)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR28) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR28)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED31) as usize - ptr as usize },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED31)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR29) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR29)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED32) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR30) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR30)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED33) as usize - ptr as usize },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED33)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR31) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR31)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED34) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED34)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR32) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED35) as usize - ptr as usize },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED35)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR33) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR33)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED36) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED36)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR34) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR34)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED37) as usize - ptr as usize },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED37)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR35) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR35)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED38) as usize - ptr as usize },
        162usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED38)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR36) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR36)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED39) as usize - ptr as usize },
        166usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED39)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR37) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR37)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED40) as usize - ptr as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED40)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR38) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR38)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED41) as usize - ptr as usize },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED41)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR39) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR39)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED42) as usize - ptr as usize },
        178usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED42)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR40) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR40)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED43) as usize - ptr as usize },
        182usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED43)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR41) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR41)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED44) as usize - ptr as usize },
        186usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED44)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR42) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(DR42)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED45) as usize - ptr as usize },
        190usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_BKP_TypeDef),
            "::",
            stringify!(RESERVED45)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_CAN_TxMailBox_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CAN_TxMailBox_TypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CAN_TxMailBox_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(struct_CAN_TxMailBox_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CAN_TxMailBox_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_CAN_TxMailBox_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TIR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TDTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDLR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TDLR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TDHR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TxMailBox_TypeDef),
            "::",
            stringify!(TDHR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_CAN_FIFOMailBox_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CAN_FIFOMailBox_TypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CAN_FIFOMailBox_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(struct_CAN_FIFOMailBox_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CAN_FIFOMailBox_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_CAN_FIFOMailBox_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RIR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RDTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RDTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RDLR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RDLR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RDHR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_FIFOMailBox_TypeDef),
            "::",
            stringify!(RDHR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_CAN_FilterRegister_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CAN_FilterRegister_TypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CAN_FilterRegister_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(struct_CAN_FilterRegister_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CAN_FilterRegister_TypeDef>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(struct_CAN_FilterRegister_TypeDef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_FilterRegister_TypeDef),
            "::",
            stringify!(FR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_FilterRegister_TypeDef),
            "::",
            stringify!(FR2)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_CAN_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CAN_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CAN_TypeDef>(),
        688usize,
        concat!("Size of: ", stringify!(struct_CAN_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CAN_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_CAN_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(MCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(MSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TSR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(TSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RF0R) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(RF0R)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RF1R) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(RF1R)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IER) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(IER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ESR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(ESR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BTR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(BTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sTxMailBox) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(sTxMailBox)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sFIFOMailBox) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(sFIFOMailBox)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FMR) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(FMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FM1R) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(FM1R)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FS1R) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(FS1R)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FFA1R) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(FFA1R)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FA1R) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(FA1R)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sFilterRegister) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CAN_TypeDef),
            "::",
            stringify!(sFilterRegister)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_CEC_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CEC_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CEC_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(struct_CEC_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CEC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_CEC_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CEC_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OAR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CEC_TypeDef),
            "::",
            stringify!(OAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PRES) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CEC_TypeDef),
            "::",
            stringify!(PRES)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ESR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CEC_TypeDef),
            "::",
            stringify!(ESR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CEC_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TXD) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CEC_TypeDef),
            "::",
            stringify!(TXD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXD) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CEC_TypeDef),
            "::",
            stringify!(RXD)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_CRC_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_CRC_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_CRC_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(struct_CRC_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_CRC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_CRC_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CRC_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IDR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CRC_TypeDef),
            "::",
            stringify!(IDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CRC_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CRC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_CRC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_DAC_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_DAC_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_DAC_TypeDef>(),
        52usize,
        concat!("Size of: ", stringify!(struct_DAC_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_DAC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_DAC_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SWTRIGR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(SWTRIGR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DHR12R1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(DHR12R1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DHR12L1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(DHR12L1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DHR8R1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(DHR8R1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DHR12R2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(DHR12R2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DHR12L2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(DHR12L2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DHR8R2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(DHR8R2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DHR12RD) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(DHR12RD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DHR12LD) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(DHR12LD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DHR8RD) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(DHR8RD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DOR1) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(DOR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DOR2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DAC_TypeDef),
            "::",
            stringify!(DOR2)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_DBGMCU_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_DBGMCU_TypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_DBGMCU_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(struct_DBGMCU_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_DBGMCU_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_DBGMCU_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IDCODE) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DBGMCU_TypeDef),
            "::",
            stringify!(IDCODE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DBGMCU_TypeDef),
            "::",
            stringify!(CR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_DMA_Channel_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_DMA_Channel_TypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_DMA_Channel_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(struct_DMA_Channel_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_DMA_Channel_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_DMA_Channel_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DMA_Channel_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CNDTR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DMA_Channel_TypeDef),
            "::",
            stringify!(CNDTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CPAR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DMA_Channel_TypeDef),
            "::",
            stringify!(CPAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMAR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DMA_Channel_TypeDef),
            "::",
            stringify!(CMAR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_DMA_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_DMA_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_DMA_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(struct_DMA_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_DMA_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_DMA_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ISR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DMA_TypeDef),
            "::",
            stringify!(ISR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IFCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_DMA_TypeDef),
            "::",
            stringify!(IFCR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_ETH_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_ETH_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_ETH_TypeDef>(),
        4184usize,
        concat!("Size of: ", stringify!(struct_ETH_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_ETH_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_ETH_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACFFR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACFFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACHTHR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACHTHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACHTLR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACHTLR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACMIIAR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACMIIAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACMIIDR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACMIIDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACFCR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACFCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACVLANTR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACVLANTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACRWUFFR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACRWUFFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACPMTCSR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACPMTCSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACSR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACIMR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACIMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACA0HR) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACA0HR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACA0LR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACA0LR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACA1HR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACA1HR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACA1LR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACA1LR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACA2HR) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACA2HR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACA2LR) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACA2LR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACA3HR) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACA3HR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MACA3LR) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MACA3LR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCCR) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MMCCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCRIR) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MMCRIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCTIR) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MMCTIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCRIMR) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MMCRIMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCTIMR) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MMCTIMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCTGFSCCR) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MMCTGFSCCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCTGFMSCCR) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MMCTGFMSCCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCTGFCR) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MMCTGFCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCRFCECR) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MMCRFCECR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCRFAECR) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MMCRFAECR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MMCRGUFCR) as usize - ptr as usize },
        452usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(MMCRGUFCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PTPTSCR) as usize - ptr as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(PTPTSCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PTPSSIR) as usize - ptr as usize },
        1796usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(PTPSSIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PTPTSHR) as usize - ptr as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(PTPTSHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PTPTSLR) as usize - ptr as usize },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(PTPTSLR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PTPTSHUR) as usize - ptr as usize },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(PTPTSHUR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PTPTSLUR) as usize - ptr as usize },
        1812usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(PTPTSLUR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PTPTSAR) as usize - ptr as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(PTPTSAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PTPTTHR) as usize - ptr as usize },
        1820usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(PTPTTHR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PTPTTLR) as usize - ptr as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(PTPTTLR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        1828usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMABMR) as usize - ptr as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMABMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMATPDR) as usize - ptr as usize },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMATPDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMARPDR) as usize - ptr as usize },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMARPDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMARDLAR) as usize - ptr as usize },
        4108usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMARDLAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMATDLAR) as usize - ptr as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMATDLAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMASR) as usize - ptr as usize },
        4116usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMASR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMAOMR) as usize - ptr as usize },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMAOMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMAIER) as usize - ptr as usize },
        4124usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMAIER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMAMFBOCR) as usize - ptr as usize },
        4128usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMAMFBOCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        4132usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMACHTDR) as usize - ptr as usize },
        4168usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMACHTDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMACHRDR) as usize - ptr as usize },
        4172usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMACHRDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMACHTBAR) as usize - ptr as usize },
        4176usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMACHTBAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMACHRBAR) as usize - ptr as usize },
        4180usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_ETH_TypeDef),
            "::",
            stringify!(DMACHRBAR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_EXTI_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_EXTI_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_EXTI_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(struct_EXTI_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_EXTI_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_EXTI_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IMR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_EXTI_TypeDef),
            "::",
            stringify!(IMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EMR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_EXTI_TypeDef),
            "::",
            stringify!(EMR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RTSR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_EXTI_TypeDef),
            "::",
            stringify!(RTSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FTSR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_EXTI_TypeDef),
            "::",
            stringify!(FTSR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SWIER) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_EXTI_TypeDef),
            "::",
            stringify!(SWIER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_EXTI_TypeDef),
            "::",
            stringify!(PR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_FLASH_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_FLASH_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_FLASH_TypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(struct_FLASH_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_FLASH_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_FLASH_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ACR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FLASH_TypeDef),
            "::",
            stringify!(ACR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KEYR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FLASH_TypeDef),
            "::",
            stringify!(KEYR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OPTKEYR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FLASH_TypeDef),
            "::",
            stringify!(OPTKEYR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FLASH_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FLASH_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FLASH_TypeDef),
            "::",
            stringify!(AR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FLASH_TypeDef),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OBR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FLASH_TypeDef),
            "::",
            stringify!(OBR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WRPR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FLASH_TypeDef),
            "::",
            stringify!(WRPR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_OB_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_OB_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_OB_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(struct_OB_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_OB_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(struct_OB_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RDP) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_OB_TypeDef),
            "::",
            stringify!(RDP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USER) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_OB_TypeDef),
            "::",
            stringify!(USER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_OB_TypeDef),
            "::",
            stringify!(Data0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_OB_TypeDef),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WRP0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_OB_TypeDef),
            "::",
            stringify!(WRP0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WRP1) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_OB_TypeDef),
            "::",
            stringify!(WRP1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WRP2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_OB_TypeDef),
            "::",
            stringify!(WRP2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WRP3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_OB_TypeDef),
            "::",
            stringify!(WRP3)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_FSMC_Bank1_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_FSMC_Bank1_TypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_FSMC_Bank1_TypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(struct_FSMC_Bank1_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_FSMC_Bank1_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_FSMC_Bank1_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BTCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank1_TypeDef),
            "::",
            stringify!(BTCR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_FSMC_Bank1E_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_FSMC_Bank1E_TypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_FSMC_Bank1E_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(struct_FSMC_Bank1E_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_FSMC_Bank1E_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_FSMC_Bank1E_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BWTR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank1E_TypeDef),
            "::",
            stringify!(BWTR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_FSMC_Bank2_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_FSMC_Bank2_TypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_FSMC_Bank2_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(struct_FSMC_Bank2_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_FSMC_Bank2_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_FSMC_Bank2_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PCR2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank2_TypeDef),
            "::",
            stringify!(PCR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank2_TypeDef),
            "::",
            stringify!(SR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PMEM2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank2_TypeDef),
            "::",
            stringify!(PMEM2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PATT2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank2_TypeDef),
            "::",
            stringify!(PATT2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank2_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ECCR2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank2_TypeDef),
            "::",
            stringify!(ECCR2)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_FSMC_Bank3_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_FSMC_Bank3_TypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_FSMC_Bank3_TypeDef>(),
        24usize,
        concat!("Size of: ", stringify!(struct_FSMC_Bank3_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_FSMC_Bank3_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_FSMC_Bank3_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PCR3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank3_TypeDef),
            "::",
            stringify!(PCR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR3) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank3_TypeDef),
            "::",
            stringify!(SR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PMEM3) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank3_TypeDef),
            "::",
            stringify!(PMEM3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PATT3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank3_TypeDef),
            "::",
            stringify!(PATT3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank3_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ECCR3) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank3_TypeDef),
            "::",
            stringify!(ECCR3)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_FSMC_Bank4_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_FSMC_Bank4_TypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_FSMC_Bank4_TypeDef>(),
        20usize,
        concat!("Size of: ", stringify!(struct_FSMC_Bank4_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_FSMC_Bank4_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_FSMC_Bank4_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PCR4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank4_TypeDef),
            "::",
            stringify!(PCR4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR4) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank4_TypeDef),
            "::",
            stringify!(SR4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PMEM4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank4_TypeDef),
            "::",
            stringify!(PMEM4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PATT4) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank4_TypeDef),
            "::",
            stringify!(PATT4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PIO4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_FSMC_Bank4_TypeDef),
            "::",
            stringify!(PIO4)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_GPIO_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_GPIO_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_GPIO_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(struct_GPIO_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_GPIO_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_GPIO_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CRL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_GPIO_TypeDef),
            "::",
            stringify!(CRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CRH) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_GPIO_TypeDef),
            "::",
            stringify!(CRH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IDR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_GPIO_TypeDef),
            "::",
            stringify!(IDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ODR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_GPIO_TypeDef),
            "::",
            stringify!(ODR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BSRR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_GPIO_TypeDef),
            "::",
            stringify!(BSRR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BRR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_GPIO_TypeDef),
            "::",
            stringify!(BRR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LCKR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_GPIO_TypeDef),
            "::",
            stringify!(LCKR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_AFIO_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_AFIO_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_AFIO_TypeDef>(),
        32usize,
        concat!("Size of: ", stringify!(struct_AFIO_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_AFIO_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_AFIO_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EVCR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_AFIO_TypeDef),
            "::",
            stringify!(EVCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MAPR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_AFIO_TypeDef),
            "::",
            stringify!(MAPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EXTICR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_AFIO_TypeDef),
            "::",
            stringify!(EXTICR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_AFIO_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MAPR2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_AFIO_TypeDef),
            "::",
            stringify!(MAPR2)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_I2C_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_I2C_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_I2C_TypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(struct_I2C_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_I2C_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(struct_I2C_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OAR1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(OAR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OAR2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(OAR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(SR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(SR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(CCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TRISE) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(TRISE)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_I2C_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_IWDG_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_IWDG_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_IWDG_TypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(struct_IWDG_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_IWDG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_IWDG_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_IWDG_TypeDef),
            "::",
            stringify!(KR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_IWDG_TypeDef),
            "::",
            stringify!(PR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RLR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_IWDG_TypeDef),
            "::",
            stringify!(RLR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_IWDG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_PWR_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_PWR_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_PWR_TypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(struct_PWR_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_PWR_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_PWR_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_PWR_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_PWR_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_RCC_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_RCC_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_RCC_TypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(struct_RCC_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_RCC_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_RCC_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RCC_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CFGR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RCC_TypeDef),
            "::",
            stringify!(CFGR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CIR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RCC_TypeDef),
            "::",
            stringify!(CIR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).APB2RSTR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RCC_TypeDef),
            "::",
            stringify!(APB2RSTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).APB1RSTR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RCC_TypeDef),
            "::",
            stringify!(APB1RSTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AHBENR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RCC_TypeDef),
            "::",
            stringify!(AHBENR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).APB2ENR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RCC_TypeDef),
            "::",
            stringify!(APB2ENR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).APB1ENR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RCC_TypeDef),
            "::",
            stringify!(APB1ENR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BDCR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RCC_TypeDef),
            "::",
            stringify!(BDCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CSR) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RCC_TypeDef),
            "::",
            stringify!(CSR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_RTC_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_RTC_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_RTC_TypeDef>(),
        40usize,
        concat!("Size of: ", stringify!(struct_RTC_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_RTC_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(struct_RTC_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CRH) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(CRH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CRL) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(CRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PRLH) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(PRLH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PRLL) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(PRLL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIVH) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(DIVH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIVL) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(DIVL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CNTH) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(CNTH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CNTL) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(CNTL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ALRH) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(ALRH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ALRL) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(ALRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_RTC_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_SDIO_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_SDIO_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_SDIO_TypeDef>(),
        132usize,
        concat!("Size of: ", stringify!(struct_SDIO_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_SDIO_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_SDIO_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).POWER) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(POWER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CLKCR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(CLKCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ARG) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(ARG)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CMD) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(CMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESPCMD) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(RESPCMD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESP1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(RESP1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESP2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(RESP2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESP3) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(RESP3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESP4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(RESP4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DTIMER) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(DTIMER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DLEN) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(DLEN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCTRL) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(DCTRL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCOUNT) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(DCOUNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).STA) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(STA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ICR) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(ICR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MASK) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(MASK)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FIFOCNT) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(FIFOCNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FIFO) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SDIO_TypeDef),
            "::",
            stringify!(FIFO)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_SPI_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_SPI_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_SPI_TypeDef>(),
        36usize,
        concat!("Size of: ", stringify!(struct_SPI_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_SPI_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(struct_SPI_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CRCPR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(CRCPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RXCRCR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(RXCRCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TXCRCR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(TXCRCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).I2SCFGR) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(I2SCFGR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).I2SPR) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(I2SPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_SPI_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_TIM_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_TIM_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_TIM_TypeDef>(),
        80usize,
        concat!("Size of: ", stringify!(struct_TIM_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_TIM_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(struct_TIM_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SMCR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(SMCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DIER) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(DIER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EGR) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(EGR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCMR1) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(CCMR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCMR2) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(CCMR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCER) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(CCER)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CNT) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(CNT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PSC) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(PSC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ARR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(ARR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RCR) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCR1) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(CCR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCR2) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(CCR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCR3) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(CCR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED15) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CCR4) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(CCR4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED16) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BDTR) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(BDTR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED17) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DCR) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(DCR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED18) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DMAR) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(DMAR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED19) as usize - ptr as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_TIM_TypeDef),
            "::",
            stringify!(RESERVED19)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_USART_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_USART_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_USART_TypeDef>(),
        28usize,
        concat!("Size of: ", stringify!(struct_USART_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_USART_TypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(struct_USART_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(SR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED0) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(RESERVED0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(DR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BRR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(BRR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(CR1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(CR2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR3) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(CR3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GTPR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(GTPR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_TypeDef),
            "::",
            stringify!(RESERVED6)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_WWDG_TypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_WWDG_TypeDef> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_WWDG_TypeDef>(),
        12usize,
        concat!("Size of: ", stringify!(struct_WWDG_TypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_WWDG_TypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_WWDG_TypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CR) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_WWDG_TypeDef),
            "::",
            stringify!(CR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CFR) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_WWDG_TypeDef),
            "::",
            stringify!(CFR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SR) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_WWDG_TypeDef),
            "::",
            stringify!(SR)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_USART_InitTypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_USART_InitTypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_USART_InitTypeDef>(),
        16usize,
        concat!("Size of: ", stringify!(struct_USART_InitTypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_USART_InitTypeDef>(),
        4usize,
        concat!("Alignment of ", stringify!(struct_USART_InitTypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USART_BaudRate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_InitTypeDef),
            "::",
            stringify!(USART_BaudRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USART_WordLength) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_InitTypeDef),
            "::",
            stringify!(USART_WordLength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USART_StopBits) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_InitTypeDef),
            "::",
            stringify!(USART_StopBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USART_Parity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_InitTypeDef),
            "::",
            stringify!(USART_Parity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USART_Mode) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_InitTypeDef),
            "::",
            stringify!(USART_Mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USART_HardwareFlowControl) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_InitTypeDef),
            "::",
            stringify!(USART_HardwareFlowControl)
        )
    );
}
#[test]
fn bindgen_test_layout_struct_USART_ClockInitTypeDef() {
    const UNINIT: ::std::mem::MaybeUninit<struct_USART_ClockInitTypeDef> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<struct_USART_ClockInitTypeDef>(),
        8usize,
        concat!("Size of: ", stringify!(struct_USART_ClockInitTypeDef))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_USART_ClockInitTypeDef>(),
        2usize,
        concat!("Alignment of ", stringify!(struct_USART_ClockInitTypeDef))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USART_Clock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_ClockInitTypeDef),
            "::",
            stringify!(USART_Clock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USART_CPOL) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_ClockInitTypeDef),
            "::",
            stringify!(USART_CPOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USART_CPHA) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_ClockInitTypeDef),
            "::",
            stringify!(USART_CPHA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).USART_LastBit) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(struct_USART_ClockInitTypeDef),
            "::",
            stringify!(USART_LastBit)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union union_ITM_Type__bindgen_ty_1 {
    #[doc = "< Offset:       ITM Stimulus Port 8-bit"]
    pub u8_: u8,
    #[doc = "< Offset:       ITM Stimulus Port 16-bit"]
    pub u16_: u16,
    #[doc = "< Offset:       ITM Stimulus Port 32-bit"]
    pub u32_: u32,
}
pub use self::enum_ErrorStatus as ErrorStatus;
pub use self::enum_FlagStatus as FlagStatus;
pub use self::enum_FlagStatus as ITStatus;
pub use self::enum_FunctionalState as FunctionalState;
#[doc = " @brief STM32F10x Interrupt Number Definition, according to the selected device\n        in @ref Library_configuration_section"]
pub use self::enum_IRQn as IRQn_Type;
extern "C" {
    #[doc = "< variable to receive characters"]
    pub static mut ITM_RxBuffer: ::std::os::raw::c_int;
    #[doc = "< System Clock Frequency (Core Clock)"]
    pub static mut SystemCoreClock: u32;
    pub static AHBPrescTable: [u8; 16usize];
}
