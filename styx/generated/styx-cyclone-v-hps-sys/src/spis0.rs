// BSD 2-Clause License
//
// Copyright (c) 2024, Styx Emulator Project
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#[repr(C)]
#[doc = "Register block"]
pub struct RegisterBlock {
    ctrlr0: Ctrlr0,
    _reserved1: [u8; 0x04],
    spienr: Spienr,
    mwcr: Mwcr,
    _reserved3: [u8; 0x08],
    txftlr: Txftlr,
    rxftlr: Rxftlr,
    txflr: Txflr,
    rxflr: Rxflr,
    sr: Sr,
    imr: Imr,
    isr: Isr,
    risr: Risr,
    txoicr: Txoicr,
    rxoicr: Rxoicr,
    rxuicr: Rxuicr,
    _reserved14: [u8; 0x04],
    icr: Icr,
    dmacr: Dmacr,
    dmatdlr: Dmatdlr,
    dmardlr: Dmardlr,
    idr: Idr,
    spi_version_id: SpiVersionId,
    dr: Dr,
}
impl crate::FromBytes for RegisterBlock {}
impl RegisterBlock {
    #[doc = "0x00 - This register controls the serial data transfer. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register."]
    #[inline(always)]
    pub const fn ctrlr0(&self) -> &Ctrlr0 {
        &self.ctrlr0
    }
    #[doc = "0x08 - Enables and disables all SPI operations."]
    #[inline(always)]
    pub const fn spienr(&self) -> &Spienr {
        &self.spienr
    }
    #[doc = "0x0c - This register controls the direction of the data word for the half-duplex Microwire serial protocol. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register."]
    #[inline(always)]
    pub const fn mwcr(&self) -> &Mwcr {
        &self.mwcr
    }
    #[doc = "0x18 - This register controls the threshold value for the transmit FIFO memory. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register."]
    #[inline(always)]
    pub const fn txftlr(&self) -> &Txftlr {
        &self.txftlr
    }
    #[doc = "0x1c - This register controls the threshold value for the receive FIFO memory. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register."]
    #[inline(always)]
    pub const fn rxftlr(&self) -> &Rxftlr {
        &self.rxftlr
    }
    #[doc = "0x20 - This register contains the number of valid data entries in the transmit FIFO memory. Ranges from 0 to 256."]
    #[inline(always)]
    pub const fn txflr(&self) -> &Txflr {
        &self.txflr
    }
    #[doc = "0x24 - This register contains the number of valid data entriesin the receive FIFO memory. This register can be read at any time. Ranges from 0 to 256."]
    #[inline(always)]
    pub const fn rxflr(&self) -> &Rxflr {
        &self.rxflr
    }
    #[doc = "0x28 - Reports FIFO transfer status, and any transmission/reception errors that may have occurred. The status register may be read at any time. None of the bits in this register request an interrupt."]
    #[inline(always)]
    pub const fn sr(&self) -> &Sr {
        &self.sr
    }
    #[doc = "0x2c - This register masks or enables all interrupts generated by the SPI Slave."]
    #[inline(always)]
    pub const fn imr(&self) -> &Imr {
        &self.imr
    }
    #[doc = "0x30 - This register reports the status of the SPI Slave interrupts after they have been masked."]
    #[inline(always)]
    pub const fn isr(&self) -> &Isr {
        &self.isr
    }
    #[doc = "0x34 - This register reports the status of the SPI Slave interrupts prior to masking."]
    #[inline(always)]
    pub const fn risr(&self) -> &Risr {
        &self.risr
    }
    #[doc = "0x38 - "]
    #[inline(always)]
    pub const fn txoicr(&self) -> &Txoicr {
        &self.txoicr
    }
    #[doc = "0x3c - "]
    #[inline(always)]
    pub const fn rxoicr(&self) -> &Rxoicr {
        &self.rxoicr
    }
    #[doc = "0x40 - "]
    #[inline(always)]
    pub const fn rxuicr(&self) -> &Rxuicr {
        &self.rxuicr
    }
    #[doc = "0x48 - "]
    #[inline(always)]
    pub const fn icr(&self) -> &Icr {
        &self.icr
    }
    #[doc = "0x4c - The register is used to enable the DMA Controller interface operation."]
    #[inline(always)]
    pub const fn dmacr(&self) -> &Dmacr {
        &self.dmacr
    }
    #[doc = "0x50 - Controls DMA Transmit FIFO Threshold"]
    #[inline(always)]
    pub const fn dmatdlr(&self) -> &Dmatdlr {
        &self.dmatdlr
    }
    #[doc = "0x54 - Controls DMA Receive FIFO Threshold"]
    #[inline(always)]
    pub const fn dmardlr(&self) -> &Dmardlr {
        &self.dmardlr
    }
    #[doc = "0x58 - This register stores a peripheral identification code"]
    #[inline(always)]
    pub const fn idr(&self) -> &Idr {
        &self.idr
    }
    #[doc = "0x5c - This read-only register stores the specific SPI Slave component version."]
    #[inline(always)]
    pub const fn spi_version_id(&self) -> &SpiVersionId {
        &self.spi_version_id
    }
    #[doc = "0x60 - The data register is a 16-bit read/write buffer for the transmit/receive FIFOs. When the register is read, data in the receive FIFO buffer is accessed. When it is written to, data are moved into the transmit FIFO buffer; a write can occur only when SPI_EN = 1. FIFOs are reset when SPI_EN = 0."]
    #[inline(always)]
    pub const fn dr(&self) -> &Dr {
        &self.dr
    }
}
#[doc = "ctrlr0 (rw) register accessor: This register controls the serial data transfer. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctrlr0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrlr0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrlr0`]
module"]
#[doc(alias = "ctrlr0")]
pub type Ctrlr0 = crate::Reg<ctrlr0::Ctrlr0Spec>;
#[doc = "This register controls the serial data transfer. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register."]
pub mod ctrlr0;
#[doc = "spienr (rw) register accessor: Enables and disables all SPI operations.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`spienr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`spienr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@spienr`]
module"]
#[doc(alias = "spienr")]
pub type Spienr = crate::Reg<spienr::SpienrSpec>;
#[doc = "Enables and disables all SPI operations."]
pub mod spienr;
#[doc = "mwcr (rw) register accessor: This register controls the direction of the data word for the half-duplex Microwire serial protocol. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mwcr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mwcr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mwcr`]
module"]
#[doc(alias = "mwcr")]
pub type Mwcr = crate::Reg<mwcr::MwcrSpec>;
#[doc = "This register controls the direction of the data word for the half-duplex Microwire serial protocol. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register."]
pub mod mwcr;
#[doc = "txftlr (rw) register accessor: This register controls the threshold value for the transmit FIFO memory. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txftlr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`txftlr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txftlr`]
module"]
#[doc(alias = "txftlr")]
pub type Txftlr = crate::Reg<txftlr::TxftlrSpec>;
#[doc = "This register controls the threshold value for the transmit FIFO memory. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register."]
pub mod txftlr;
#[doc = "rxftlr (rw) register accessor: This register controls the threshold value for the receive FIFO memory. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxftlr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`rxftlr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxftlr`]
module"]
#[doc(alias = "rxftlr")]
pub type Rxftlr = crate::Reg<rxftlr::RxftlrSpec>;
#[doc = "This register controls the threshold value for the receive FIFO memory. It is impossible to write to this register when the SPI Slave is enabled. The SPI Slave is enabled and disabled by writing to the SPIENR register."]
pub mod rxftlr;
#[doc = "txflr (r) register accessor: This register contains the number of valid data entries in the transmit FIFO memory. Ranges from 0 to 256.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txflr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txflr`]
module"]
#[doc(alias = "txflr")]
pub type Txflr = crate::Reg<txflr::TxflrSpec>;
#[doc = "This register contains the number of valid data entries in the transmit FIFO memory. Ranges from 0 to 256."]
pub mod txflr;
#[doc = "rxflr (r) register accessor: This register contains the number of valid data entriesin the receive FIFO memory. This register can be read at any time. Ranges from 0 to 256.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxflr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxflr`]
module"]
#[doc(alias = "rxflr")]
pub type Rxflr = crate::Reg<rxflr::RxflrSpec>;
#[doc = "This register contains the number of valid data entriesin the receive FIFO memory. This register can be read at any time. Ranges from 0 to 256."]
pub mod rxflr;
#[doc = "sr (r) register accessor: Reports FIFO transfer status, and any transmission/reception errors that may have occurred. The status register may be read at any time. None of the bits in this register request an interrupt.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sr`]
module"]
#[doc(alias = "sr")]
pub type Sr = crate::Reg<sr::SrSpec>;
#[doc = "Reports FIFO transfer status, and any transmission/reception errors that may have occurred. The status register may be read at any time. None of the bits in this register request an interrupt."]
pub mod sr;
#[doc = "imr (rw) register accessor: This register masks or enables all interrupts generated by the SPI Slave.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`imr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`imr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@imr`]
module"]
#[doc(alias = "imr")]
pub type Imr = crate::Reg<imr::ImrSpec>;
#[doc = "This register masks or enables all interrupts generated by the SPI Slave."]
pub mod imr;
#[doc = "isr (r) register accessor: This register reports the status of the SPI Slave interrupts after they have been masked.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`isr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@isr`]
module"]
#[doc(alias = "isr")]
pub type Isr = crate::Reg<isr::IsrSpec>;
#[doc = "This register reports the status of the SPI Slave interrupts after they have been masked."]
pub mod isr;
#[doc = "risr (r) register accessor: This register reports the status of the SPI Slave interrupts prior to masking.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`risr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@risr`]
module"]
#[doc(alias = "risr")]
pub type Risr = crate::Reg<risr::RisrSpec>;
#[doc = "This register reports the status of the SPI Slave interrupts prior to masking."]
pub mod risr;
#[doc = "txoicr (r) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`txoicr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@txoicr`]
module"]
#[doc(alias = "txoicr")]
pub type Txoicr = crate::Reg<txoicr::TxoicrSpec>;
#[doc = ""]
pub mod txoicr;
#[doc = "rxoicr (r) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxoicr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxoicr`]
module"]
#[doc(alias = "rxoicr")]
pub type Rxoicr = crate::Reg<rxoicr::RxoicrSpec>;
#[doc = ""]
pub mod rxoicr;
#[doc = "rxuicr (r) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`rxuicr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rxuicr`]
module"]
#[doc(alias = "rxuicr")]
pub type Rxuicr = crate::Reg<rxuicr::RxuicrSpec>;
#[doc = ""]
pub mod rxuicr;
#[doc = "icr (r) register accessor: \n\nYou can [`read`](crate::generic::Reg::read) this register and get [`icr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@icr`]
module"]
#[doc(alias = "icr")]
pub type Icr = crate::Reg<icr::IcrSpec>;
#[doc = ""]
pub mod icr;
#[doc = "dmacr (rw) register accessor: The register is used to enable the DMA Controller interface operation.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dmacr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dmacr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmacr`]
module"]
#[doc(alias = "dmacr")]
pub type Dmacr = crate::Reg<dmacr::DmacrSpec>;
#[doc = "The register is used to enable the DMA Controller interface operation."]
pub mod dmacr;
#[doc = "dmatdlr (rw) register accessor: Controls DMA Transmit FIFO Threshold\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dmatdlr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dmatdlr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmatdlr`]
module"]
#[doc(alias = "dmatdlr")]
pub type Dmatdlr = crate::Reg<dmatdlr::DmatdlrSpec>;
#[doc = "Controls DMA Transmit FIFO Threshold"]
pub mod dmatdlr;
#[doc = "dmardlr (rw) register accessor: Controls DMA Receive FIFO Threshold\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dmardlr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dmardlr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmardlr`]
module"]
#[doc(alias = "dmardlr")]
pub type Dmardlr = crate::Reg<dmardlr::DmardlrSpec>;
#[doc = "Controls DMA Receive FIFO Threshold"]
pub mod dmardlr;
#[doc = "idr (r) register accessor: This register stores a peripheral identification code\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`idr::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idr`]
module"]
#[doc(alias = "idr")]
pub type Idr = crate::Reg<idr::IdrSpec>;
#[doc = "This register stores a peripheral identification code"]
pub mod idr;
#[doc = "spi_version_id (rw) register accessor: This read-only register stores the specific SPI Slave component version.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`spi_version_id::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`spi_version_id::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@spi_version_id`]
module"]
#[doc(alias = "spi_version_id")]
pub type SpiVersionId = crate::Reg<spi_version_id::SpiVersionIdSpec>;
#[doc = "This read-only register stores the specific SPI Slave component version."]
pub mod spi_version_id;
#[doc = "dr (rw) register accessor: The data register is a 16-bit read/write buffer for the transmit/receive FIFOs. When the register is read, data in the receive FIFO buffer is accessed. When it is written to, data are moved into the transmit FIFO buffer; a write can occur only when SPI_EN = 1. FIFOs are reset when SPI_EN = 0.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dr`]
module"]
#[doc(alias = "dr")]
pub type Dr = crate::Reg<dr::DrSpec>;
#[doc = "The data register is a 16-bit read/write buffer for the transmit/receive FIFOs. When the register is read, data in the receive FIFO buffer is accessed. When it is written to, data are moved into the transmit FIFO buffer; a write can occur only when SPI_EN = 1. FIFOs are reset when SPI_EN = 0."]
pub mod dr;
