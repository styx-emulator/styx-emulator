#!/bin/bash

set -e

CMD=$(basename "$0")
if [[ ! -d ${ENVOY_CONFIG_DIR} ]];then
  mkdir "${ENVOY_CONFIG_DIR}"
fi
cat << EOF > "${ENVOY_CONFIG}"
#########################################################
#
# This files is generateded using ${CMD}
#
#########################################################
admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address: { address: 0.0.0.0, port_value: ${ENVOY_URL_PORT} }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: ["*"]
                      routes:
                        ## traceapp_service
                        - match: { prefix: "/traceapp.TraceAppSessionService" }
                          route:
                            cluster: traceapp_service
                            timeout: 0s
                            max_stream_duration:
                              grpc_timeout_header_max: 0s
                        # typhunix_interop_service
                        - match: { prefix: "/typhunix_interop.Typhunix" }
                          route:
                            cluster: typhunix_interop_service
                            timeout: 0s
                            max_stream_duration:
                              grpc_timeout_header_max: 0s

                        # "/tracing.EmulationRegistryService/Start"
                        - match: { prefix: "/emulation_registry.EmulationRegistryService" }
                          route:
                            cluster: emulation-registry-service
                            timeout: 0s
                            max_stream_duration:
                              grpc_timeout_header_max: 0s
                        # /workspace.WorkspaceSvc
                        - match: { prefix: "/workspace.WorkspaceSvc" }
                          route:
                            cluster: workspace-service
                            timeout: 0s
                            max_stream_duration:
                              grpc_timeout_header_max: 0s


                      cors:
                        allow_origin_string_match:
                          - prefix: "*"
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,custom-header-1,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                        max_age: "1728000"
                        expose_headers: custom-header-1,grpc-status,grpc-message
                http_filters:
                  - name: envoy.filters.http.grpc_web
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                  - name: envoy.filters.http.cors
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
  clusters:
    - name: traceapp_service
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_0
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      # Generated by: ${CMD}
                      # traceapp: generated from WEBAPI_URL=${WEBAPI_URL}
                      address: ${WEBAPI_URL_HOST}
                      port_value: ${WEBAPI_URL_PORT}

    - name: typhunix_interop_service
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_1
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      # Generated by: ${CMD}
                      # typhunix: generated from TYPHUNIX_URL=${TYPHUNIX_URL}
                      address: ${TYPHUNIX_URL_HOST}
                      port_value: ${TYPHUNIX_URL_PORT}

    - name: emulation-registry-service
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_1
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      # Generated by: ${CMD}
                      # emuregsvc: generated from TRACE_EXECUTION_URL=${TRACE_EXECUTION_URL}
                      address: ${TRACE_EXECUTION_URL_HOST}
                      port_value: ${TRACE_EXECUTION_URL_PORT}

    - name: workspace-service
      connect_timeout: 0.25s
      type: logical_dns
      http2_protocol_options: {}
      lb_policy: round_robin
      load_assignment:
        cluster_name: cluster_1
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      # Generated by: ${CMD}
                      # workspace-service: generated from WORKSPACE_URL=${WORKSPACE_URL}
                      address: ${WORKSPACE_URL_HOST}
                      port_value: ${WORKSPACE_URL_PORT}


EOF


cat << EOF > "${TRACE_SRC_DIR}"/src/environments/environment.local.ts
/**
 **********************************************************************
 * This file is generated by ${CMD}
 **********************************************************************
 */
export const environment = {
    production: false,
    webApiUrl: 'http://${ENVOY_URL_HOST}:${ENVOY_URL_PORT}'
};
EOF

exit 0
